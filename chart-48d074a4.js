function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,_toPropertyKey(a.key),a)}}function _createClass(t,e,i){return e&&_defineProperties(t.prototype,e),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _possibleConstructorReturn(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _createSuper(i){var a=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(i);return _possibleConstructorReturn(this,a?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _superPropBase(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_getPrototypeOf(t)););return t}function _get(){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,i){var a=_superPropBase(t,e);if(a)return(a=Object.getOwnPropertyDescriptor(a,e)).get?a.get.call(arguments.length<3?t:i):a.value}).apply(this,arguments)}function _taggedTemplateLiteral(t,e){return e=e||t.slice(0),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}function _toArray(t){return _arrayWithHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableRest()}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _arrayWithHoles(t){if(Array.isArray(t))return t}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _unsupportedIterableToArray(t,e){var i;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(i="Object"===(i=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:i)||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?_arrayLikeToArray(t,e):void 0}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,a=new Array(e);i<e;i++)a[i]=t[i];return a}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _toPrimitive(t,e){if("object"!=typeof t||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0===i)return("string"===e?String:Number)(t);i=i.call(t,e||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"==typeof t?t:String(t)}function _decorate(t,e,i,a){var r=_getDecoratorsApi();if(a)for(var s=0;s<a.length;s++)r=a[s](r);var e=e(function(t){r.initializeInstanceElements(t,n.elements)},i),n=r.decorateClass(_coalesceClassElements(e.d.map(_createElementDescriptor)),t);return r.initializeClassElements(e.F,n.elements),r.runClassFinishers(e.F,n.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return t};var t={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(i,t){["method","field"].forEach(function(e){t.forEach(function(t){t.kind===e&&"own"===t.placement&&this.defineClassElement(i,t)},this)},this)},initializeClassElements:function(a,t){var r=a.prototype;["method","field"].forEach(function(i){t.forEach(function(t){var e=t.placement;t.kind!==i||"static"!==e&&"prototype"!==e||this.defineClassElement("static"===e?a:r,t)},this)},this)},defineClassElement:function(t,e){var i,a=e.descriptor;"field"===e.kind&&(i=e.initializer,a={enumerable:a.enumerable,writable:a.writable,configurable:a.configurable,value:void 0===i?void 0:i.call(t)}),Object.defineProperty(t,e.key,a)},decorateClass:function(t,e){var i=[],a=[],r={static:[],prototype:[],own:[]};return t.forEach(function(t){this.addElementPlacement(t,r)},this),t.forEach(function(t){if(!_hasDecorators(t))return i.push(t);t=this.decorateElement(t,r);i.push(t.element),i.push.apply(i,t.extras),a.push.apply(a,t.finishers)},this),e?(t=this.decorateConstructor(i,e),a.push.apply(a,t.finishers),t.finishers=a,t):{elements:i,finishers:a}},addElementPlacement:function(t,e,i){e=e[t.placement];if(!i&&-1!==e.indexOf(t.key))throw new TypeError("Duplicated element ("+t.key+")");e.push(t.key)},decorateElement:function(t,e){for(var i=[],a=[],r=t.decorators,s=r.length-1;0<=s;s--){var n=e[t.placement],n=(n.splice(n.indexOf(t.key),1),this.fromElementDescriptor(t)),n=this.toElementFinisherExtras((0,r[s])(n)||n),o=(t=n.element,this.addElementPlacement(t,e),n.finisher&&a.push(n.finisher),n.extras);if(o){for(var l=0;l<o.length;l++)this.addElementPlacement(o[l],e);i.push.apply(i,o)}}return{element:t,finishers:a,extras:i}},decorateConstructor:function(t,e){for(var i=[],a=e.length-1;0<=a;a--){var r=this.fromClassDescriptor(t),r=this.toClassDescriptor((0,e[a])(r)||r);if(void 0!==r.finisher&&i.push(r.finisher),void 0!==r.elements){t=r.elements;for(var s=0;s<t.length-1;s++)for(var n=s+1;n<t.length;n++)if(t[s].key===t[n].key&&t[s].placement===t[n].placement)throw new TypeError("Duplicated element ("+t[s].key+")")}}return{elements:t,finishers:i}},fromElementDescriptor:function(t){var e={kind:t.kind,key:t.key,placement:t.placement,descriptor:t.descriptor};return Object.defineProperty(e,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),"field"===t.kind&&(e.initializer=t.initializer),e},toElementDescriptors:function(t){if(void 0!==t)return _toArray(t).map(function(t){var e=this.toElementDescriptor(t);return this.disallowProperty(t,"finisher","An element descriptor"),this.disallowProperty(t,"extras","An element descriptor"),e},this)},toElementDescriptor:function(t){var e=String(t.kind);if("method"!==e&&"field"!==e)throw new TypeError('An element descriptor\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "'+e+'"');var i=_toPropertyKey(t.key),a=String(t.placement);if("static"!==a&&"prototype"!==a&&"own"!==a)throw new TypeError('An element descriptor\'s .placement property must be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "'+a+'"');var r=t.descriptor,i=(this.disallowProperty(t,"elements","An element descriptor"),{kind:e,key:i,placement:a,descriptor:Object.assign({},r)});return"field"!==e?this.disallowProperty(t,"initializer","A method descriptor"):(this.disallowProperty(r,"get","The property descriptor of a field descriptor"),this.disallowProperty(r,"set","The property descriptor of a field descriptor"),this.disallowProperty(r,"value","The property descriptor of a field descriptor"),i.initializer=t.initializer),i},toElementFinisherExtras:function(t){return{element:this.toElementDescriptor(t),finisher:_optionalCallableProperty(t,"finisher"),extras:this.toElementDescriptors(t.extras)}},fromClassDescriptor:function(t){t={kind:"class",elements:t.map(this.fromElementDescriptor,this)};return Object.defineProperty(t,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),t},toClassDescriptor:function(t){var e=String(t.kind);if("class"!==e)throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator created a class descriptor with .kind "'+e+'"');this.disallowProperty(t,"key","A class descriptor"),this.disallowProperty(t,"placement","A class descriptor"),this.disallowProperty(t,"descriptor","A class descriptor"),this.disallowProperty(t,"initializer","A class descriptor"),this.disallowProperty(t,"extras","A class descriptor");e=_optionalCallableProperty(t,"finisher");return{elements:this.toElementDescriptors(t.elements),finisher:e}},runClassFinishers:function(t,e){for(var i=0;i<e.length;i++){var a=(0,e[i])(t);if(void 0!==a){if("function"!=typeof a)throw new TypeError("Finishers must return a constructor.");t=a}}return t},disallowProperty:function(t,e,i){if(void 0!==t[e])throw new TypeError(i+" can't have a ."+e+" property.")}};return t}function _createElementDescriptor(t){var e,i=_toPropertyKey(t.key),i=("method"===t.kind?e={value:t.value,writable:!0,configurable:!0,enumerable:!1}:"get"===t.kind?e={get:t.value,configurable:!0,enumerable:!1}:"set"===t.kind?e={set:t.value,configurable:!0,enumerable:!1}:"field"===t.kind&&(e={configurable:!0,writable:!0,enumerable:!0}),{kind:"field"===t.kind?"field":"method",key:i,placement:t.static?"static":"field"===t.kind?"own":"prototype",descriptor:e});return t.decorators&&(i.decorators=t.decorators),"field"===t.kind&&(i.initializer=t.value),i}function _coalesceGetterSetter(t,e){void 0!==t.descriptor.get?e.descriptor.get=t.descriptor.get:e.descriptor.set=t.descriptor.set}function _coalesceClassElements(t){function e(t){return"method"===t.kind&&t.key===s.key&&t.placement===s.placement}for(var i=[],a=0;a<t.length;a++){var r,s=t[a];if("method"===s.kind&&(r=i.find(e)))if(_isDataDescriptor(s.descriptor)||_isDataDescriptor(r.descriptor)){if(_hasDecorators(s)||_hasDecorators(r))throw new ReferenceError("Duplicated methods ("+s.key+") can't be decorated.");r.descriptor=s.descriptor}else{if(_hasDecorators(s)){if(_hasDecorators(r))throw new ReferenceError("Decorators can't be placed on different accessors with for the same property ("+s.key+").");r.decorators=s.decorators}_coalesceGetterSetter(s,r)}else i.push(s)}return i}function _hasDecorators(t){return t.decorators&&t.decorators.length}function _isDataDescriptor(t){return void 0!==t&&!(void 0===t.value&&void 0===t.writable)}function _optionalCallableProperty(t,e){t=t[e];if(void 0!==t&&"function"!=typeof t)throw new TypeError("Expected '"+e+"' to be a function");return t}const t$1=window,e$4=t$1.ShadowRoot&&(void 0===t$1.ShadyCSS||t$1.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s$3=Symbol(),n$4=new WeakMap;let o$3=class{constructor(t,e,i){if(this._$cssResult$=!0,i!==s$3)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;var e,i=this.t;return e$4&&void 0===t&&(e=void 0!==i&&1===i.length,void 0===(t=e?n$4.get(i):t))&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e)&&n$4.set(i,t),t}toString(){return this.cssText}};const r$2=t=>new o$3("string"==typeof t?t:t+"",void 0,s$3),i$2=(a,...t)=>{t=1===a.length?a[0]:t.reduce((t,e,i)=>t+(()=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})()+a[i+1],a[0]);return new o$3(t,a,s$3)},S$1=(a,t)=>{e$4?a.adoptedStyleSheets=t.map(t=>t instanceof CSSStyleSheet?t:t.styleSheet):t.forEach(t=>{var e=document.createElement("style"),i=t$1.litNonce;void 0!==i&&e.setAttribute("nonce",i),e.textContent=t.cssText,a.appendChild(e)})},c$1=e$4?t=>t:e=>{if(e instanceof CSSStyleSheet){let t="";for(const i of e.cssRules)t+=i.cssText;return r$2(t)}return e};var s$2,t,l,o,n;const e$3=window,r$1=e$3.trustedTypes,h$1=r$1?r$1.emptyScript:"",o$2=e$3.reactiveElementPolyfillSupport,n$3={toAttribute(t,e){switch(e){case Boolean:t=t?h$1:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},a$1=(t,e)=>e!==t&&(e==e||t==t),l$2={attribute:!0,type:String,converter:n$3,reflect:!1,hasChanged:a$1};let d$1=class extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var e;this.finalize(),(null!=(e=this.h)?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const i=[];return this.elementProperties.forEach((t,e)=>{t=this._$Ep(e,t);void 0!==t&&(this._$Ev.set(t,e),i.push(t))}),i}static createProperty(t,e=l$2){var i;e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),e.noAccessor||this.prototype.hasOwnProperty(t)||(i="symbol"==typeof t?Symbol():"__"+t,void 0!==(i=this.getPropertyDescriptor(t,i,e))&&Object.defineProperty(this.prototype,t,i))}static getPropertyDescriptor(i,a,r){return{get(){return this[a]},set(t){var e=this[i];this[a]=t,this.requestUpdate(i,e,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||l$2}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){var e=[];if(Array.isArray(t)){var i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(c$1(t))}else void 0!==t&&e.push(c$1(t));return e}static _$Ep(t,e){e=e.attribute;return!1===e?void 0:"string"==typeof e?e:"string"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise(t=>this.enableUpdating=t),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null!=(t=this.constructor.h)&&t.forEach(t=>t(this))}addController(t){var e;(null!=(e=this._$ES)?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&null!=(e=t.hostConnected)&&e.call(t)}removeController(t){var e;null!=(e=this._$ES)&&e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])})}createRenderRoot(){var t=null!=(t=this.shadowRoot)?t:this.attachShadow(this.constructor.shadowRootOptions);return S$1(t,this.constructor.elementStyles),t}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null!=(t=this._$ES)&&t.forEach(t=>{var e;return null==(e=t.hostConnected)?void 0:e.call(t)})}enableUpdating(t){}disconnectedCallback(){var t;null!=(t=this._$ES)&&t.forEach(t=>{var e;return null==(e=t.hostDisconnected)?void 0:e.call(t)})}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=l$2){var a,r=this.constructor._$Ep(t,i);void 0!==r&&!0===i.reflect&&(a=(void 0!==(null==(a=i.converter)?void 0:a.toAttribute)?i.converter:n$3).toAttribute(e,i.type),this._$El=t,null==a?this.removeAttribute(r):this.setAttribute(r,a),this._$El=null)}_$AK(t,e){var i=this.constructor,a=i._$Ev.get(t);if(void 0!==a&&this._$El!==a){const t=i.getPropertyOptions(a),r="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null==(i=t.converter)?void 0:i.fromAttribute)?t.converter:n$3;this._$El=a,this[a]=r.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,i){let a=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||a$1)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):a=!1),!this.isUpdatePending&&a&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}var t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(this.isUpdatePending){this.hasUpdated,this._$Ei&&(this._$Ei.forEach((t,e)=>this[e]=t),this._$Ei=void 0);let t=!1;var i=this._$AL;try{(t=this.shouldUpdate(i))?(this.willUpdate(i),null!=(e=this._$ES)&&e.forEach(t=>{var e;return null==(e=t.hostUpdate)?void 0:e.call(t)}),this.update(i)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(i)}}willUpdate(t){}_$AE(t){var e;null!=(e=this._$ES)&&e.forEach(t=>{var e;return null==(e=t.hostUpdated)?void 0:e.call(t)}),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach((t,e)=>this._$EO(e,this[e],t)),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}};d$1.finalized=!0,d$1.elementProperties=new Map,d$1.elementStyles=[],d$1.shadowRootOptions={mode:"open"},null!=o$2&&o$2({ReactiveElement:d$1}),(null!=(s$2=e$3.reactiveElementVersions)?s$2:e$3.reactiveElementVersions=[]).push("1.6.1");const i$1=window,s$1=i$1.trustedTypes,e$2=s$1?s$1.createPolicy("lit-html",{createHTML:t=>t}):void 0,o$1="$lit$",n$2=`lit$${(Math.random()+"").slice(9)}$`,l$1="?"+n$2,h=`<${l$1}>`,r=document,u=()=>r.createComment(""),d=t=>null===t||"object"!=typeof t&&"function"!=typeof t,c=Array.isArray,v=t=>c(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]),a="[ \t\n\f\r]",f=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,_=/-->/g,m=/>/g,p=RegExp(`>|${a}(?:([^\\s"'>=/]+)(${a}*=${a}*(?:[^ 	
\r"'\`<>=]|("|')|))|$)`,"g"),g=/'/g,$=/"/g,y=/^(?:script|style|textarea|title)$/i,w=i=>(t,...e)=>({_$litType$:i,strings:t,values:e}),x=w(1),T=Symbol.for("lit-noChange"),A=Symbol.for("lit-nothing"),E=new WeakMap,C=r.createTreeWalker(r,129,null,!1);function P(t,e){if(Array.isArray(t)&&t.hasOwnProperty("raw"))return void 0!==e$2?e$2.createHTML(e):e;throw Error("invalid template strings array")}const V=(s,t)=>{const n=s.length-1,o=[];let l,c=2===t?"<svg>":"",d=f;for(let r=0;r<n;r++){const n=s[r];let t,e,i=-1,a=0;for(;a<n.length&&(d.lastIndex=a,null!==(e=d.exec(n)));)a=d.lastIndex,d===f?"!--"===e[1]?d=_:void 0!==e[1]?d=m:void 0!==e[2]?(y.test(e[2])&&(l=RegExp("</"+e[2],"g")),d=p):void 0!==e[3]&&(d=p):d===p?">"===e[0]?(d=null!=l?l:f,i=-1):void 0===e[1]?i=-2:(i=d.lastIndex-e[2].length,t=e[1],d=void 0===e[3]?p:'"'===e[3]?$:g):d===$||d===g?d=p:d===_||d===m?d=f:(d=p,l=void 0);var u=d===p&&s[r+1].startsWith("/>")?" ":"";c+=d===f?n+h:0<=i?(o.push(t),n.slice(0,i)+o$1+n.slice(i)+n$2+u):n+n$2+(-2===i?(o.push(void 0),r):u)}return[P(s,c+(s[n]||"<?>")+(2===t?"</svg>":"")),o]};class N{constructor({strings:e,_$litType$:i},t){var a;this.parts=[];let r=0,s=0;var n=e.length-1,o=this.parts,[e,l]=V(e,i);if(this.el=N.createElement(e,t),C.currentNode=this.el.content,2===i){const e=this.el.content,i=e.firstChild;i.remove(),e.append(...i.childNodes)}for(;null!==(a=C.nextNode())&&o.length<n;){if(1===a.nodeType){if(a.hasAttributes()){const e=[];for(const i of a.getAttributeNames())if(i.endsWith(o$1)||i.startsWith(n$2)){var h=l[s++];if(e.push(i),void 0!==h){const e=a.getAttribute(h.toLowerCase()+o$1).split(n$2),i=/([.?@])?(.*)/.exec(h);o.push({type:1,index:r,name:i[2],strings:e,ctor:"."===i[1]?H:"?"===i[1]?L:"@"===i[1]?z:k})}else o.push({type:6,index:r})}for(const i of e)a.removeAttribute(i)}if(y.test(a.tagName)){const e=a.textContent.split(n$2),i=e.length-1;if(0<i){a.textContent=s$1?s$1.emptyScript:"";for(let t=0;t<i;t++)a.append(e[t],u()),C.nextNode(),o.push({type:2,index:++r});a.append(e[i],u())}}}else if(8===a.nodeType)if(a.data===l$1)o.push({type:2,index:r});else{let t=-1;for(;-1!==(t=a.data.indexOf(n$2,t+1));)o.push({type:7,index:r}),t+=n$2.length-1}r++}}static createElement(t,e){var i=r.createElement("template");return i.innerHTML=t,i}}function S(e,i,a=e,r){var s;if(i!==T){let t=void 0!==r?null==(n=a._$Co)?void 0:n[r]:a._$Cl;var n=d(i)?void 0:i._$litDirective$;(null==t?void 0:t.constructor)!==n&&(null!=(s=null==t?void 0:t._$AO)&&s.call(t,!1),void 0===n?t=void 0:(t=new n(e))._$AT(e,a,r),void 0!==r?(null!=(s=a._$Co)?s:a._$Co=[])[r]=t:a._$Cl=t),void 0!==t&&(i=S(e,t._$AS(e,i.values),t,r))}return i}class M{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var{el:{content:t},parts:i}=this._$AD,a=(null!=(a=null==e?void 0:e.creationScope)?a:r).importNode(t,!0);C.currentNode=a;let s=C.nextNode(),n=0,o=0,l=i[0];for(;void 0!==l;){if(n===l.index){let t;2===l.type?t=new R(s,s.nextSibling,this,e):1===l.type?t=new l.ctor(s,l.name,l.strings,this,e):6===l.type&&(t=new Z(s,this,e)),this._$AV.push(t),l=i[++o]}n!==(null==l?void 0:l.index)&&(s=C.nextNode(),n++)}return C.currentNode=r,a}v(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class R{constructor(t,e,i,a){this.type=2,this._$AH=A,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=a,this._$Cp=null==(t=null==a?void 0:a.isConnected)||t}get _$AU(){var t;return null!=(t=null==(t=this._$AM)?void 0:t._$AU)?t:this._$Cp}get parentNode(){let t=this._$AA.parentNode;var e=this._$AM;return t=void 0!==e&&11===(null==t?void 0:t.nodeType)?e.parentNode:t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=S(this,t,e),d(t)?t===A||null==t||""===t?(this._$AH!==A&&this._$AR(),this._$AH=A):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):v(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==A&&d(this._$AH)?this._$AA.nextSibling.data=t:this.$(r.createTextNode(t)),this._$AH=t}g(t){var e,{values:i,_$litType$:a}=t,a="number"==typeof a?this._$AC(t):(void 0===a.el&&(a.el=N.createElement(P(a.h,a.h[0]),this.options)),a);if((null==(e=this._$AH)?void 0:e._$AD)===a)this._$AH.v(i);else{const t=new M(a,this),e=t.u(this.options);t.v(i),this.$(e),this._$AH=t}}_$AC(t){let e=E.get(t.strings);return void 0===e&&E.set(t.strings,e=new N(t)),e}T(t){c(this._$AH)||(this._$AH=[],this._$AR());var e=this._$AH;let i,a=0;for(const r of t)a===e.length?e.push(i=new R(this.k(u()),this.k(u()),this,this.options)):i=e[a],i._$AI(r),a++;a<e.length&&(this._$AR(i&&i._$AB.nextSibling,a),e.length=a)}_$AR(t=this._$AA.nextSibling,e){var i;for(null!=(i=this._$AP)&&i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null!=(e=this._$AP))&&e.call(this,t)}}class k{constructor(t,e,i,a,r){this.type=1,this._$AH=A,this._$AN=void 0,this.element=t,this.name=e,this._$AM=a,this.options=r,2<i.length||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=A}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(i,a=this,r,s){var n=this.strings;let o=!1;if(void 0===n)i=S(this,i,a,0),(o=!d(i)||i!==this._$AH&&i!==T)&&(this._$AH=i);else{const s=i;let t,e;for(i=n[0],t=0;t<n.length-1;t++)(e=S(this,s[r+t],a,t))===T&&(e=this._$AH[t]),o=o||!d(e)||e!==this._$AH[t],e===A?i=A:i!==A&&(i+=(null!=e?e:"")+n[t+1]),this._$AH[t]=e}o&&!s&&this.j(i)}j(t){t===A?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class H extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===A?void 0:t}}const I=s$1?s$1.emptyScript:"";class L extends k{constructor(){super(...arguments),this.type=4}j(t){t&&t!==A?this.element.setAttribute(this.name,I):this.element.removeAttribute(this.name)}}class z extends k{constructor(t,e,i,a,r){super(t,e,i,a,r),this.type=5}_$AI(t,e=this){var i,a;(t=null!=(e=S(this,t,e,0))?e:A)!==T&&(e=this._$AH,i=t===A&&e!==A||t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive,a=t!==A&&(e===A||i),i&&this.element.removeEventListener(this.name,this,e),a&&this.element.addEventListener(this.name,this,t),this._$AH=t)}handleEvent(t){var e;"function"==typeof this._$AH?this._$AH.call(null!=(e=null==(e=this.options)?void 0:e.host)?e:this.element,t):this._$AH.handleEvent(t)}}class Z{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t)}}const B=i$1.litHtmlPolyfillSupport,D=(null!=B&&B(N,R),(null!=(t=i$1.litHtmlVersions)?t:i$1.litHtmlVersions=[]).push("2.8.0"),(t,e,i)=>{var a,r=null!=(r=null==i?void 0:i.renderBefore)?r:e;let s=r._$litPart$;if(void 0===s){const t=null!=(a=null==i?void 0:i.renderBefore)?a:null;r._$litPart$=s=new R(e.insertBefore(u(),t),t,void 0,null!=i?i:{})}return s._$AI(t),s});class s extends d$1{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e=super.createRenderRoot();return null==(t=this.renderOptions).renderBefore&&(t.renderBefore=e.firstChild),e}update(t){var e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=D(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null!=(t=this._$Do)&&t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null!=(t=this._$Do)&&t.setConnected(!1)}render(){return T}}s.finalized=!0,s._$litElement$=!0,null!=(l=globalThis.litElementHydrateSupport)&&l.call(globalThis,{LitElement:s});const n$1=globalThis.litElementPolyfillSupport,e$1=(null!=n$1&&n$1({LitElement:s}),(null!=(o=globalThis.litElementVersions)?o:globalThis.litElementVersions=[]).push("3.3.0"),r=>t=>{var e,i,a;return"function"!=typeof t?(e=r,{kind:a,elements:i}=t,{kind:a,elements:i,finisher(t){customElements.define(e,t)}}):(a=t,customElements.define(r,a),a)}),i=(e,i)=>"method"!==i.kind||!i.descriptor||"value"in i.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:i.key,initializer(){"function"==typeof i.initializer&&(this[i.key]=i.initializer.call(this))},finisher(t){t.createProperty(i.key,e)}}:{...i,finisher(t){t.createProperty(i.key,e)}};function e(a){return(t,e)=>void 0!==e?void t.constructor.createProperty(e,a):i(a,t)}function round(t){return t+.5|0}null!=(n=window.HTMLSlotElement)&&n.prototype.assignedElements;const lim=(t,e,i)=>Math.max(Math.min(t,i),e);function p2b(t){return lim(round(2.55*t),0,255)}function n2b(t){return lim(round(255*t),0,255)}function b2n(t){return lim(round(t/2.55)/100,0,1)}function n2p(t){return lim(round(100*t),0,100)}const map$1={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},hex=[..."0123456789ABCDEF"],h1=t=>hex[15&t],h2=t=>hex[(240&t)>>4]+hex[15&t],eq=t=>(240&t)>>4==(15&t),isShort=t=>eq(t.r)&&eq(t.g)&&eq(t.b)&&eq(t.a);function hexParse(t){var e,i=t.length;return"#"===t[0]&&(4===i||5===i?e={r:255&17*map$1[t[1]],g:255&17*map$1[t[2]],b:255&17*map$1[t[3]],a:5===i?17*map$1[t[4]]:255}:7!==i&&9!==i||(e={r:map$1[t[1]]<<4|map$1[t[2]],g:map$1[t[3]]<<4|map$1[t[4]],b:map$1[t[5]]<<4|map$1[t[6]],a:9===i?map$1[t[7]]<<4|map$1[t[8]]:255})),e}const alpha=(t,e)=>t<255?e(t):"";function hexString(t){var e=isShort(t)?h1:h2;return t?"#"+e(t.r)+e(t.g)+e(t.b)+alpha(t.a,e):void 0}const HUE_RE=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function hsl2rgbn(i,t,a){const r=t*Math.min(a,1-a);t=(t,e=(t+i/30)%12)=>a-r*Math.max(Math.min(e-3,9-e,1),-1);return[t(0),t(8),t(4)]}function hsv2rgbn(i,a,r){var t=(t,e=(t+i/60)%6)=>r-r*a*Math.max(Math.min(e,4-e,1),0);return[t(5),t(3),t(1)]}function hwb2rgbn(t,e,i){var a=hsl2rgbn(t,1,.5);let r;for(1<e+i&&(e*=r=1/(e+i),i*=r),r=0;r<3;r++)a[r]*=1-e-i,a[r]+=e;return a}function hueValue(t,e,i,a,r){return t===r?(e-i)/a+(e<i?6:0):e===r?(i-t)/a+2:(t-e)/a+4}function rgb2hsl(t){var e=t.r/255,i=t.g/255,t=t.b/255,a=Math.max(e,i,t),r=Math.min(e,i,t),s=(a+r)/2;let n,o,l;return a!==r&&(l=a-r,o=.5<s?l/(2-a-r):l/(a+r),n=60*(n=hueValue(e,i,t,l,a))+.5),[0|n,o||0,s]}function calln(t,e,i,a){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,a)).map(n2b)}function hsl2rgb(t,e,i){return calln(hsl2rgbn,t,e,i)}function hwb2rgb(t,e,i){return calln(hwb2rgbn,t,e,i)}function hsv2rgb(t,e,i){return calln(hsv2rgbn,t,e,i)}function hue(t){return(t%360+360)%360}function hueParse(t){var e,i,a,t=HUE_RE.exec(t);let r=255,s;if(t)return t[5]!==s&&(r=(t[6]?p2b:n2b)(+t[5])),e=hue(+t[2]),i=+t[3]/100,a=+t[4]/100,{r:(s=("hwb"===t[1]?hwb2rgb:"hsv"===t[1]?hsv2rgb:hsl2rgb)(e,i,a))[0],g:s[1],b:s[2],a:r}}function rotate(t,e){var i=rgb2hsl(t);i[0]=hue(i[0]+e),i=hsl2rgb(i),t.r=i[0],t.g=i[1],t.b=i[2]}function hslString(t){var e,i,a;if(t)return e=(a=rgb2hsl(t))[0],i=n2p(a[1]),a=n2p(a[2]),t.a<255?`hsla(${e}, ${i}%, ${a}%, ${b2n(t.a)})`:`hsl(${e}, ${i}%, ${a}%)`}const map$2={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},names$1={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};function unpack(){var t={},e=Object.keys(names$1),i=Object.keys(map$2);let a,r,s,n,o;for(a=0;a<e.length;a++){for(n=o=e[a],r=0;r<i.length;r++)s=i[r],o=o.replace(s,map$2[s]);s=parseInt(names$1[n],16),t[o]=[s>>16&255,s>>8&255,255&s]}return t}let names;function nameParse(t){names||((names=unpack()).transparent=[0,0,0,0]);t=names[t.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}const RGB_RE=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;function rgbParse(t){var e,i,a,t=RGB_RE.exec(t);let r=255;if(t)return void 0!==t[7]&&(a=+t[7],r=t[8]?p2b(a):lim(255*a,0,255)),a=+t[1],e=+t[3],i=+t[5],{r:255&(t[2]?p2b(a):lim(a,0,255)),g:255&(t[4]?p2b(e):lim(e,0,255)),b:255&(t[6]?p2b(i):lim(i,0,255)),a:r}}function rgbString(t){return t&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${b2n(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`)}const to=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,from=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function interpolate$1(t,e,i){var a=from(b2n(t.r)),r=from(b2n(t.g)),s=from(b2n(t.b));return{r:n2b(to(a+i*(from(b2n(e.r))-a))),g:n2b(to(r+i*(from(b2n(e.g))-r))),b:n2b(to(s+i*(from(b2n(e.b))-s))),a:t.a+i*(e.a-t.a)}}function modHSL(e,i,a){if(e){let t=rgb2hsl(e);t[i]=Math.max(0,Math.min(t[i]+t[i]*a,0===i?360:1)),t=hsl2rgb(t),e.r=t[0],e.g=t[1],e.b=t[2]}}function clone$1(t,e){return t&&Object.assign(e||{},t)}function fromObject(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?3<=t.length&&(e={r:t[0],g:t[1],b:t[2],a:255},3<t.length)&&(e.a=n2b(t[3])):(e=clone$1(t,{r:0,g:0,b:0,a:1})).a=n2b(e.a),e}function functionParse(t){return("r"===t.charAt(0)?rgbParse:hueParse)(t)}class Color{constructor(t){if(t instanceof Color)return t;var e=typeof t;let i;"object"==e?i=fromObject(t):"string"==e&&(i=hexParse(t)||nameParse(t)||functionParse(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=clone$1(this._rgb);return t&&(t.a=b2n(t.a)),t}set rgb(t){this._rgb=fromObject(t)}rgbString(){return this._valid?rgbString(this._rgb):void 0}hexString(){return this._valid?hexString(this._rgb):void 0}hslString(){return this._valid?hslString(this._rgb):void 0}mix(t,e){var i,a,r;return t&&(i=this.rgb,t=t.rgb,r=i.a-t.a,i.r=255&(a=(1+((a=2*(e=void 0===e?.5:e)-1)*r==-1?a:(a+r)/(1+a*r)))/2)*i.r+(r=1-a)*t.r+.5,i.g=255&a*i.g+r*t.g+.5,i.b=255&a*i.b+r*t.b+.5,i.a=e*i.a+(1-e)*t.a,this.rgb=i),this}interpolate(t,e){return t&&(this._rgb=interpolate$1(this._rgb,t._rgb,e)),this}clone(){return new Color(this.rgb)}alpha(t){return this._rgb.a=n2b(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){var t=this._rgb,e=round(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){var t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return modHSL(this._rgb,2,t),this}darken(t){return modHSL(this._rgb,2,-t),this}saturate(t){return modHSL(this._rgb,1,t),this}desaturate(t){return modHSL(this._rgb,1,-t),this}rotate(t){return rotate(this._rgb,t),this}}function noop(){}const uid=(()=>{let t=0;return()=>t++})();function isNullOrUndef(t){return null==t}function isArray(t){return!(!Array.isArray||!Array.isArray(t))||"[object"===(t=Object.prototype.toString.call(t)).slice(0,7)&&"Array]"===t.slice(-6)}function isObject(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function isNumberFinite(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function finiteOrDefault(t,e){return isNumberFinite(t)?t:e}function valueOrDefault(t,e){return void 0===t?e:t}const toPercentage=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:+t/e,toDimension=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function callback(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function each(t,e,i,a){let r,s,n;if(isArray(t))if(s=t.length,a)for(r=s-1;0<=r;r--)e.call(i,t[r],r);else for(r=0;r<s;r++)e.call(i,t[r],r);else if(isObject(t))for(n=Object.keys(t),s=n.length,r=0;r<s;r++)e.call(i,t[n[r]],n[r])}function _elementsEqual(t,e){let i,a,r,s;if(!t||!e||t.length!==e.length)return!1;for(i=0,a=t.length;i<a;++i)if(r=t[i],s=e[i],r.datasetIndex!==s.datasetIndex||r.index!==s.index)return!1;return!0}function clone(e){if(isArray(e))return e.map(clone);if(isObject(e)){var i=Object.create(null),a=Object.keys(e),r=a.length;let t=0;for(;t<r;++t)i[a[t]]=clone(e[a[t]]);return i}return e}function isValidKey(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function _merger(t,e,i,a){var r;isValidKey(t)&&(r=e[t],i=i[t],isObject(r)&&isObject(i)?merge(r,i,a):e[t]=clone(i))}function merge(i,t,a){var e=isArray(t)?t:[t],r=e.length;if(isObject(i)){var s,n=(a=a||{}).merger||_merger;for(let t=0;t<r;++t)if(isObject(s=e[t])){var o=Object.keys(s);for(let t=0,e=o.length;t<e;++t)n(o[t],i,s,a)}}return i}function mergeIf(t,e){return merge(t,e,{merger:_mergerIf})}function _mergerIf(t,e,i){var a;isValidKey(t)&&(a=e[t],i=i[t],isObject(a)&&isObject(i)?mergeIf(a,i):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=clone(i)))}const keyResolvers={"":t=>t,x:t=>t.x,y:t=>t.y};function _splitKey(t){var e=[];let i="";for(const a of t.split("."))i=(i+=a).endsWith("\\")?i.slice(0,-1)+".":(e.push(i),"");return e}function _getKeyResolver(t){const i=_splitKey(t);return t=>{for(const e of i){if(""===e)break;t=t&&t[e]}return t}}function resolveObjectKey(t,e){return(keyResolvers[e]||(keyResolvers[e]=_getKeyResolver(e)))(t)}function _capitalize(t){return t.charAt(0).toUpperCase()+t.slice(1)}const defined=t=>void 0!==t,isFunction=t=>"function"==typeof t,setsEqual=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};function _isClickEvent(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}const PI=Math.PI,TAU=2*PI,PITAU=TAU+PI,INFINITY=Number.POSITIVE_INFINITY,RAD_PER_DEG=PI/180,HALF_PI=PI/2,QUARTER_PI=PI/4,TWO_THIRDS_PI=2*PI/3,log10=Math.log10,sign=Math.sign;function almostEquals(t,e,i){return Math.abs(t-e)<i}function niceNum(t){var e=Math.round(t),e=(t=almostEquals(t,e,t/1e3)?e:t,Math.pow(10,Math.floor(log10(t)))),t=t/e;return(t<=1?1:t<=2?2:t<=5?5:10)*e}function _factorize(t){var e=[],i=Math.sqrt(t);let a;for(a=1;a<i;a++)t%a==0&&(e.push(a),e.push(t/a));return i===(0|i)&&e.push(i),e.sort((t,e)=>t-e).pop(),e}function isNumber(t){return!isNaN(parseFloat(t))&&isFinite(t)}function almostWhole(t,e){var i=Math.round(t);return i-e<=t&&t<=i+e}function _setMinAndMaxByKey(t,e,i){let a,r,s;for(a=0,r=t.length;a<r;a++)s=t[a][i],isNaN(s)||(e.min=Math.min(e.min,s),e.max=Math.max(e.max,s))}function toRadians(t){return t*(PI/180)}function toDegrees(t){return t*(180/PI)}function _decimalPlaces(i){if(isNumberFinite(i)){let t=1,e=0;for(;Math.round(i*t)/t!==i;)t*=10,e++;return e}}function getAngleFromPoint(t,e){var i=e.x-t.x,e=e.y-t.y,t=Math.sqrt(i*i+e*e);let a=Math.atan2(e,i);return a<-.5*PI&&(a+=TAU),{angle:a,distance:t}}function distanceBetweenPoints(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function _angleDiff(t,e){return(t-e+PITAU)%TAU-PI}function _normalizeAngle(t){return(t%TAU+TAU)%TAU}function _angleBetween(t,e,i,a){var t=_normalizeAngle(t),e=_normalizeAngle(e),i=_normalizeAngle(i),r=_normalizeAngle(e-t),s=_normalizeAngle(i-t),n=_normalizeAngle(t-e),o=_normalizeAngle(t-i);return t===e||t===i||a&&e===i||s<r&&n<o}function _limitValue(t,e,i){return Math.max(e,Math.min(i,t))}function _int16Range(t){return _limitValue(t,-32768,32767)}function _isBetween(t,e,i,a=1e-6){return t>=Math.min(e,i)-a&&t<=Math.max(e,i)+a}function _lookup(e,i,t){t=t||(t=>e[t]<i);let a=e.length-1,r=0;for(var s;1<a-r;)t(s=r+a>>1)?r=s:a=s;return{lo:r,hi:a}}const _lookupByKey=(i,a,r,t)=>_lookup(i,r,t?t=>{var e=i[t][a];return e<r||e===r&&i[t+1][a]===r}:t=>i[t][a]<r),_rlookupByKey=(e,i,a)=>_lookup(e,a,t=>e[t][i]>=a);function _filterBetween(t,e,i){let a=0,r=t.length;for(;a<r&&t[a]<e;)a++;for(;r>a&&t[r-1]>i;)r--;return 0<a||r<t.length?t.slice(a,r):t}const arrayEvents=["push","pop","shift","splice","unshift"];function listenArrayEvents(r,t){r._chartjs?r._chartjs.listeners.push(t):(Object.defineProperty(r,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),arrayEvents.forEach(t=>{const i="_onData"+_capitalize(t),a=r[t];Object.defineProperty(r,t,{configurable:!0,enumerable:!1,value(...e){var t=a.apply(this,e);return r._chartjs.listeners.forEach(t=>{"function"==typeof t[i]&&t[i](...e)}),t}})}))}function unlistenArrayEvents(e,t){var i=e._chartjs;i&&(-1!==(t=(i=i.listeners).indexOf(t))&&i.splice(t,1),0<i.length||(arrayEvents.forEach(t=>{delete e[t]}),delete e._chartjs))}function _arrayUnique(t){var e=new Set(t);return e.size===t.length?t:Array.from(e)}const requestAnimFrame="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function throttled(e,i){let a,r=!1;return function(...t){a=t,r||(r=!0,requestAnimFrame.call(window,()=>{r=!1,e.apply(i,a)}))}}function debounce(e,i){let a;return function(...t){return i?(clearTimeout(a),a=setTimeout(e,i,t)):e.apply(this,t),i}}const _toLeftRightCenter=t=>"start"===t?"left":"end"===t?"right":"center",_alignStartEnd=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2,_textX=(t,e,i,a)=>{return t===(a?"left":"right")?i:"center"===t?(e+i)/2:e};function _getStartAndCountOfVisiblePoints(t,e,i){var a,r,s,n,o,l,h=e.length;let c=0,d=h;return t._sorted&&({iScale:t,_parsed:a}=t,r=t.axis,{min:s,max:n,minDefined:o,maxDefined:l}=t.getUserBounds(),o&&(c=_limitValue(Math.min(_lookupByKey(a,r,s).lo,i?h:_lookupByKey(e,r,t.getPixelForValue(s)).lo),0,h-1)),d=l?_limitValue(Math.max(_lookupByKey(a,t.axis,n,!0).hi+1,i?0:_lookupByKey(e,r,t.getPixelForValue(n),!0).hi+1),c,h)-c:h-c),{start:c,count:d}}function _scaleRangesChanged(t){var{xScale:e,yScale:i,_scaleRanges:a}=t,r={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};return a?(e=a.xmin!==e.min||a.xmax!==e.max||a.ymin!==i.min||a.ymax!==i.max,Object.assign(a,r),e):(t._scaleRanges=r,!0)}const atEdge=t=>0===t||1===t,elasticIn=(t,e,i)=>-(Math.pow(2,10*--t)*Math.sin((t-e)*TAU/i)),elasticOut=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*TAU/i)+1,effects={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>--t*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-(--t*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>--t*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*HALF_PI),easeOutSine:t=>Math.sin(t*HALF_PI),easeInOutSine:t=>-.5*(Math.cos(PI*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>atEdge(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>1<=t?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1- --t*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>atEdge(t)?t:elasticIn(t,.075,.3),easeOutElastic:t=>atEdge(t)?t:elasticOut(t,.075,.3),easeInOutElastic(t){return atEdge(t)?t:t<.5?.5*elasticIn(2*t,.1125,.45):.5+.5*elasticOut(2*t-1,.1125,.45)},easeInBack(t){return t*t*(2.70158*t-1.70158)},easeOutBack(t){return--t*t*(2.70158*t+1.70158)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-effects.easeOutBounce(1-t),easeOutBounce(t){var e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*effects.easeInBounce(2*t):.5*effects.easeOutBounce(2*t-1)+.5};function isPatternOrGradient(t){return!(!t||"object"!=typeof t||"[object CanvasPattern]"!==(t=t.toString())&&"[object CanvasGradient]"!==t)}function color(t){return isPatternOrGradient(t)?t:new Color(t)}function getHoverColor(t){return isPatternOrGradient(t)?t:new Color(t).saturate(.5).darken(.1).hexString()}const numbers=["x","y","borderWidth","radius","tension"],colors=["color","borderColor","backgroundColor"];function applyAnimationsDefaults(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:colors},numbers:{type:"number",properties:numbers}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})}function applyLayoutsDefaults(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})}const intlCache=new Map;function getNumberFormat(t,e){e=e||{};var i=t+JSON.stringify(e);let a=intlCache.get(i);return a||(a=new Intl.NumberFormat(t,e),intlCache.set(i,a)),a}function formatNumber(t,e,i){return getNumberFormat(e,i).format(t)}const formatters={values(t){return isArray(t)?t:""+t},numeric(t,e,i){if(0===t)return"0";var a=this.chart.options.locale;let r,s=t;1<i.length&&(((n=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value)))<1e-4||1e15<n)&&(r="scientific"),s=calculateDelta(t,i));var n=log10(Math.abs(s)),i=isNaN(n)?1:Math.max(Math.min(-1*Math.floor(n),20),0),n={notation:r,minimumFractionDigits:i,maximumFractionDigits:i};return Object.assign(n,this.options.ticks.format),formatNumber(t,a,n)},logarithmic(t,e,i){var a;return 0===t?"0":(a=i[e].significand||t/Math.pow(10,Math.floor(log10(t))),[1,2,3,5,10,15].includes(a)||e>.8*i.length?formatters.numeric.call(this,t,e,i):"")}};function calculateDelta(t,e){let i=3<e.length?e[2].value-e[1].value:e[1].value-e[0].value;return i=1<=Math.abs(i)&&t!==Math.floor(t)?t-Math.floor(t):i}var Ticks={formatters:formatters};function applyScaleDefaults(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Ticks.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}const overrides=Object.create(null),descriptors=Object.create(null);function getScope$1(i,t){if(t){var a=t.split(".");for(let t=0,e=a.length;t<e;++t){var r=a[t];i=i[r]||(i[r]=Object.create(null))}}return i}function set(t,e,i){return"string"==typeof e?merge(getScope$1(t,e),i):merge(getScope$1(t,""),e)}class Defaults{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>getHoverColor(e.backgroundColor),this.hoverBorderColor=(t,e)=>getHoverColor(e.borderColor),this.hoverColor=(t,e)=>getHoverColor(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return set(this,t,e)}get(t){return getScope$1(this,t)}describe(t,e){return set(descriptors,t,e)}override(t,e){return set(overrides,t,e)}route(t,e,i,a){t=getScope$1(this,t);const r=getScope$1(this,i),s="_"+e;Object.defineProperties(t,{[s]:{value:t[e],writable:!0},[e]:{enumerable:!0,get(){var t=this[s],e=r[a];return isObject(t)?Object.assign({},e,t):valueOrDefault(t,e)},set(t){this[s]=t}}})}apply(t){t.forEach(t=>t(this))}}var defaults=new Defaults({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[applyAnimationsDefaults,applyLayoutsDefaults,applyScaleDefaults]);function toFontString(t){return!t||isNullOrUndef(t.size)||isNullOrUndef(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function _measureText(t,e,i,a,r){let s=e[r];return s||(s=e[r]=t.measureText(r).width,i.push(r)),a=s>a?s:a}function _longestText(t,e,i,a){let r=(a=a||{}).data=a.data||{},s=a.garbageCollect=a.garbageCollect||[],n=(a.font!==e&&(r=a.data={},s=a.garbageCollect=[],a.font=e),t.save(),t.font=e,0);var o=i.length;let l,h,c,d,u;for(l=0;l<o;l++)if(null==(d=i[l])||isArray(d)){if(isArray(d))for(h=0,c=d.length;h<c;h++)null==(u=d[h])||isArray(u)||(n=_measureText(t,r,s,n,u))}else n=_measureText(t,r,s,n,d);t.restore();var p=s.length/2;if(p>i.length){for(l=0;l<p;l++)delete r[s[l]];s.splice(0,p)}return n}function _alignPixel(t,e,i){t=t.currentDevicePixelRatio,i=0!==i?Math.max(i/2,.5):0;return Math.round((e-i)*t)/t+i}function clearCanvas(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function drawPoint(t,e,i,a){drawPointLegend(t,e,i,a,null)}function drawPointLegend(t,e,i,a,r){let s,n,o,l,h,c,d,u;var p=e.pointStyle,g=e.rotation,f=e.radius;let m=(g||0)*RAD_PER_DEG;if(!p||"object"!=typeof p||"[object HTMLImageElement]"!==(s=p.toString())&&"[object HTMLCanvasElement]"!==s){if(!(isNaN(f)||f<=0)){switch(t.beginPath(),p){default:r?t.ellipse(i,a,r/2,f,0,0,TAU):t.arc(i,a,f,0,TAU),t.closePath();break;case"triangle":c=r?r/2:f,t.moveTo(i+Math.sin(m)*c,a-Math.cos(m)*f),m+=TWO_THIRDS_PI,t.lineTo(i+Math.sin(m)*c,a-Math.cos(m)*f),m+=TWO_THIRDS_PI,t.lineTo(i+Math.sin(m)*c,a-Math.cos(m)*f),t.closePath();break;case"rectRounded":h=.516*f,l=f-h,n=Math.cos(m+QUARTER_PI)*l,d=Math.cos(m+QUARTER_PI)*(r?r/2-h:l),o=Math.sin(m+QUARTER_PI)*l,u=Math.sin(m+QUARTER_PI)*(r?r/2-h:l),t.arc(i-d,a-o,h,m-PI,m-HALF_PI),t.arc(i+u,a-n,h,m-HALF_PI,m),t.arc(i+d,a+o,h,m,m+HALF_PI),t.arc(i-u,a+n,h,m+HALF_PI,m+PI),t.closePath();break;case"rect":if(!g){l=Math.SQRT1_2*f,c=r?r/2:l,t.rect(i-c,a-l,2*c,2*l);break}m+=QUARTER_PI;case"rectRot":d=Math.cos(m)*(r?r/2:f),n=Math.cos(m)*f,o=Math.sin(m)*f,u=Math.sin(m)*(r?r/2:f),t.moveTo(i-d,a-o),t.lineTo(i+u,a-n),t.lineTo(i+d,a+o),t.lineTo(i-u,a+n),t.closePath();break;case"crossRot":m+=QUARTER_PI;case"cross":d=Math.cos(m)*(r?r/2:f),n=Math.cos(m)*f,o=Math.sin(m)*f,u=Math.sin(m)*(r?r/2:f),t.moveTo(i-d,a-o),t.lineTo(i+d,a+o),t.moveTo(i+u,a-n),t.lineTo(i-u,a+n);break;case"star":d=Math.cos(m)*(r?r/2:f),n=Math.cos(m)*f,o=Math.sin(m)*f,u=Math.sin(m)*(r?r/2:f),t.moveTo(i-d,a-o),t.lineTo(i+d,a+o),t.moveTo(i+u,a-n),t.lineTo(i-u,a+n),m+=QUARTER_PI,d=Math.cos(m)*(r?r/2:f),n=Math.cos(m)*f,o=Math.sin(m)*f,u=Math.sin(m)*(r?r/2:f),t.moveTo(i-d,a-o),t.lineTo(i+d,a+o),t.moveTo(i+u,a-n),t.lineTo(i-u,a+n);break;case"line":n=r?r/2:Math.cos(m)*f,o=Math.sin(m)*f,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o);break;case"dash":t.moveTo(i,a),t.lineTo(i+Math.cos(m)*(r?r/2:f),a+Math.sin(m)*f);break;case!1:t.closePath()}t.fill(),0<e.borderWidth&&t.stroke()}}else t.save(),t.translate(i,a),t.rotate(m),t.drawImage(p,-p.width/2,-p.height/2,p.width,p.height),t.restore()}function _isPointInArea(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function clipArea(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function unclipArea(t){t.restore()}function _steppedLineTo(t,e,i,a,r){if(!e)return t.lineTo(i.x,i.y);var s;"middle"===r?(s=(e.x+i.x)/2,t.lineTo(s,e.y),t.lineTo(s,i.y)):"after"===r!=!!a?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y),t.lineTo(i.x,i.y)}function _bezierCurveTo(t,e,i,a){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(a?e.cp1x:e.cp2x,a?e.cp1y:e.cp2y,a?i.cp2x:i.cp1x,a?i.cp2y:i.cp1y,i.x,i.y)}function setRenderOpts(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),isNullOrUndef(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}function decorateText(t,e,i,a,r){var s,n;(r.strikethrough||r.underline)&&(s=e-(a=t.measureText(a)).actualBoundingBoxLeft,e=e+a.actualBoundingBoxRight,n=i-a.actualBoundingBoxAscent,i=i+a.actualBoundingBoxDescent,a=r.strikethrough?(n+i)/2:i,t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(s,a),t.lineTo(e,a),t.stroke())}function drawBackdrop(t,e){var i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function renderText(t,e,i,a,r,s={}){var n=isArray(e)?e:[e],o=0<s.strokeWidth&&""!==s.strokeColor;let l,h;for(t.save(),t.font=r.string,setRenderOpts(t,s),l=0;l<n.length;++l)h=n[l],s.backdrop&&drawBackdrop(t,s.backdrop),o&&(s.strokeColor&&(t.strokeStyle=s.strokeColor),isNullOrUndef(s.strokeWidth)||(t.lineWidth=s.strokeWidth),t.strokeText(h,i,a,s.maxWidth)),t.fillText(h,i,a,s.maxWidth),decorateText(t,i,a,h,s),a+=Number(r.lineHeight);t.restore()}function addRoundedRectPath(t,e){var{x:e,y:i,w:a,h:r,radius:s}=e;t.arc(e+s.topLeft,i+s.topLeft,s.topLeft,1.5*PI,PI,!0),t.lineTo(e,i+r-s.bottomLeft),t.arc(e+s.bottomLeft,i+r-s.bottomLeft,s.bottomLeft,PI,HALF_PI,!0),t.lineTo(e+a-s.bottomRight,i+r),t.arc(e+a-s.bottomRight,i+r-s.bottomRight,s.bottomRight,HALF_PI,0,!0),t.lineTo(e+a,i+s.topRight),t.arc(e+a-s.topRight,i+s.topRight,s.topRight,0,-HALF_PI,!0),t.lineTo(e+s.topLeft,i)}const LINE_HEIGHT=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,FONT_STYLE=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function toLineHeight(t,e){var i=(""+t).match(LINE_HEIGHT);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const numberOrZero=t=>+t||0;function _readValueToProps(e,i){var t={},a=isObject(i),r=a?Object.keys(i):i,s=isObject(e)?a?t=>valueOrDefault(e[t],e[i[t]]):t=>e[t]:()=>e;for(const n of r)t[n]=numberOrZero(s(n));return t}function toTRBL(t){return _readValueToProps(t,{top:"y",right:"x",bottom:"y",left:"x"})}function toTRBLCorners(t){return _readValueToProps(t,["topLeft","topRight","bottomLeft","bottomRight"])}function toPadding(t){t=toTRBL(t);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function toFont(t,e){e=e||defaults.font;let i=valueOrDefault((t=t||{}).size,e.size),a=("string"==typeof i&&(i=parseInt(i,10)),valueOrDefault(t.style,e.style));a&&!(""+a).match(FONT_STYLE)&&(console.warn('Invalid font style specified: "'+a+'"'),a=void 0);t={family:valueOrDefault(t.family,e.family),lineHeight:toLineHeight(valueOrDefault(t.lineHeight,e.lineHeight),i),size:i,style:a,weight:valueOrDefault(t.weight,e.weight),string:""};return t.string=toFontString(t),t}function resolve(t,e,i,a){let r=!0,s,n,o;for(s=0,n=t.length;s<n;++s)if(void 0!==(o=t[s])&&(void 0!==e&&"function"==typeof o&&(o=o(e),r=!1),void 0!==i&&isArray(o)&&(o=o[i%o.length],r=!1),void 0!==o))return a&&!r&&(a.cacheable=!1),o}function _addGrace(t,e,i){var{min:t,max:a}=t,e=toDimension(e,(a-t)/2),r=(t,e)=>i&&0===t?0:t+e;return{min:r(t,-Math.abs(e)),max:r(a,e)}}function createContext(t,e){return Object.assign(Object.create(t),e)}function _createResolver(i,a=[""],t,e,r=()=>i[0]){const s=t||i;void 0===e&&(e=_resolve("_fallback",i));t={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:i,_rootScopes:s,_fallback:e,_getTarget:r,override:t=>_createResolver([t,...i],a,s,e)};return new Proxy(t,{deleteProperty(t,e){return delete t[e],delete t._keys,delete i[0][e],!0},get(t,e){return _cached(t,e,()=>_resolveWithPrefixes(e,a,i,t))},getOwnPropertyDescriptor(t,e){return Reflect.getOwnPropertyDescriptor(t._scopes[0],e)},getPrototypeOf(){return Reflect.getPrototypeOf(i[0])},has(t,e){return getKeysFromAllScopes(t).includes(e)},ownKeys(t){return getKeysFromAllScopes(t)},set(t,e,i){var a=t._storage||(t._storage=r());return t[e]=a[e]=i,delete t._keys,!0}})}function _attachContext(a,e,i,r){var t={_cacheable:!1,_proxy:a,_context:e,_subProxy:i,_stack:new Set,_descriptors:_descriptors(a,r),setContext:t=>_attachContext(a,t,i,r),override:t=>_attachContext(a.override(t),e,i,r)};return new Proxy(t,{deleteProperty(t,e){return delete t[e],delete a[e],!0},get(t,e,i){return _cached(t,e,()=>_resolveWithContext(t,e,i))},getOwnPropertyDescriptor(t,e){return t._descriptors.allKeys?Reflect.has(a,e)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(a,e)},getPrototypeOf(){return Reflect.getPrototypeOf(a)},has(t,e){return Reflect.has(a,e)},ownKeys(){return Reflect.ownKeys(a)},set(t,e,i){return a[e]=i,delete t[e],!0}})}function _descriptors(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:a=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:i,indexable:a,isScriptable:isFunction(i)?i:()=>i,isIndexable:isFunction(a)?a:()=>a}}const readKey=(t,e)=>t?t+_capitalize(e):e,needsSubResolver=(t,e)=>isObject(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function _cached(t,e,i){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:(i=i(),t[e]=i)}function _resolveWithContext(t,e,i){var{_proxy:a,_context:r,_subProxy:s,_descriptors:n}=t;let o=a[e];return isArray(o=isFunction(o)&&n.isScriptable(e)?_resolveScriptable(e,o,t,i):o)&&o.length&&(o=_resolveArray(e,o,t,n.isIndexable)),o=needsSubResolver(e,o)?_attachContext(o,r,s&&s[e],n):o}function _resolveScriptable(t,e,i,a){var{_proxy:i,_context:r,_subProxy:s,_stack:n}=i;if(n.has(t))throw new Error("Recursion detected: "+Array.from(n).join("->")+"->"+t);n.add(t);let o=e(r,s||a);return n.delete(t),o=needsSubResolver(t,o)?createSubResolver(i._scopes,i,t,o):o}function _resolveArray(t,e,i,a){var{_proxy:r,_context:s,_subProxy:n,_descriptors:o}=i;if(void 0!==s.index&&a(t))return e[s.index%e.length];if(isObject(e[0])){const c=e;var l=r._scopes.filter(t=>t!==c);e=[];for(const d of c){var h=createSubResolver(l,r,t,d);e.push(_attachContext(h,s,n&&n[t],o))}}return e}function resolveFallback(t,e,i){return isFunction(t)?t(e,i):t}const getScope=(t,e)=>!0===t?e:"string"==typeof t?resolveObjectKey(e,t):void 0;function addScopes(t,e,i,a,r){for(const o of e){var s=getScope(i,o);if(s){t.add(s);var n=resolveFallback(s._fallback,i,r);if(void 0!==n&&n!==i&&n!==a)return n}else if(!1===s&&void 0!==a&&i!==a)return null}return!1}function createSubResolver(t,e,i,a){var r=e._rootScopes,s=resolveFallback(e._fallback,i,a),t=[...t,...r],n=new Set,o=(n.add(a),addScopesFromKey(n,t,i,s||i,a));return null!==o&&(void 0===s||s===i||null!==(o=addScopesFromKey(n,t,s,o,a)))&&_createResolver(Array.from(n),[""],r,s,()=>subGetTarget(e,i,a))}function addScopesFromKey(t,e,i,a,r){for(;i;)i=addScopes(t,e,i,a,r);return i}function subGetTarget(t,e,i){t=t._getTarget(),e in t||(t[e]={}),t=t[e];return isArray(t)&&isObject(i)?i:t||{}}function _resolveWithPrefixes(t,e,i,a){var r;for(const s of e)if(void 0!==(r=_resolve(readKey(s,t),i)))return needsSubResolver(t,r)?createSubResolver(i,a,t,r):r}function _resolve(t,e){for(const a of e)if(a){var i=a[t];if(void 0!==i)return i}}function getKeysFromAllScopes(t){let e=t._keys;return e=e||(t._keys=resolveKeysFromAllScopes(t._scopes))}function resolveKeysFromAllScopes(t){var e=new Set;for(const i of t)for(const a of Object.keys(i).filter(t=>!t.startsWith("_")))e.add(a);return Array.from(e)}function _parseObjectDataRadialScale(t,e,i,a){var r=t["iScale"],{key:s="r"}=this._parsing,n=new Array(a);let o,l,h,c;for(o=0,l=a;o<l;++o)c=e[h=o+i],n[o]={r:r.parse(resolveObjectKey(c,s),h)};return n}const EPSILON=Number.EPSILON||1e-14,getPoint=(t,e)=>e<t.length&&!t[e].skip&&t[e],getValueAxis=t=>"x"===t?"y":"x";function splineCurve(t,e,i,a){var t=t.skip?e:t,r=e,e=i.skip?e:i,i=distanceBetweenPoints(r,t),s=distanceBetweenPoints(e,r),n=i/(i+s),i=s/(i+s),s=a*(isNaN(n)?0:n),n=a*(isNaN(i)?0:i);return{previous:{x:r.x-s*(e.x-t.x),y:r.y-s*(e.y-t.y)},next:{x:r.x+n*(e.x-t.x),y:r.y+n*(e.y-t.y)}}}function monotoneAdjust(e,i,a){var r,s,n,o=e.length;let l=getPoint(e,0);for(let t=0;t<o-1;++t)n=l,l=getPoint(e,t+1),n&&l&&(almostEquals(i[t],0,EPSILON)?a[t]=a[t+1]=0:(n=a[t]/i[t],r=a[t+1]/i[t],(s=Math.pow(n,2)+Math.pow(r,2))<=9||(s=3/Math.sqrt(s),a[t]=n*s*i[t],a[t+1]=r*s*i[t])))}function monotoneCompute(e,i,a="x"){var r,s,n=getValueAxis(a),o=e.length;let l,h,c,d=getPoint(e,0);for(let t=0;t<o;++t)h=c,c=d,d=getPoint(e,t+1),c&&(r=c[a],s=c[n],h&&(l=(r-h[a])/3,c["cp1"+a]=r-l,c["cp1"+n]=s-l*i[t]),d)&&(l=(d[a]-r)/3,c["cp2"+a]=r+l,c["cp2"+n]=s+l*i[t])}function splineCurveMonotone(t,e="x"){var i,a=getValueAxis(e),r=t.length,s=Array(r).fill(0),n=Array(r);let o,l,h,c=getPoint(t,0);for(o=0;o<r;++o)l=h,h=c,c=getPoint(t,o+1),h&&(c&&(i=c[e]-h[e],s[o]=0!=i?(c[a]-h[a])/i:0),n[o]=l?c?sign(s[o-1])!==sign(s[o])?0:(s[o-1]+s[o])/2:s[o-1]:s[o]);monotoneAdjust(t,s,n),monotoneCompute(t,n,e)}function capControlPoint(t,e,i){return Math.max(Math.min(t,i),e)}function capBezierPoints(t,e){let i,a,r,s,n,o=_isPointInArea(t[0],e);for(i=0,a=t.length;i<a;++i)n=s,s=o,o=i<a-1&&_isPointInArea(t[i+1],e),s&&(r=t[i],n&&(r.cp1x=capControlPoint(r.cp1x,e.left,e.right),r.cp1y=capControlPoint(r.cp1y,e.top,e.bottom)),o)&&(r.cp2x=capControlPoint(r.cp2x,e.left,e.right),r.cp2y=capControlPoint(r.cp2y,e.top,e.bottom))}function _updateBezierControlPoints(e,i,t,a,r){let s,n,o,l;if(i.spanGaps&&(e=e.filter(t=>!t.skip)),"monotone"===i.cubicInterpolationMode)splineCurveMonotone(e,r);else{let t=a?e[e.length-1]:e[0];for(s=0,n=e.length;s<n;++s)o=e[s],l=splineCurve(t,o,e[Math.min(s+1,n-(a?0:1))%n],i.tension),o.cp1x=l.previous.x,o.cp1y=l.previous.y,o.cp2x=l.next.x,o.cp2y=l.next.y,t=o}i.capBezierPoints&&capBezierPoints(e,t)}function _isDomSupported(){return"undefined"!=typeof window&&"undefined"!=typeof document}function _getParentNode(t){let e=t.parentNode;return e=e&&"[object ShadowRoot]"===e.toString()?e.host:e}function parseMaxStyle(t,e,i){let a;return"string"==typeof t?(a=parseInt(t,10),-1!==t.indexOf("%")&&(a=a/100*e.parentNode[i])):a=t,a}const getComputedStyle=t=>t.ownerDocument.defaultView.getComputedStyle(t,null);function getStyle(t,e){return getComputedStyle(t).getPropertyValue(e)}const positions=["top","right","bottom","left"];function getPositionedStyle(e,i,a){var r={};a=a?"-"+a:"";for(let t=0;t<4;t++){var s=positions[t];r[s]=parseFloat(e[i+"-"+s+a])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}const useOffsetPos=(t,e,i)=>(0<t||0<e)&&(!i||!i.shadowRoot);function getCanvasPosition(t,e){var i=t.touches,i=i&&i.length?i[0]:t,{offsetX:a,offsetY:r}=i;let s=!1,n,o;return useOffsetPos(a,r,t.target)?(n=a,o=r):(t=e.getBoundingClientRect(),n=i.clientX-t.left,o=i.clientY-t.top,s=!0),{x:n,y:o,box:s}}function getRelativePosition(t,e){if("native"in t)return t;var{canvas:i,currentDevicePixelRatio:a}=e,r=getComputedStyle(i),s="border-box"===r.boxSizing,n=getPositionedStyle(r,"padding"),r=getPositionedStyle(r,"border","width"),{x:t,y:o,box:l}=getCanvasPosition(t,i),h=n.left+(l&&r.left),l=n.top+(l&&r.top);let{width:c,height:d}=e;return s&&(c-=n.width+r.width,d-=n.height+r.height),{x:Math.round((t-h)/c*i.width/a),y:Math.round((o-l)/d*i.height/a)}}function getContainerSize(t,e,i){let a,r;var s,n,o,l,h;return void 0!==e&&void 0!==i||((s=_getParentNode(t))?(n=s.getBoundingClientRect(),l=getPositionedStyle(o=getComputedStyle(s),"border","width"),h=getPositionedStyle(o,"padding"),e=n.width-h.width-l.width,i=n.height-h.height-l.height,a=parseMaxStyle(o.maxWidth,s,"clientWidth"),r=parseMaxStyle(o.maxHeight,s,"clientHeight")):(e=t.clientWidth,i=t.clientHeight)),{width:e,height:i,maxWidth:a||INFINITY,maxHeight:r||INFINITY}}const round1=t=>Math.round(10*t)/10;function getMaximumSize(t,e,i,a){var r,s=getComputedStyle(t),n=getPositionedStyle(s,"margin"),o=parseMaxStyle(s.maxWidth,t,"clientWidth")||INFINITY,l=parseMaxStyle(s.maxHeight,t,"clientHeight")||INFINITY,t=getContainerSize(t,e,i);let{width:h,height:c}=t;return"content-box"===s.boxSizing&&(r=getPositionedStyle(s,"border","width"),s=getPositionedStyle(s,"padding"),h-=s.width+r.width,c-=s.height+r.height),h=Math.max(0,h-n.width),c=Math.max(0,a?h/a:c-n.height),h=round1(Math.min(h,o,t.maxWidth)),c=round1(Math.min(c,l,t.maxHeight)),h&&!c&&(c=round1(h/2)),(void 0!==e||void 0!==i)&&a&&t.height&&c>t.height&&(c=t.height,h=round1(Math.floor(c*a))),{width:h,height:c}}function retinaScale(t,e,i){var e=e||1,a=Math.floor(t.height*e),r=Math.floor(t.width*e),s=(t.height=Math.floor(t.height),t.width=Math.floor(t.width),t.canvas);return s.style&&(i||!s.style.height&&!s.style.width)&&(s.style.height=t.height+"px",s.style.width=t.width+"px"),(t.currentDevicePixelRatio!==e||s.height!==a||s.width!==r)&&(t.currentDevicePixelRatio=e,s.height=a,s.width=r,t.ctx.setTransform(e,0,0,e,0,0),!0)}const supportsEventListenerOptions=function(){let t=!1;try{var e={get passive(){return!(t=!0)}};_isDomSupported()&&(window.addEventListener("test",null,e),window.removeEventListener("test",null,e))}catch(t){}return t}();function readUsedSize(t,e){t=getStyle(t,e),e=t&&t.match(/^(\d+)(\.\d+)?px$/);return e?+e[1]:void 0}function _pointInLine(t,e,i,a){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function _steppedInterpolation(t,e,i,a){return{x:t.x+i*(e.x-t.x),y:("middle"===a?i<.5?t:e:"after"===a?i<1?t:e:0<i?e:t).y}}function _bezierInterpolation(t,e,i,a){var r={x:t.cp2x,y:t.cp2y},s={x:e.cp1x,y:e.cp1y},t=_pointInLine(t,r,i),r=_pointInLine(r,s,i),s=_pointInLine(s,e,i),e=_pointInLine(t,r,i),t=_pointInLine(r,s,i);return _pointInLine(e,t,i)}const getRightToLeftAdapter=function(e,i){return{x(t){return e+e+i-t},setWidth(t){i=t},textAlign(t){return"center"===t?t:"right"===t?"left":"right"},xPlus(t,e){return t-e},leftForLtr(t,e){return t-e}}},getLeftToRightAdapter=function(){return{x(t){return t},setWidth(t){},textAlign(t){return t},xPlus(t,e){return t+e},leftForLtr(t,e){return t}}};function getRtlAdapter(t,e,i){return t?getRightToLeftAdapter(e,i):getLeftToRightAdapter()}function overrideTextDirection(t,e){var i,a;"ltr"!==e&&"rtl"!==e||(a=[(i=t.canvas.style).getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=a)}function restoreTextDirection(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function propertyFn(t){return"angle"===t?{between:_angleBetween,compare:_angleDiff,normalize:_normalizeAngle}:{between:_isBetween,compare:(t,e)=>t-e,normalize:t=>t}}function normalizeSegment({start:t,end:e,count:i,loop:a,style:r}){return{start:t%i,end:e%i,loop:a&&(e-t+1)%i==0,style:r}}function getSegment(t,e,i){var{property:a,start:r,end:s}=i,{between:n,normalize:o}=propertyFn(a),l=e.length;let{start:h,end:c,loop:d}=t,u,p;if(d){for(h+=l,c+=l,u=0,p=l;u<p&&n(o(e[h%l][a]),r,s);++u)h--,c--;h%=l,c%=l}return c<h&&(c+=l),{start:h,end:c,loop:d,style:t.style}}function _boundSegment(i,a,t){if(!t)return[i];const{property:r,start:s,end:n}=t;var o=a.length;const{compare:l,between:h,normalize:c}=propertyFn(r);var{start:i,end:d,loop:u,style:p}=getSegment(i,a,t),g=[];let f,m=null,v,b,_;var x=()=>f||h(s,_,v)&&0!==l(s,_),y=()=>!f||0===l(n,v)||h(n,_,v);for(let t=i,e=i;t<=d;++t)(b=a[t%o]).skip||(v=c(b[r]))!==_&&(f=h(v,s,n),null!==(m=null===m&&x()?0===l(v,s)?t:e:m)&&y()&&(g.push(normalizeSegment({start:m,end:t,loop:u,count:o,style:p})),m=null),e=t,_=v);return null!==m&&g.push(normalizeSegment({start:m,end:d,loop:u,count:o,style:p})),g}function _boundSegments(e,i){var a=[],r=e.segments;for(let t=0;t<r.length;t++){var s=_boundSegment(r[t],e.points,i);s.length&&a.push(...s)}return a}function findStartAndEnd(t,e,i,a){let r=0,s=e-1;if(i&&!a)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,i&&(s+=r);s>r&&t[s%e].skip;)s--;return s%=e,{start:r,end:s}}function solidSegments(t,e,i,a){var r=t.length,s=[];let n=e,o=t[e],l;for(l=e+1;l<=i;++l){var h=t[l%r];h.skip||h.stop?o.skip||(a=!1,s.push({start:e%r,end:(l-1)%r,loop:a}),e=n=h.stop?l:null):(n=l,o.skip&&(e=l)),o=h}return null!==n&&s.push({start:e%r,end:n%r,loop:a}),s}function _computeSegments(t,e){var i,a,r,s=t.points,n=t.options.spanGaps,o=s.length;return o?({start:a,end:r}=findStartAndEnd(s,o,i=!!t._loop,n),splitByStyles(t,!0===n?[{start:a,end:r,loop:i}]:solidSegments(s,a,r<a?r+o:r,!!t._fullLoop&&0===a&&r===o-1),s,e)):[]}function splitByStyles(t,e,i,a){return a&&a.setContext&&i?doSplitByStyles(t,e,i,a):e}function doSplitByStyles(t,e,s,i){var a=t._chart.getContext(),r=readStyle(t.options);const{_datasetIndex:n,options:{spanGaps:o}}=t,l=s.length,h=[];let c=r,d=e[0].start,u=d;function p(t,e,i,a){var r=o?-1:1;if(t!==e){for(t+=l;s[t%l].skip;)t-=r;for(;s[e%l].skip;)e+=r;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:i,style:a}),c=a,d=e%l)}}for(const m of e){d=o?d:m.start;let t=s[d%l];for(u=d+1;u<=m.end;u++){var g,f=s[u%l];styleChanged(g=readStyle(i.setContext(createContext(a,{type:"segment",p0:t,p1:f,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:n}))),c)&&p(d,u-1,m.loop,c),t=f,c=g}d<u-1&&p(d,u-1,m.loop,c)}return h}function readStyle(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function styleChanged(t,e){if(!e)return!1;const i=[];function a(t,e){return isPatternOrGradient(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e}return JSON.stringify(t,a)!==JSON.stringify(e,a)}class Animator{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,i,a,t){t=i.listeners[t];const r=i.duration;t.forEach(t=>t({chart:e,initial:i.initial,numSteps:r,currentStep:Math.min(a-i.start,r)}))}_refresh(){this._request||(this._running=!0,this._request=requestAnimFrame.call(window,()=>{this._update(),this._request=null,this._running&&this._refresh()}))}_update(n=Date.now()){let o=0;this._charts.forEach((i,a)=>{if(i.running&&i.items.length){var r,s=i.items;let t=s.length-1,e=!1;for(;0<=t;--t)(r=s[t])._active?(r._total>i.duration&&(i.duration=r._total),r.tick(n),e=!0):(s[t]=s[s.length-1],s.pop());e&&(a.draw(),this._notify(a,i,n,"progress")),s.length||(i.running=!1,this._notify(a,i,n,"complete"),i.initial=!1),o+=s.length}}),this._lastDate=n,0===o&&(this._running=!1)}_getAnims(t){var e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return 0<this._getAnims(t).items.length}start(t){t=this._charts.get(t);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce((t,e)=>Math.max(t,e._duration),0),this._refresh())}running(t){return!!this._running&&!!((t=this._charts.get(t))&&t.running&&t.items.length)}stop(e){var i=this._charts.get(e);if(i&&i.items.length){var a=i.items;let t=a.length-1;for(;0<=t;--t)a[t].cancel();i.items=[],this._notify(e,i,Date.now(),"complete")}}remove(t){return this._charts.delete(t)}}var animator=new Animator;const transparent="transparent",interpolators={boolean(t,e,i){return.5<i?e:t},color(t,e,i){var t=color(t||transparent),a=t.valid&&color(e||transparent);return a&&a.valid?a.mix(t,i).hexString():e},number(t,e,i){return t+(e-t)*i}};class Animation{constructor(t,e,i,a){var r=e[i],r=(a=resolve([t.to,a,r,t.from]),resolve([t.from,r,a]));this._active=!0,this._fn=t.fn||interpolators[t.type||typeof r],this._easing=effects[t.easing]||effects.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=r,this._to=a,this._promises=void 0}active(){return this._active}update(t,e,i){var a,r,s;this._active&&(this._notify(!1),a=this._target[this._prop],r=i-this._start,s=this._duration-r,this._start=i,this._duration=Math.floor(Math.max(s,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=resolve([t.to,e,a,t.from]),this._from=resolve([t.from,a,e]))}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){var t=t-this._start,e=this._duration,i=this._prop,a=this._from,r=this._loop,s=this._to;this._active=a!==s&&(r||t<e),this._active?t<0?this._target[i]=a:(t=t/e%2,t=this._easing(Math.min(1,Math.max(0,r&&1<t?2-t:t))),this._target[i]=this._fn(a,s,t)):(this._target[i]=s,this._notify(!0))}wait(){const i=this._promises||(this._promises=[]);return new Promise((t,e)=>{i.push({res:t,rej:e})})}_notify(t){var e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Animations{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(r){if(isObject(r)){const s=Object.keys(defaults.animation),n=this._properties;Object.getOwnPropertyNames(r).forEach(e=>{var t=r[e];if(isObject(t)){const i={};for(const a of s)i[a]=t[a];(isArray(t.properties)&&t.properties||[e]).forEach(t=>{t!==e&&n.has(t)||n.set(t,i)})}})}}_animateOptions(t,e){const i=e.options;var e=resolveTargetOptions(t,i);return e?(e=this._createAnimations(e,i),i.$shared&&awaitAll(t.options.$animations,i).then(()=>{t.options=i},()=>{}),e):[]}_createAnimations(e,i){var a=this._properties,r=[],s=e.$animations||(e.$animations={}),t=Object.keys(i),n=Date.now();let o;for(o=t.length-1;0<=o;--o){var l=t[o];if("$"!==l.charAt(0))if("options"===l)r.push(...this._animateOptions(e,i));else{var h=i[l];let t=s[l];var c=a.get(l);if(t){if(c&&t.active()){t.update(c,h,n);continue}t.cancel()}c&&c.duration?(s[l]=t=new Animation(c,e,l,h),r.push(t)):e[l]=h}}return r}update(t,e){var i;if(0!==this._properties.size)return(i=this._createAnimations(t,e)).length?(animator.add(this._chart,i),!0):void 0;Object.assign(t,e)}}function awaitAll(e,t){var i=[],a=Object.keys(t);for(let t=0;t<a.length;t++){var r=e[a[t]];r&&r.active()&&i.push(r.wait())}return Promise.all(i)}function resolveTargetOptions(e,i){if(i){let t=e.options;if(t)return t.$shared&&(e.options=t=Object.assign({},t,{$shared:!1,$animations:{}})),t;e.options=i}}function scaleClip(t,e){var t=t&&t.options||{},i=t.reverse,a=void 0===t.min?e:0,t=void 0===t.max?e:0;return{start:i?t:a,end:i?a:t}}function defaultClip(t,e,i){return!1!==i&&(t=scaleClip(t,i),{top:(e=scaleClip(e,i)).end,right:t.end,bottom:e.start,left:t.start})}function toClip(t){let e,i,a,r;return isObject(t)?(e=t.top,i=t.right,a=t.bottom,r=t.left):e=i=a=r=t,{top:e,right:i,bottom:a,left:r,disabled:!1===t}}function getSortedDatasetIndices(t,e){var i=[],a=t._getSortedDatasetMetas(e);let r,s;for(r=0,s=a.length;r<s;++r)i.push(a[r].index);return i}function applyStack(t,e,i,a={}){var r=t.keys,s="single"===a.mode;let n,o,l,h;if(null!==e){for(n=0,o=r.length;n<o;++n){if((l=+r[n])===i){if(a.all)continue;break}isNumberFinite(h=t.values[l])&&(s||0===e||sign(e)===sign(h))&&(e+=h)}return e}}function convertObjectDataToArray(t){var e=Object.keys(t),i=new Array(e.length);let a,r,s;for(a=0,r=e.length;a<r;++a)s=e[a],i[a]={x:s,y:t[s]};return i}function isStacked(t,e){t=t&&t.options.stacked;return t||void 0===t&&void 0!==e.stack}function getStackKey(t,e,i){return`${t.id}.${e.id}.`+(i.stack||i.type)}function getUserBounds(t){var{min:t,max:e,minDefined:i,maxDefined:a}=t.getUserBounds();return{min:i?t:Number.NEGATIVE_INFINITY,max:a?e:Number.POSITIVE_INFINITY}}function getOrCreateStack(t,e,i){t=t[e]||(t[e]={});return t[i]||(t[i]={})}function getLastIndexInStack(t,e,i,a){for(const s of e.getMatchingVisibleMetas(a).reverse()){var r=t[s.index];if(i&&0<r||!i&&r<0)return s.index}return null}function updateStacks(t,e){var{chart:t,_cachedMeta:i}=t,a=t._stacks||(t._stacks={}),{iScale:t,vScale:r,index:s}=i,n=t.axis,o=r.axis,l=getStackKey(t,r,i),h=e.length;for(let t=0;t<h;++t){var c=e[t],{[n]:d,[o]:u}=c;(c=(c._stacks||(c._stacks={}))[o]=getOrCreateStack(a,l,d))[s]=u,c._top=getLastIndexInStack(c,r,!0,i.type),c._bottom=getLastIndexInStack(c,r,!1,i.type),(c._visualValues||(c._visualValues={}))[s]=u}}function getFirstScaleId(t,e){const i=t.scales;return Object.keys(i).filter(t=>i[t].axis===e).shift()}function createDatasetContext(t,e){return createContext(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}function createDataContext(t,e,i){return createContext(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}function clearStacks(t,e){var i=t.controller.index,a=t.vScale&&t.vScale.axis;if(a)for(const s of e=e||t._parsed){var r=s._stacks;if(!r||void 0===r[a]||void 0===r[a][i])return;delete r[a][i],void 0!==r[a]._visualValues&&void 0!==r[a]._visualValues[i]&&delete r[a]._visualValues[i]}}const isDirectUpdateMode=t=>"reset"===t||"none"===t,cloneIfNotShared=(t,e)=>e?t:Object.assign({},t),createStack=(t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:getSortedDatasetIndices(i,!0),values:null};class DatasetController{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){var t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=isStacked(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&clearStacks(this._cachedMeta),this.index=t}linkScales(){var t=this.chart,e=this._cachedMeta,i=this.getDataset(),a=(t,e,i,a)=>"x"===t?e:"r"===t?a:i,r=e.xAxisID=valueOrDefault(i.xAxisID,getFirstScaleId(t,"x")),s=e.yAxisID=valueOrDefault(i.yAxisID,getFirstScaleId(t,"y")),i=e.rAxisID=valueOrDefault(i.rAxisID,getFirstScaleId(t,"r")),t=e.indexAxis,n=e.iAxisID=a(t,r,s,i),a=e.vAxisID=a(t,s,r,i);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(s),e.rScale=this.getScaleForId(i),e.iScale=this.getScaleForId(n),e.vScale=this.getScaleForId(a)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){var e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){var t=this._cachedMeta;this._data&&unlistenArrayEvents(this._data,this),t._stacked&&clearStacks(t)}_dataCheck(){var t=this.getDataset(),t=t.data||(t.data=[]),e=this._data;isObject(t)?this._data=convertObjectDataToArray(t):e!==t&&(e&&(unlistenArrayEvents(e,this),clearStacks(e=this._cachedMeta),e._parsed=[]),t&&Object.isExtensible(t)&&listenArrayEvents(t,this),this._syncList=[],this._data=t)}addElements(){var t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){var e=this._cachedMeta,i=this.getDataset();let a=!1;this._dataCheck();var r=e._stacked;e._stacked=isStacked(e.vScale,e),e.stack!==i.stack&&(a=!0,clearStacks(e),e.stack=i.stack),this._resyncElements(t),!a&&r===e._stacked||updateStacks(this,e._parsed)}configure(){var t=this.chart.config,e=t.datasetScopeKeys(this._type),e=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(e,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){var{_cachedMeta:i,_data:a}=this,{iScale:r,_stacked:s}=i;const n=r.axis;let o=0===t&&e===a.length||i._sorted,l=0<t&&i._parsed[t-1],h,c,d;if(!1===this._parsing)i._parsed=a,i._sorted=!0,d=a;else{d=isArray(a[t])?this.parseArrayData(i,a,t,e):isObject(a[t])?this.parseObjectData(i,a,t,e):this.parsePrimitiveData(i,a,t,e);for(h=0;h<e;++h)i._parsed[h+t]=c=d[h],o&&((null===c[n]||l&&c[n]<l[n])&&(o=!1),l=c);i._sorted=o}s&&updateStacks(this,d)}parsePrimitiveData(t,e,i,a){var{iScale:r,vScale:s}=t,n=r.axis,o=s.axis,l=r.getLabels(),h=r===s,c=new Array(a);let d,u,p;for(d=0,u=a;d<u;++d)p=d+i,c[d]={[n]:h||r.parse(l[p],p),[o]:s.parse(e[p],p)};return c}parseArrayData(t,e,i,a){var{xScale:r,yScale:s}=t,n=new Array(a);let o,l,h,c;for(o=0,l=a;o<l;++o)c=e[h=o+i],n[o]={x:r.parse(c[0],h),y:s.parse(c[1],h)};return n}parseObjectData(t,e,i,a){var{xScale:r,yScale:s}=t,{xAxisKey:n="x",yAxisKey:o="y"}=this._parsing,l=new Array(a);let h,c,d,u;for(h=0,c=a;h<c;++h)u=e[d=h+i],l[h]={x:r.parse(resolveObjectKey(u,n),d),y:s.parse(resolveObjectKey(u,o),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){var a=this.chart,r=this._cachedMeta,s=e[t.axis];return applyStack({keys:getSortedDatasetIndices(a,!0),values:e._stacks[t.axis]._visualValues},s,r.index,{mode:i})}updateRangeFromParsed(t,e,i,a){var r=i[e.axis];let s=null===r?NaN:r;i=a&&i._stacks[e.axis];a&&i&&(a.values=i,s=applyStack(a,r,this._cachedMeta.index)),t.min=Math.min(t.min,s),t.max=Math.max(t.max,s)}getMinMax(e,t){var i=this._cachedMeta;const a=i._parsed;var r=i._sorted&&e===i.iScale,s=a.length;const n=this._getOtherScale(e);var o=createStack(t,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};const{min:h,max:c}=getUserBounds(n);let d,u;function p(){var t=(u=a[d])[n.axis];return!isNumberFinite(u[e.axis])||h>t||c<t}for(d=0;d<s&&(p()||(this.updateRangeFromParsed(l,e,u,o),!r));++d);if(r)for(d=s-1;0<=d;--d)if(!p()){this.updateRangeFromParsed(l,e,u,o);break}return l}getAllParsedValues(t){var e=this._cachedMeta._parsed,i=[];let a,r,s;for(a=0,r=e.length;a<r;++a)isNumberFinite(s=e[a][t.axis])&&i.push(s);return i}getMaxOverflow(){return!1}getLabelAndValue(t){var e=this._cachedMeta,i=e.iScale,e=e.vScale,t=this.getParsed(t);return{label:i?""+i.getLabelForValue(t[i.axis]):"",value:e?""+e.getLabelForValue(t[e.axis]):""}}_update(t){var e=this._cachedMeta;this.update(t||"default"),e._clip=toClip(valueOrDefault(this.options.clip,defaultClip(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){var t=this._ctx,e=this.chart,i=this._cachedMeta,a=i.data||[],r=e.chartArea,s=[],n=this._drawStart||0,o=this._drawCount||a.length-n,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,r,n,o),h=n;h<n+o;++h){var c=a[h];c.hidden||(c.active&&l?s.push(c):c.draw(t,r))}for(h=0;h<s.length;++h)s[h].draw(t,r)}getStyle(t,e){e=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(e):this.resolveDataElementOptions(t||0,e)}getContext(t,e,i){var a,r=this.getDataset();let s;return 0<=t&&t<this._cachedMeta.data.length?(a=this._cachedMeta.data[t],(s=a.$context||(a.$context=createDataContext(this.getContext(),t,a))).parsed=this.getParsed(t),s.raw=r.data[t],s.index=s.dataIndex=t):((s=this.$context||(this.$context=createDatasetContext(this.chart.getContext(),this.index))).dataset=r,s.index=s.datasetIndex=this.index),s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const a="active"===e;var r,s,n=this._cachedDataOpts,o=t+"-"+e,l=n[o],h=this.enableOptionSharing&&defined(i);return l?cloneIfNotShared(l,h):(s=(l=this.chart.config).datasetElementScopeKeys(this._type,t),r=a?[t+"Hover","hover",t,""]:[t,""],s=l.getOptionScopes(this.getDataset(),s),t=Object.keys(defaults.elements[t]),(l=l.resolveNamedOptions(s,t,()=>this.getContext(i,a,e),r)).$shared&&(l.$shared=h,n[o]=Object.freeze(cloneIfNotShared(l,h))),l)}_resolveAnimations(t,e,i){var a,r=this.chart,s=this._cachedDataOpts,n="animation-"+e,o=s[n];if(o)return o;let l;!1!==r.options.animation&&(a=(o=this.chart.config).datasetAnimationScopeKeys(this._type,e),a=o.getOptionScopes(this.getDataset(),a),l=o.createResolver(a,this.getContext(t,i,e)));o=new Animations(r,l&&l.animations);return l&&l._cacheable&&(s[n]=Object.freeze(o)),o}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||isDirectUpdateMode(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){var t=this.resolveDataElementOptions(t,e),i=this._sharedOptions,a=this.getSharedOptions(t),i=this.includeOptions(e,a)||a!==i;return this.updateSharedOptions(a,e,t),{sharedOptions:a,includeOptions:i}}updateElement(t,e,i,a){isDirectUpdateMode(a)?Object.assign(t,i):this._resolveAnimations(e,a).update(t,i)}updateSharedOptions(t,e,i){t&&!isDirectUpdateMode(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,a){t.active=a;var r=this.getStyle(e,a);this._resolveAnimations(e,i,a).update(t,{options:!a&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){var t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){var t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){var e,i,a,r=this._data,s=this._cachedMeta.data;for([e,i,a]of this._syncList)this[e](i,a);this._syncList=[];var s=s.length,r=r.length,n=Math.min(r,s);n&&this.parse(0,n),s<r?this._insertElements(s,r-s,t):r<s&&this._removeElements(r,s-r)}_insertElements(t,e,i=!0){var a=this._cachedMeta,r=a.data;const s=t+e;let n;var o=t=>{for(t.length+=e,n=t.length-1;n>=s;n--)t[n]=t[n-e]};for(o(r),n=t;n<s;++n)r[n]=new this.dataElementType;this._parsing&&o(a._parsed),this.parse(t,e),i&&this.updateElements(r,t,e,"reset")}updateElements(t,e,i,a){}_removeElements(t,e){var i,a=this._cachedMeta;this._parsing&&(i=a._parsed.splice(t,e),a._stacked)&&clearStacks(a,i),a.data.splice(t,e)}_sync(t){var e,i,a;this._parsing?this._syncList.push(t):([e,i,a]=t,this[e](i,a)),this.chart._dataChanges.push([this.index,...t])}_onDataPush(){var t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);e=arguments.length-2;e&&this._sync(["_insertElements",t,e])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function getAllScaleValues(a,t){if(!a._cache.$bar){var r=a.getMatchingVisibleMetas(t);let i=[];for(let t=0,e=r.length;t<e;t++)i=i.concat(r[t].controller.getAllParsedValues(a));a._cache.$bar=_arrayUnique(i.sort((t,e)=>t-e))}return a._cache.$bar}function computeMinSampleSize(t){var e=t.iScale,i=getAllScaleValues(e,t.type);let a=e._length,r,s,n,o;var l=()=>{32767!==n&&-32768!==n&&(defined(o)&&(a=Math.min(a,Math.abs(n-o)||a)),o=n)};for(r=0,s=i.length;r<s;++r)n=e.getPixelForValue(i[r]),l();for(o=void 0,r=0,s=e.ticks.length;r<s;++r)n=e.getPixelForTick(r),l();return a}function computeFitCategoryTraits(t,e,i,a){var r=i.barThickness;let s,n;return n=isNullOrUndef(r)?(s=e.min*i.categoryPercentage,i.barPercentage):(s=r*a,1),{chunk:s/a,ratio:n,start:e.pixels[t]-s/2}}function computeFlexCategoryTraits(t,e,i,a){var r=e.pixels,s=r[t];let n=0<t?r[t-1]:null,o=t<r.length-1?r[t+1]:null;r=i.categoryPercentage,null===n&&(n=s-(null===o?e.end-e.start:o-s)),null===o&&(o=s+s-n),t=s-(s-Math.min(n,o))/2*r;return{chunk:Math.abs(o-n)/2*r/a,ratio:i.barPercentage,start:t}}function parseFloatBar(t,e,i,a){var r=i.parse(t[0],a),t=i.parse(t[1],a),a=Math.min(r,t),s=Math.max(r,t);let n=a,o=s;Math.abs(a)>Math.abs(s)&&(n=s,o=a),e[i.axis]=o,e._custom={barStart:n,barEnd:o,start:r,end:t,min:a,max:s}}function parseValue(t,e,i,a){return isArray(t)?parseFloatBar(t,e,i,a):e[i.axis]=i.parse(t,a),e}function parseArrayOrPrimitive(t,e,i,a){var r=t.iScale,s=t.vScale,n=r.getLabels(),o=r===s,l=[];let h,c,d,u;for(c=(h=i)+a;h<c;++h)u=e[h],(d={})[r.axis]=o||r.parse(n[h],h),l.push(parseValue(u,d,s,h));return l}function isFloatBar(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function barSign(t,e,i){return 0!==t?sign(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}function borderProps(t){let e,i,a,r,s;return a=t.horizontal?(e=t.base>t.x,i="left","right"):(e=t.base<t.y,i="bottom","top"),s=e?(r="end","start"):(r="start","end"),{start:i,end:a,reverse:e,top:r,bottom:s}}function setBorderSkipped(t,e,i,a){let r=e.borderSkipped;var s,n,o,l,h,e={};r?!0===r?t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0}:({start:s,end:n,reverse:o,top:l,bottom:h}=borderProps(t),"middle"===r&&i&&(t.enableBorderRadius=!0,r=(i._top||0)===a?l:(i._bottom||0)===a?h:(e[parseEdge(h,s,n,o)]=!0,l)),e[parseEdge(r,s,n,o)]=!0,t.borderSkipped=e):t.borderSkipped=e}function parseEdge(t,e,i,a){return t=a?startEnd(t=swap(t,e,i),i,e):startEnd(t,e,i)}function swap(t,e,i){return t===e?i:t===i?e:t}function startEnd(t,e,i){return"start"===t?e:"end"===t?i:t}function setInflateAmount(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class BarController extends DatasetController{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,a){return parseArrayOrPrimitive(t,e,i,a)}parseArrayData(t,e,i,a){return parseArrayOrPrimitive(t,e,i,a)}parseObjectData(t,e,i,a){var{iScale:r,vScale:s}=t,{xAxisKey:t="x",yAxisKey:n="y"}=this._parsing,o="x"===r.axis?t:n,l="x"===s.axis?t:n,h=[];let c,d,u,p;for(d=(c=i)+a;c<d;++c)p=e[c],(u={})[r.axis]=r.parse(resolveObjectKey(p,o),c),h.push(parseValue(resolveObjectKey(p,l),u,s,c));return h}updateRangeFromParsed(t,e,i,a){super.updateRangeFromParsed(t,e,i,a);a=i._custom;a&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,a.min),t.max=Math.max(t.max,a.max))}getMaxOverflow(){return 0}getLabelAndValue(t){var{iScale:e,vScale:i}=this._cachedMeta,t=this.getParsed(t),a=t._custom,a=isFloatBar(a)?"["+a.start+", "+a.end+"]":""+i.getLabelForValue(t[i.axis]);return{label:""+e.getLabelForValue(t[e.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){var e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(e,i,a,r){var s="reset"===r,{index:n,_cachedMeta:{vScale:o}}=this,l=o.getBasePixel(),h=o.isHorizontal(),c=this._getRuler(),{sharedOptions:d,includeOptions:u}=this._getSharedOptions(i,r);for(let t=i;t<i+a;t++){var p=this.getParsed(t),g=s||isNullOrUndef(p[o.axis])?{base:l,head:l}:this._calculateBarValuePixels(t),f=this._calculateBarIndexPixels(t,c),m=(p._stacks||{})[o.axis],p={horizontal:h,base:g.base,enableBorderRadius:!m||isFloatBar(p._custom)||n===m._top||n===m._bottom,x:h?g.head:f.center,y:h?f.center:g.head,height:h?f.size:Math.abs(g.size),width:h?Math.abs(g.size):f.size},g=(u&&(p.options=d||this.resolveDataElementOptions(t,e[t].active?"active":r)),p.options||e[t].options);setBorderSkipped(p,g,m,n),setInflateAmount(p,g,c.ratio),this.updateElement(e[t],t,p,r)}}_getStacks(t,i){var e=this._cachedMeta["iScale"],a=e.getMatchingVisibleMetas(this._type).filter(t=>t.controller.options.grouped),r=e.options.stacked,s=[];for(const n of a)if((void 0===i||!(t=>{var e=t.controller.getParsed(i),e=e&&e[t.vScale.axis];if(isNullOrUndef(e)||isNaN(e))return!0})(n))&&((!1===r||-1===s.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&s.push(n.stack),n.index===t))break;return s.length||s.push(void 0),s}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){t=this._getStacks(t,i),i=void 0!==e?t.indexOf(e):-1;return-1===i?t.length-1:i}_getRuler(){var t=this.options,e=this._cachedMeta,i=e.iScale,a=[];let r,s;for(r=0,s=e.data.length;r<s;++r)a.push(i.getPixelForValue(this.getParsed(r)[i.axis],r));var n=t.barThickness;return{min:n||computeMinSampleSize(e),pixels:a,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:n?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){var{_cachedMeta:{vScale:e,_stacked:i,index:a},options:{base:r,minBarLength:s}}=this,n=r||0,o=this.getParsed(t),l=o._custom,h=isFloatBar(l);let c=o[e.axis],d=0,u=i?this.applyStack(e,o,i):c,p,g;u!==c&&(d=u-c,u=c),h&&(c=l.barStart,u=l.barEnd-l.barStart,0!==c&&sign(c)!==sign(l.barEnd)&&(d=0),d+=c);var l=isNullOrUndef(r)||h?d:r;let f=e.getPixelForValue(l);return p=this.chart.getDataVisibility(t)?e.getPixelForValue(d+u):f,g=p-f,Math.abs(g)<s&&(g=barSign(g,e,n)*s,c===n&&(f-=g/2),r=e.getPixelForDecimal(0),l=e.getPixelForDecimal(1),t=Math.min(r,l),s=Math.max(r,l),f=Math.max(Math.min(f,s),t),p=f+g,i)&&!h&&(o._stacks[e.axis]._visualValues[a]=e.getValueForPixel(p)-e.getValueForPixel(f)),f===e.getPixelForValue(n)&&(r=sign(g)*e.getLineWidthForValue(n)/2,f+=r,g-=r),{size:g,base:f,head:p,center:p+g/2}}_calculateBarIndexPixels(t,e){var i,a=e.scale,r=this.options,s=r.skipNull,n=valueOrDefault(r.maxBarThickness,1/0);let o,l;return l=e.grouped?(i=s?this._getStackCount(t):e.stackCount,r=("flex"===r.barThickness?computeFlexCategoryTraits:computeFitCategoryTraits)(t,e,r,i),i=this._getStackIndex(this.index,this._cachedMeta.stack,s?t:void 0),o=r.start+r.chunk*i+r.chunk/2,Math.min(n,r.chunk*r.ratio)):(o=a.getPixelForValue(this.getParsed(t)[a.axis],t),Math.min(n,e.min*e.ratio)),{base:o-l/2,head:o+l/2,center:o,size:l}}draw(){var t=this._cachedMeta,e=t.vScale,i=t.data,a=i.length;let r=0;for(;r<a;++r)null!==this.getParsed(r)[e.axis]&&i[r].draw(this._ctx)}}class BubbleController extends DatasetController{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,a){var r=super.parsePrimitiveData(t,e,i,a);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+i).radius;return r}parseArrayData(t,e,i,a){var r=super.parseArrayData(t,e,i,a);for(let t=0;t<r.length;t++){var s=e[i+t];r[t]._custom=valueOrDefault(s[2],this.resolveDataElementOptions(t+i).radius)}return r}parseObjectData(t,e,i,a){var r=super.parseObjectData(t,e,i,a);for(let t=0;t<r.length;t++){var s=e[i+t];r[t]._custom=valueOrDefault(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return r}getMaxOverflow(){var e=this._cachedMeta.data;let i=0;for(let t=e.length-1;0<=t;--t)i=Math.max(i,e[t].size(this.resolveDataElementOptions(t))/2);return 0<i&&i}getLabelAndValue(t){var e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:e,yScale:a}=e,r=this.getParsed(t),e=e.getLabelForValue(r.x),a=a.getLabelForValue(r.y),r=r._custom;return{label:i[t]||"",value:"("+e+", "+a+(r?", "+r:"")+")"}}update(t){var e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(e,i,a,r){var s="reset"===r,{iScale:n,vScale:o}=this._cachedMeta,{sharedOptions:l,includeOptions:h}=this._getSharedOptions(i,r),c=n.axis,d=o.axis;for(let t=i;t<i+a;t++){var u=e[t],p=!s&&this.getParsed(t),g={},f=g[c]=s?n.getPixelForDecimal(.5):n.getPixelForValue(p[c]),p=g[d]=s?o.getBasePixel():o.getPixelForValue(p[d]);g.skip=isNaN(f)||isNaN(p),h&&(g.options=l||this.resolveDataElementOptions(t,u.active?"active":r),s)&&(g.options.radius=0),this.updateElement(u,t,g,r)}}resolveDataElementOptions(t,e){var i=this.getParsed(t);let a=super.resolveDataElementOptions(t,e);t=(a=a.$shared?Object.assign({},a,{$shared:!1}):a).radius;return"active"!==e&&(a.radius=0),a.radius+=valueOrDefault(i&&i._custom,t),a}}function getRatioAndOffset(t,e,a){let i=1,r=1,s=0,n=0;if(e<TAU){const u=t,p=u+e;var t=Math.cos(u),e=Math.sin(u),o=Math.cos(p),l=Math.sin(p),h=(t,e,i)=>_angleBetween(t,u,p,!0)?1:Math.max(e,e*a,i,i*a),c=(t,e,i)=>_angleBetween(t,u,p,!0)?-1:Math.min(e,e*a,i,i*a),d=h(0,t,o),h=h(HALF_PI,e,l),t=c(PI,t,o),o=c(PI+HALF_PI,e,l);i=(d-t)/2,r=(h-o)/2,s=-(d+t)/2,n=-(h+o)/2}return{ratioX:i,ratioY:r,offsetX:s,offsetY:n}}class DoughnutController extends DatasetController{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(a){var t=a.data;if(t.labels.length&&t.datasets.length){const{pointStyle:r,color:s}=a.legend.options["labels"];return t.labels.map((t,e)=>{var i=a.getDatasetMeta(0).controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,fontColor:s,lineWidth:i.borderWidth,pointStyle:r,hidden:!a.getDataVisibility(e),index:e}})}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(a,r){const s=this.getDataset().data;var n=this._cachedMeta;if(!1===this._parsing)n._parsed=s;else{let t=t=>+s[t];if(isObject(s[a])){const{key:o="value"}=this._parsing;t=t=>+resolveObjectKey(s[t],o)}let e,i;for(i=(e=a)+r;e<i;++e)n._parsed[e]=t(e)}}_getRotation(){return toRadians(this.options.rotation-90)}_getCircumference(){return toRadians(this.options.circumference)}_getRotationExtents(){let e=TAU,i=-TAU;for(let t=0;t<this.chart.data.datasets.length;++t){var a,r;this.chart.isDatasetVisible(t)&&this.chart.getDatasetMeta(t).type===this._type&&(a=(r=this.chart.getDatasetMeta(t).controller)._getRotation(),r=r._getCircumference(),e=Math.min(e,a),i=Math.max(i,a+r))}return{rotation:e,circumference:i-e}}update(t){var e=this.chart["chartArea"],i=this._cachedMeta,a=i.data,r=this.getMaxBorderWidth()+this.getMaxOffset(a)+this.options.spacing,s=Math.max((Math.min(e.width,e.height)-r)/2,0),s=Math.min(toPercentage(this.options.cutout,s),1),n=this._getRingWeight(this.index),{circumference:o,rotation:l}=this._getRotationExtents(),{ratioX:l,ratioY:o,offsetX:h,offsetY:c}=getRatioAndOffset(l,o,s),l=(e.width-r)/l,e=(e.height-r)/o,r=Math.max(Math.min(l,e)/2,0),o=toDimension(this.options.radius,r),l=(o-Math.max(o*s,0))/this._getVisibleDatasetWeightTotal();this.offsetX=h*o,this.offsetY=c*o,i.total=this.calculateTotal(),this.outerRadius=o-l*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-l*n,0),this.updateElements(a,0,a.length,t)}_circumference(t,e){var i=this.options,a=this._cachedMeta,r=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===a._parsed[t]||a.data[t].hidden?0:this.calculateCircumference(a._parsed[t]*r/TAU)}updateElements(t,e,i,a){var r="reset"===a,s=this.chart,n=s.chartArea,s=s.options.animation,o=(n.left+n.right)/2,l=(n.top+n.bottom)/2,n=r&&s.animateScale,h=n?0:this.innerRadius,c=n?0:this.outerRadius,{sharedOptions:d,includeOptions:u}=this._getSharedOptions(e,a);let p=this._getRotation(),g;for(g=0;g<e;++g)p+=this._circumference(g,r);for(g=e;g<e+i;++g){var f=this._circumference(g,r),m=t[g],v={x:o+this.offsetX,y:l+this.offsetY,startAngle:p,endAngle:p+f,circumference:f,outerRadius:c,innerRadius:h};u&&(v.options=d||this.resolveDataElementOptions(g,m.active?"active":a)),p+=f,this.updateElement(m,g,v,a)}}calculateTotal(){var t=this._cachedMeta,e=t.data;let i=0,a;for(a=0;a<e.length;a++){var r=t._parsed[a];null===r||isNaN(r)||!this.chart.getDataVisibility(a)||e[a].hidden||(i+=Math.abs(r))}return i}calculateCircumference(t){var e=this._cachedMeta.total;return 0<e&&!isNaN(t)?TAU*(Math.abs(t)/e):0}getLabelAndValue(t){var e=this._cachedMeta,i=this.chart,a=i.data.labels||[],e=formatNumber(e._parsed[t],i.options.locale);return{label:a[t]||"",value:e}}getMaxBorderWidth(t){let e=0;var i=this.chart;let a,r,s,n,o;if(!t)for(a=0,r=i.data.datasets.length;a<r;++a)if(i.isDatasetVisible(a)){t=(s=i.getDatasetMeta(a)).data,n=s.controller;break}if(!t)return 0;for(a=0,r=t.length;a<r;++a)"inner"!==(o=n.resolveDataElementOptions(a)).borderAlign&&(e=Math.max(e,o.borderWidth||0,o.hoverBorderWidth||0));return e}getMaxOffset(i){let a=0;for(let t=0,e=i.length;t<e;++t){var r=this.resolveDataElementOptions(t);a=Math.max(a,r.offset||0,r.hoverOffset||0)}return a}_getRingWeightOffset(e){let i=0;for(let t=0;t<e;++t)this.chart.isDatasetVisible(t)&&(i+=this._getRingWeight(t));return i}_getRingWeight(t){return Math.max(valueOrDefault(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class LineController extends DatasetController{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){var e=this._cachedMeta,{dataset:i,data:a=[],_dataset:r}=e,s=this.chart._animationsDisabled;let{start:n,count:o}=_getStartAndCountOfVisiblePoints(e,a,s);this._drawStart=n,this._drawCount=o,_scaleRangesChanged(e)&&(n=0,o=a.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!r._decimated,i.points=a;e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0),e.segment=this.options.segment,this.updateElement(i,void 0,{animated:!s,options:e},t),this.updateElements(a,n,o,t)}updateElements(e,i,t,a){var r="reset"===a,{iScale:s,vScale:n,_stacked:o,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(i,a),d=s.axis,u=n.axis,{spanGaps:p,segment:g}=this.options,f=isNumber(p)?p:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||r||"none"===a,v=i+t,b=e.length;let _=0<i&&this.getParsed(i-1);for(let t=0;t<b;++t){var x,y,S,k,A=e[t],w=m?A:{};t<i||t>=v?w.skip=!0:(y=isNullOrUndef((x=this.getParsed(t))[u]),S=w[d]=s.getPixelForValue(x[d],t),k=w[u]=r||y?n.getBasePixel():n.getPixelForValue(o?this.applyStack(n,x,o):x[u],t),w.skip=isNaN(S)||isNaN(k)||y,w.stop=0<t&&Math.abs(x[d]-_[d])>f,g&&(w.parsed=x,w.raw=l.data[t]),c&&(w.options=h||this.resolveDataElementOptions(t,A.active?"active":a)),m||this.updateElement(A,t,w,a),_=x)}}getMaxOverflow(){var t,e=this._cachedMeta,i=e.dataset,i=i.options&&i.options.borderWidth||0,e=e.data||[];return e.length?(t=e[0].size(this.resolveDataElementOptions(0)),e=e[e.length-1].size(this.resolveDataElementOptions(e.length-1)),Math.max(i,t,e)/2):i}draw(){var t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}class PolarAreaController extends DatasetController{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(a){var t=a.data;if(t.labels.length&&t.datasets.length){const{pointStyle:r,color:s}=a.legend.options["labels"];return t.labels.map((t,e)=>{var i=a.getDatasetMeta(0).controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,fontColor:s,lineWidth:i.borderWidth,pointStyle:r,hidden:!a.getDataVisibility(e),index:e}})}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){var e=this._cachedMeta,i=this.chart,a=i.data.labels||[],e=formatNumber(e._parsed[t].r,i.options.locale);return{label:a[t]||"",value:e}}parseObjectData(t,e,i,a){return _parseObjectDataRadialScale.bind(this)(t,e,i,a)}update(t){var e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){var t=this._cachedMeta;const a={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach((t,e)=>{var i=this.getParsed(e).r;!isNaN(i)&&this.chart.getDataVisibility(e)&&(i<a.min&&(a.min=i),i>a.max)&&(a.max=i)}),a}_updateRadius(){var t=this.chart,e=t.chartArea,i=t.options,e=Math.min(e.right-e.left,e.bottom-e.top),e=Math.max(e/2,0),i=(e-Math.max(i.cutoutPercentage?e/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=e-i*this.index,this.innerRadius=this.outerRadius-i}updateElements(a,t,e,r){var s="reset"===r,n=this.chart,o=n.options.animation,l=this._cachedMeta.rScale,h=l.xCenter,c=l.yCenter,d=l.getIndexAngle(0)-.5*PI;let u=d,p;var g=360/this.countVisibleElements();for(p=0;p<t;++p)u+=this._computeAngle(p,r,g);for(p=t;p<t+e;p++){var f=a[p];let t=u,e=u+this._computeAngle(p,r,g),i=n.getDataVisibility(p)?l.getDistanceFromCenterForValue(this.getParsed(p).r):0;u=e,s&&(o.animateScale&&(i=0),o.animateRotate)&&(t=e=d);var m={x:h,y:c,innerRadius:0,outerRadius:i,startAngle:t,endAngle:e,options:this.resolveDataElementOptions(p,f.active?"active":r)};this.updateElement(f,p,m,r)}}countVisibleElements(){var t=this._cachedMeta;let i=0;return t.data.forEach((t,e)=>{!isNaN(this.getParsed(e).r)&&this.chart.getDataVisibility(e)&&i++}),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?toRadians(this.resolveDataElementOptions(t,e).angle||i):0}}class PieController extends DoughnutController{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}}class RadarController extends DatasetController{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){var e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,a){return _parseObjectDataRadialScale.bind(this)(t,e,i,a)}update(t){var e,i=this._cachedMeta,a=i.dataset,r=i.data||[],i=i.iScale.getLabels();a.points=r,"resize"!==t&&(e=this.resolveDatasetElementOptions(t),this.options.showLine||(e.borderWidth=0),i={_loop:!0,_fullLoop:i.length===r.length,options:e},this.updateElement(a,void 0,i,t)),this.updateElements(r,0,r.length,t)}updateElements(e,i,a,r){var s=this._cachedMeta.rScale,n="reset"===r;for(let t=i;t<i+a;t++){var o=e[t],l=this.resolveDataElementOptions(t,o.active?"active":r),h=s.getPointPositionForValue(t,this.getParsed(t).r),c=n?s.xCenter:h.x,d=n?s.yCenter:h.y,h={x:c,y:d,angle:h.angle,skip:isNaN(c)||isNaN(d),options:l};this.updateElement(o,t,h,r)}}}class ScatterController extends DatasetController{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){var e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:e,yScale:a}=e,r=this.getParsed(t),e=e.getLabelForValue(r.x),a=a.getLabelForValue(r.y);return{label:i[t]||"",value:"("+e+", "+a+")"}}update(t){var e,i,a=this._cachedMeta,{data:r=[]}=a,s=this.chart._animationsDisabled;let{start:n,count:o}=_getStartAndCountOfVisiblePoints(a,r,s);this._drawStart=n,this._drawCount=o,_scaleRangesChanged(a)&&(n=0,o=r.length),this.options.showLine?(this.datasetElementType||this.addElements(),{dataset:e,_dataset:i}=a,e._chart=this.chart,e._datasetIndex=this.index,e._decimated=!!i._decimated,e.points=r,(i=this.resolveDatasetElementOptions(t)).segment=this.options.segment,this.updateElement(e,void 0,{animated:!s,options:i},t)):this.datasetElementType&&(delete a.dataset,this.datasetElementType=!1),this.updateElements(r,n,o,t)}addElements(){var t=this.options["showLine"];!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(e,i,a,r){var s="reset"===r,{iScale:n,vScale:o,_stacked:l,_dataset:h}=this._cachedMeta,t=this.resolveDataElementOptions(i,r),c=this.getSharedOptions(t),d=this.includeOptions(r,c),u=n.axis,p=o.axis,{spanGaps:g,segment:f}=this.options,m=isNumber(g)?g:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||s||"none"===r;let b=0<i&&this.getParsed(i-1);for(let t=i;t<i+a;++t){var _=e[t],x=this.getParsed(t),y=v?_:{},S=isNullOrUndef(x[p]),k=y[u]=n.getPixelForValue(x[u],t),A=y[p]=s||S?o.getBasePixel():o.getPixelForValue(l?this.applyStack(o,x,l):x[p],t);y.skip=isNaN(k)||isNaN(A)||S,y.stop=0<t&&Math.abs(x[u]-b[u])>m,f&&(y.parsed=x,y.raw=h.data[t]),d&&(y.options=c||this.resolveDataElementOptions(t,_.active?"active":r)),v||this.updateElement(_,t,y,r),b=x}this.updateSharedOptions(c,r,t)}getMaxOverflow(){var t,e,i=this._cachedMeta,a=i.data||[];if(this.options.showLine)return i=(i=i.dataset).options&&i.options.borderWidth||0,a.length?(t=a[0].size(this.resolveDataElementOptions(0)),e=a[a.length-1].size(this.resolveDataElementOptions(a.length-1)),Math.max(i,t,e)/2):i;{let e=0;for(let t=a.length-1;0<=t;--t)e=Math.max(e,a[t].size(this.resolveDataElementOptions(t))/2);return 0<e&&e}}}var controllers=Object.freeze({__proto__:null,BarController:BarController,BubbleController:BubbleController,DoughnutController:DoughnutController,LineController:LineController,PieController:PieController,PolarAreaController:PolarAreaController,RadarController:RadarController,ScatterController:ScatterController});function abstract(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class DateAdapterBase{static override(t){Object.assign(DateAdapterBase.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return abstract()}parse(){return abstract()}format(){return abstract()}add(){return abstract()}diff(){return abstract()}startOf(){return abstract()}endOf(){return abstract()}}var adapters={_date:DateAdapterBase};function binarySearch(t,e,i,a){var{controller:t,data:r,_sorted:s}=t,n=t._cachedMeta.iScale;if(n&&e===n.axis&&"r"!==e&&s&&r.length){s=n._reversePixels?_rlookupByKey:_lookupByKey;if(!a)return s(r,e,i);if(t._sharedOptions){var n=r[0],a="function"==typeof n.getRange&&n.getRange(e);if(a)return t=s(r,e,i-a),n=s(r,e,i+a),{lo:t.lo,hi:n.hi}}}return{lo:0,hi:r.length-1}}function evaluateInteractionItems(t,i,e,a,r){var s=t.getSortedVisibleDatasetMetas(),n=e[i];for(let t=0,e=s.length;t<e;++t){var{index:o,data:l}=s[t],{lo:h,hi:c}=binarySearch(s[t],i,n,r);for(let t=h;t<=c;++t){var d=l[t];d.skip||a(d,o,t)}}}function getDistanceMetricForAxis(t){const a=-1!==t.indexOf("x"),r=-1!==t.indexOf("y");return function(t,e){var i=a?Math.abs(t.x-e.x):0,t=r?Math.abs(t.y-e.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(t,2))}}function getIntersectItems(a,r,t,s,n){const o=[];return(n||a.isPointInArea(r))&&evaluateInteractionItems(a,t,r,function(t,e,i){(n||_isPointInArea(t,a.chartArea,0))&&t.inRange(r.x,r.y,s)&&o.push({element:t,datasetIndex:e,index:i})},!0),o}function getNearestRadialItems(t,n,e,o){let l=[];return evaluateInteractionItems(t,e,n,function(t,e,i){var{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],o),s=getAngleFromPoint(t,{x:n.x,y:n.y})["angle"];_angleBetween(s,a,r)&&l.push({element:t,datasetIndex:e,index:i})}),l}function getNearestCartesianItems(s,n,t,o,l,h){let c=[];const d=getDistanceMetricForAxis(t);let u=Number.POSITIVE_INFINITY;return evaluateInteractionItems(s,t,n,function(t,e,i){var a,r=t.inRange(n.x,n.y,l);(!o||r)&&(a=t.getCenterPoint(l),h||s.isPointInArea(a)||r)&&((r=d(n,a))<u?(c=[{element:t,datasetIndex:e,index:i}],u=r):r===u&&c.push({element:t,datasetIndex:e,index:i}))}),c}function getNearestItems(t,e,i,a,r,s){return s||t.isPointInArea(e)?"r"!==i||a?getNearestCartesianItems(t,e,i,a,r,s):getNearestRadialItems(t,e,i,r):[]}function getAxisItems(t,a,r,e,s){const n=[],o="x"===r?"inXRange":"inYRange";let l=!1;return evaluateInteractionItems(t,r,a,(t,e,i)=>{t[o](a[r],s)&&(n.push({element:t,datasetIndex:e,index:i}),l=l||t.inRange(a.x,a.y,s))}),e&&!l?[]:n}var Interaction={evaluateInteractionItems:evaluateInteractionItems,modes:{index(t,e,i,a){var e=getRelativePosition(e,t),r=i.axis||"x",s=i.includeInvisible||!1;const n=i.intersect?getIntersectItems(t,e,r,a,s):getNearestItems(t,e,r,!1,a,s),o=[];return n.length?(t.getSortedVisibleDatasetMetas().forEach(t=>{var e=n[0].index,i=t.data[e];i&&!i.skip&&o.push({element:i,datasetIndex:t.index,index:e})}),o):[]},dataset(t,e,i,a){var e=getRelativePosition(e,t),r=i.axis||"xy",s=i.includeInvisible||!1;let n=i.intersect?getIntersectItems(t,e,r,a,s):getNearestItems(t,e,r,!1,a,s);if(0<n.length){var o=n[0].datasetIndex,l=t.getDatasetMeta(o).data;n=[];for(let t=0;t<l.length;++t)n.push({element:l[t],datasetIndex:o,index:t})}return n},point(t,e,i,a){return getIntersectItems(t,getRelativePosition(e,t),i.axis||"xy",a,i.includeInvisible||!1)},nearest(t,e,i,a){var e=getRelativePosition(e,t),r=i.axis||"xy",s=i.includeInvisible||!1;return getNearestItems(t,e,r,i.intersect,a,s)},x(t,e,i,a){return getAxisItems(t,getRelativePosition(e,t),"x",i.intersect,a)},y(t,e,i,a){return getAxisItems(t,getRelativePosition(e,t),"y",i.intersect,a)}}};const STATIC_POSITIONS=["left","top","right","bottom"];function filterByPosition(t,e){return t.filter(t=>t.pos===e)}function filterDynamicPositionByAxis(t,e){return t.filter(t=>-1===STATIC_POSITIONS.indexOf(t.pos)&&t.box.axis===e)}function sortByWeight(t,a){return t.sort((t,e)=>{var i=a?e:t,t=a?t:e;return i.weight===t.weight?i.index-t.index:i.weight-t.weight})}function wrapBoxes(t){var e=[];let i,a,r,s,n,o;for(i=0,a=(t||[]).length;i<a;++i)({position:s,options:{stack:n,stackWeight:o=1}}=r=t[i]),e.push({index:i,box:r,pos:s,horizontal:r.isHorizontal(),weight:r.weight,stack:n&&s+n,stackWeight:o});return e}function buildStacks(t){var e={};for(const s of t){var{stack:i,pos:a,stackWeight:r}=s;i&&STATIC_POSITIONS.includes(a)&&((a=e[i]||(e[i]={count:0,placed:0,weight:0,size:0})).count++,a.weight+=r)}return e}function setLayoutDims(t,e){var i=buildStacks(t),{vBoxMaxWidth:a,hBoxMaxHeight:r}=e;let s,n,o;for(s=0,n=t.length;s<n;++s){var l=(o=t[s]).box["fullSize"],h=i[o.stack],h=h&&o.stackWeight/h.weight;o.horizontal?(o.width=h?h*a:l&&e.availableWidth,o.height=r):(o.width=a,o.height=h?h*r:l&&e.availableHeight)}return i}function buildLayoutBoxes(t){var t=wrapBoxes(t),e=sortByWeight(t.filter(t=>t.box.fullSize),!0),i=sortByWeight(filterByPosition(t,"left"),!0),a=sortByWeight(filterByPosition(t,"right")),r=sortByWeight(filterByPosition(t,"top"),!0),s=sortByWeight(filterByPosition(t,"bottom")),n=filterDynamicPositionByAxis(t,"x"),o=filterDynamicPositionByAxis(t,"y");return{fullSize:e,leftAndTop:i.concat(r),rightAndBottom:a.concat(o).concat(s).concat(n),chartArea:filterByPosition(t,"chartArea"),vertical:i.concat(a).concat(o),horizontal:r.concat(s).concat(n)}}function getCombinedMax(t,e,i,a){return Math.max(t[i],e[i])+Math.max(t[a],e[a])}function updateMaxPadding(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function updateDims(t,e,i,a){var{pos:r,box:s}=i,n=t.maxPadding,a=(isObject(r)||(i.size&&(t[r]-=i.size),(a=a[i.stack]||{size:0,count:1}).size=Math.max(a.size,i.horizontal?s.height:s.width),i.size=a.size/a.count,t[r]+=i.size),s.getPadding&&updateMaxPadding(n,s.getPadding()),Math.max(0,e.outerWidth-getCombinedMax(n,t,"left","right"))),r=Math.max(0,e.outerHeight-getCombinedMax(n,t,"top","bottom")),s=a!==t.w,e=r!==t.h;return t.w=a,t.h=r,i.horizontal?{same:s,other:e}:{same:e,other:s}}function handleMaxPadding(i){const a=i.maxPadding;function t(t){var e=Math.max(a[t]-i[t],0);return i[t]+=e,e}i.y+=t("top"),i.x+=t("left"),t("right"),t("bottom")}function getMargins(t,i){const a=i.maxPadding;function e(t){const e={left:0,top:0,right:0,bottom:0};return t.forEach(t=>{e[t]=Math.max(i[t],a[t])}),e}return e(t?["left","right"]:["top","bottom"])}function fitBoxes(t,e,i,a){var r=[];let s,n,o,l,h,c;for(s=0,n=t.length,h=0;s<n;++s){o=t[s],(l=o.box).update(o.width||e.w,o.height||e.h,getMargins(o.horizontal,e));var{same:d,other:u}=updateDims(e,i,o,a);h|=d&&r.length,c=c||u,l.fullSize||r.push(o)}return h&&fitBoxes(r,e,i,a)||c}function setBoxDims(t,e,i,a,r){t.top=i,t.left=e,t.right=e+a,t.bottom=i+r,t.width=a,t.height=r}function placeBoxes(t,e,i,a){var r=i.padding;let{x:s,y:n}=e;for(const u of t){var o,l,h=u.box,c=a[u.stack]||{count:1,placed:0,weight:1},d=u.stackWeight/c.weight||1;u.horizontal?(l=e.w*d,o=c.size||h.height,defined(c.start)&&(n=c.start),h.fullSize?setBoxDims(h,r.left,n,i.outerWidth-r.right-r.left,o):setBoxDims(h,e.left+c.placed,n,l,o),c.start=n,c.placed+=l,n=h.bottom):(o=e.h*d,l=c.size||h.width,defined(c.start)&&(s=c.start),h.fullSize?setBoxDims(h,s,r.top,l,i.outerHeight-r.bottom-r.top):setBoxDims(h,s,e.top+c.placed,l,o),c.start=s,c.placed+=o,s=h.right)}e.x=s,e.y=n}var layouts={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){e=t.boxes?t.boxes.indexOf(e):-1;-1!==e&&t.boxes.splice(e,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(e,t,i,a){if(e){var r=toPadding(e.options.layout.padding),s=Math.max(t-r.width,0),n=Math.max(i-r.height,0),o=buildLayoutBoxes(e.boxes),l=o.vertical,h=o.horizontal,c=(each(e.boxes,t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}),l.reduce((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1,0)||1),t=Object.freeze({outerWidth:t,outerHeight:i,padding:r,availableWidth:s,availableHeight:n,vBoxMaxWidth:s/2/c,hBoxMaxHeight:n/2}),i=Object.assign({},r);updateMaxPadding(i,toPadding(a));const d=Object.assign({maxPadding:i,w:s,h:n,x:r.left,y:r.top},r);c=setLayoutDims(l.concat(h),t);fitBoxes(o.fullSize,d,t,c),fitBoxes(l,d,t,c),fitBoxes(h,d,t,c)&&fitBoxes(l,d,t,c),handleMaxPadding(d),placeBoxes(o.leftAndTop,d,t,c),d.x+=d.w,d.y+=d.h,placeBoxes(o.rightAndBottom,d,t,c),e.chartArea={left:d.left,top:d.top,right:d.left+d.w,bottom:d.top+d.h,height:d.h,width:d.w},each(o.chartArea,t=>{t=t.box;Object.assign(t,e.chartArea),t.update(d.w,d.h,{left:0,top:0,right:0,bottom:0})})}}};class BasePlatform{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,a){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,a?Math.floor(e/a):i)}}isAttached(t){return!0}updateConfig(t){}}class BasicPlatform extends BasePlatform{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const EXPANDO_KEY="$chartjs",EVENT_TYPES={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},isNullOrEmpty=t=>null===t||""===t;function initCanvas(t,e){var i=t.style,a=t.getAttribute("height"),r=t.getAttribute("width");return t[EXPANDO_KEY]={initial:{height:a,width:r,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",isNullOrEmpty(r)&&void 0!==(i=readUsedSize(t,"width"))&&(t.width=i),isNullOrEmpty(a)&&(""===t.style.height?t.height=t.width/(e||2):void 0!==(r=readUsedSize(t,"height"))&&(t.height=r)),t}const eventListenerOptions=!!supportsEventListenerOptions&&{passive:!0};function addListener(t,e,i){t.addEventListener(e,i,eventListenerOptions)}function removeListener(t,e,i){t.canvas.removeEventListener(e,i,eventListenerOptions)}function fromNativeEvent(t,e){var i=EVENT_TYPES[t.type]||t.type,{x:a,y:r}=getRelativePosition(t,e);return{type:i,chart:e,native:t,x:void 0!==a?a:null,y:void 0!==r?r:null}}function nodeListContains(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function createAttachObserver(t,e,a){const r=t.canvas;t=new MutationObserver(t=>{let e=!1;for(const i of t)e=(e=e||nodeListContains(i.addedNodes,r))&&!nodeListContains(i.removedNodes,r);e&&a()});return t.observe(document,{childList:!0,subtree:!0}),t}function createDetachObserver(t,e,a){const r=t.canvas;t=new MutationObserver(t=>{let e=!1;for(const i of t)e=(e=e||nodeListContains(i.removedNodes,r))&&!nodeListContains(i.addedNodes,r);e&&a()});return t.observe(document,{childList:!0,subtree:!0}),t}const drpListeningCharts=new Map;let oldDevicePixelRatio=0;function onWindowResize(){const i=window.devicePixelRatio;i!==oldDevicePixelRatio&&(oldDevicePixelRatio=i,drpListeningCharts.forEach((t,e)=>{e.currentDevicePixelRatio!==i&&t()}))}function listenDevicePixelRatioChanges(t,e){drpListeningCharts.size||window.addEventListener("resize",onWindowResize),drpListeningCharts.set(t,e)}function unlistenDevicePixelRatioChanges(t){drpListeningCharts.delete(t),drpListeningCharts.size||window.removeEventListener("resize",onWindowResize)}function createResizeObserver(t,e,a){var i=t.canvas;const r=i&&_getParentNode(i);if(r){const s=throttled((t,e)=>{var i=r.clientWidth;a(t,e),i<r.clientWidth&&a()},window);i=new ResizeObserver(t=>{var t=t[0],e=t.contentRect.width,t=t.contentRect.height;0===e&&0===t||s(e,t)});return i.observe(r),listenDevicePixelRatioChanges(t,s),i}}function releaseObserver(t,e,i){i&&i.disconnect(),"resize"===e&&unlistenDevicePixelRatioChanges(t)}function createProxyAndListen(e,t,i){var a=e.canvas,r=throttled(t=>{null!==e.ctx&&i(fromNativeEvent(t,e))},e);return addListener(a,t,r),r}class DomPlatform extends BasePlatform{acquireContext(t,e){var i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(initCanvas(t,e),i):null}releaseContext(t){const i=t.canvas;if(!i[EXPANDO_KEY])return!1;const a=i[EXPANDO_KEY].initial,e=(["height","width"].forEach(t=>{var e=a[t];isNullOrUndef(e)?i.removeAttribute(t):i.setAttribute(t,e)}),a.style||{});return Object.keys(e).forEach(t=>{i.style[t]=e[t]}),i.width=i.width,delete i[EXPANDO_KEY],!0}addEventListener(t,e,i){this.removeEventListener(t,e);var a=t.$proxies||(t.$proxies={}),r={attach:createAttachObserver,detach:createDetachObserver,resize:createResizeObserver}[e]||createProxyAndListen;a[e]=r(t,e,i)}removeEventListener(t,e){var i=t.$proxies||(t.$proxies={}),a=i[e];a&&(({attach:releaseObserver,detach:releaseObserver,resize:releaseObserver}[e]||removeListener)(t,e,a),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,a){return getMaximumSize(t,e,i,a)}isAttached(t){t=_getParentNode(t);return!(!t||!t.isConnected)}}function _detectPlatform(t){return!_isDomSupported()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?BasicPlatform:DomPlatform}class Element{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){var{x:t,y:e}=this.getProps(["x","y"],t);return{x:t,y:e}}hasValue(){return isNumber(this.x)&&isNumber(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const a={};return t.forEach(t=>{a[t]=i[t]&&i[t].active()?i[t]._to:this[t]}),a}}function autoSkip(i,a){var r=i.options.ticks,i=determineMaxTicks(i),i=Math.min(r.maxTicksLimit||i,i),s=r.major.enabled?getMajorIndices(a):[],r=s.length,n=s[0],o=s[r-1],l=[];if(i<r)skipMajors(a,l,s,r/i);else{var h=calculateSpacing(s,a,i);if(0<r){let t,e;i=1<r?Math.round((o-n)/(r-1)):null;for(skip(a,l,h,isNullOrUndef(i)?0:n-i,n),t=0,e=r-1;t<e;t++)skip(a,l,h,s[t],s[t+1]);skip(a,l,h,o,isNullOrUndef(i)?a.length:o+i)}else skip(a,l,h)}return l}function determineMaxTicks(t){var e=t.options.offset,i=t._tickSize(),e=t._length/i+(e?0:1),t=t._maxLength/i;return Math.floor(Math.min(e,t))}function calculateSpacing(t,e,i){var t=getEvenSpacing(t),a=e.length/i;if(t){var r=_factorize(t);for(let t=0,e=r.length-1;t<e;t++){var s=r[t];if(a<s)return s}}return Math.max(a,1)}function getMajorIndices(t){var e=[];let i,a;for(i=0,a=t.length;i<a;i++)t[i].major&&e.push(i);return e}function skipMajors(t,e,i,a){let r=0,s=i[0],n;for(a=Math.ceil(a),n=0;n<t.length;n++)n===s&&(e.push(t[n]),r++,s=i[r*a])}function skip(t,e,i,a,r){var s=valueOrDefault(a,0),n=Math.min(valueOrDefault(r,t.length),t.length);let o=0,l,h,c;for(i=Math.ceil(i),r&&(i=(l=r-a)/Math.floor(l/i)),c=s;c<0;)o++,c=Math.round(s+o*i);for(h=Math.max(s,0);h<n;h++)h===c&&(e.push(t[h]),o++,c=Math.round(s+o*i))}function getEvenSpacing(t){var e=t.length;let i,a;if(e<2)return!1;for(a=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==a)return!1;return a}const reverseAlign=t=>"left"===t?"right":"right"===t?"left":t,offsetFromEdge=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,getTicksLimit=(t,e)=>Math.min(e||t,t);function sample(t,e){var i=[],a=t.length/e,r=t.length;let s=0;for(;s<r;s+=a)i.push(t[Math.floor(s)]);return i}function getPixelForGridLine(t,e,i){var a=t.ticks.length,r=Math.min(e,a-1),s=t._startPixel,n=t._endPixel;let o=t.getPixelForTick(r),l;if(!(i&&(l=1===a?Math.max(o-s,n-o):0===e?(t.getPixelForTick(1)-o)/2:(o-t.getPixelForTick(r-1))/2,(o+=r<e?l:-l)<s-1e-6||o>n+1e-6)))return o}function garbageCollect(t,r){each(t,t=>{var e=t.gc,i=e.length/2;let a;if(r<i){for(a=0;a<i;++a)delete t.data[e[a]];e.splice(0,i)}})}function getTickMarkLength(t){return t.drawTicks?t.tickLength:0}function getTitleHeight(t,e){var i;return t.display?(e=toFont(t.font,e),i=toPadding(t.padding),(isArray(t.text)?t.text.length:1)*e.lineHeight+i.height):0}function createScaleContext(t,e){return createContext(t,{scale:e,type:"scale"})}function createTickContext(t,e,i){return createContext(t,{tick:i,index:e,type:"tick"})}function titleAlign(t,e,i){let a=_toLeftRightCenter(t);return a=i&&"right"!==e||!i&&"right"===e?reverseAlign(a):a}function titleArgs(t,e,i,a){var{top:r,left:s,bottom:n,right:o,chart:l}=t,{chartArea:l,scales:h}=l;let c=0,d,u,p;var g,f,m=n-r,v=o-s;return t.isHorizontal()?(u=_alignStartEnd(a,s,o),p=isObject(i)?(f=i[g=Object.keys(i)[0]],h[g].getPixelForValue(f)+m-e):"center"===i?(l.bottom+l.top)/2+m-e:offsetFromEdge(t,i,e),d=o-s):(u=isObject(i)?(f=i[g=Object.keys(i)[0]],h[g].getPixelForValue(f)-v+e):"center"===i?(l.left+l.right)/2-v+e:offsetFromEdge(t,i,e),p=_alignStartEnd(a,n,r),c="left"===i?-HALF_PI:HALF_PI),{titleX:u,titleY:p,maxWidth:d,rotation:c}}class Scale extends Element{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){var{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:a}=this,t=finiteOrDefault(t,Number.POSITIVE_INFINITY),e=finiteOrDefault(e,Number.NEGATIVE_INFINITY),i=finiteOrDefault(i,Number.POSITIVE_INFINITY),a=finiteOrDefault(a,Number.NEGATIVE_INFINITY);return{min:finiteOrDefault(t,i),max:finiteOrDefault(e,a),minDefined:isNumberFinite(t),maxDefined:isNumberFinite(e)}}getMinMax(i){let{min:a,max:r,minDefined:s,maxDefined:n}=this.getUserBounds();var o;if(s&&n)return{min:a,max:r};var l=this.getMatchingVisibleMetas();for(let t=0,e=l.length;t<e;++t)o=l[t].controller.getMinMax(this,i),s||(a=Math.min(a,o.min)),n||(r=Math.max(r,o.max));return a=n&&a>r?r:a,r=s&&a>r?a:r,{min:finiteOrDefault(a,finiteOrDefault(r,a)),max:finiteOrDefault(r,finiteOrDefault(a,r))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){callback(this.options.beforeUpdate,[this])}update(t,e,i){var{beginAtZero:a,grace:r,ticks:s}=this.options,n=s.sampleSize,t=(this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=_addGrace(this,r,a),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks(),n<this.ticks.length);this._convertTicksToLabels(t?sample(this.ticks,n):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),s.display&&(s.autoSkip||"auto"===s.source)&&(this.ticks=autoSkip(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),t&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t=this.options.reverse,e,i;this.isHorizontal()?(e=this.left,i=this.right):(e=this.top,i=this.bottom,t=!t),this._startPixel=e,this._endPixel=i,this._reversePixels=t,this._length=i-e,this._alignToPixels=this.options.alignToPixels}afterUpdate(){callback(this.options.afterUpdate,[this])}beforeSetDimensions(){callback(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){callback(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),callback(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){callback(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){var e=this.options.ticks;let i,a,r;for(i=0,a=t.length;i<a;i++)(r=t[i]).label=callback(e.callback,[r.value,i,t],this)}afterTickToLabelConversion(){callback(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){callback(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){var t,e,i,a,r=this.options,s=r.ticks,n=getTicksLimit(this.ticks.length,r.ticks.maxTicksLimit),o=s.minRotation||0,l=s.maxRotation;let h=o;!this._isVisible()||!s.display||l<=o||n<=1||!this.isHorizontal()?this.labelRotation=o:(e=(t=this._getLabelSizes()).widest.width,i=t.highest.height,a=_limitValue(this.chart.width-e,0,this.maxWidth),(r.offset?this.maxWidth/n:a/(n-1))<e+6&&(a=a/(n-(r.offset?.5:1)),n=this.maxHeight-getTickMarkLength(r.grid)-s.padding-getTitleHeight(r.title,this.chart.options.font),s=Math.sqrt(e*e+i*i),h=toDegrees(Math.min(Math.asin(_limitValue((t.highest.height+6)/a,-1,1)),Math.asin(_limitValue(n/s,-1,1))-Math.asin(_limitValue(i/s,-1,1)))),h=Math.max(o,Math.min(l,h))),this.labelRotation=h)}afterCalculateLabelRotation(){callback(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){callback(this.options.beforeFit,[this])}fit(){var t,e,i,a,r,s={width:0,height:0},{chart:n,options:{ticks:o,title:l,grid:h}}=this,c=this._isVisible(),d=this.isHorizontal();c&&(c=getTitleHeight(l,n.options.font),d?(s.width=this.maxWidth,s.height=getTickMarkLength(h)+c):(s.height=this.maxHeight,s.width=getTickMarkLength(h)+c),o.display)&&this.ticks.length&&({first:l,last:h,widest:c,highest:t}=this._getLabelSizes(),e=2*o.padding,a=toRadians(this.labelRotation),i=Math.cos(a),a=Math.sin(a),d?(r=o.mirror?0:a*c.width+i*t.height,s.height=Math.min(this.maxHeight,s.height+r+e)):(r=o.mirror?0:i*c.width+a*t.height,s.width=Math.min(this.maxWidth,s.width+r+e)),this._calculatePadding(l,h,a,i)),this._handleMargins(),d?(this.width=this._length=n.width-this._margins.left-this._margins.right,this.height=s.height):(this.width=s.width,this.height=this._length=n.height-this._margins.top-this._margins.bottom)}_calculatePadding(i,a,r,s){var{ticks:{align:n,padding:o},position:l}=this.options,h=0!==this.labelRotation,l="top"!==l&&"x"===this.axis;if(this.isHorizontal()){var c=this.getPixelForTick(0)-this.left,d=this.right-this.getPixelForTick(this.ticks.length-1);let t=0,e=0;h?e=l?(t=s*i.width,r*a.height):(t=r*i.height,s*a.width):"start"===n?e=a.width:"end"===n?t=i.width:"inner"!==n&&(t=i.width/2,e=a.width/2),this.paddingLeft=Math.max((t-c+o)*this.width/(this.width-c),0),this.paddingRight=Math.max((e-d+o)*this.width/(this.width-d),0)}else{let t=a.height/2,e=i.height/2;"start"===n?(t=0,e=i.height):"end"===n&&(t=a.height,e=0),this.paddingTop=t+o,this.paddingBottom=e+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){callback(this.options.afterFit,[this])}isHorizontal(){var{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){this.beforeTickToLabelConversion(),this.generateTickLabels(t);let e,i;for(e=0,i=t.length;e<i;e++)isNullOrUndef(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let e=this._labelSizes;if(!e){var i=this.options.ticks.sampleSize;let t=this.ticks;i<t.length&&(t=sample(t,i)),this._labelSizes=e=this._computeLabelSizes(t,t.length,this.options.ticks.maxTicksLimit)}return e}_computeLabelSizes(t,e,i){var{ctx:a,_longestTextCache:r}=this;const s=[],n=[];var o=Math.floor(e/getTicksLimit(e,i));let l=0,h=0,c,d,u,p,g,f,m,v,b,_,x;for(c=0;c<e;c+=o){if(p=t[c].label,g=this._resolveTickFontOptions(c),a.font=f=g.string,m=r[f]=r[f]||{data:{},gc:[]},v=g.lineHeight,b=_=0,isNullOrUndef(p)||isArray(p)){if(isArray(p))for(d=0,u=p.length;d<u;++d)isNullOrUndef(x=p[d])||isArray(x)||(b=_measureText(a,m.data,m.gc,b,x),_+=v)}else b=_measureText(a,m.data,m.gc,b,p),_=v;s.push(b),n.push(_),l=Math.max(b,l),h=Math.max(_,h)}garbageCollect(r,e);var i=s.indexOf(l),y=n.indexOf(h),S=t=>({width:s[t]||0,height:n[t]||0});return{first:S(0),last:S(e-1),widest:S(i),highest:S(y),widths:s,heights:n}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);t=this._startPixel+t*this._length;return _int16Range(this._alignToPixels?_alignPixel(this.chart,t,0):t)}getDecimalForPixel(t){t=(t-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){var{min:t,max:e}=this;return t<0&&e<0?e:0<t&&0<e?t:0}getContext(t){var e=this.ticks||[];return 0<=t&&t<e.length?(e=e[t]).$context||(e.$context=createTickContext(this.getContext(),t,e)):this.$context||(this.$context=createScaleContext(this.chart.getContext(),this))}_tickSize(){var t=this.options.ticks,e=toRadians(this.labelRotation),i=Math.abs(Math.cos(e)),e=Math.abs(Math.sin(e)),a=this._getLabelSizes(),t=t.autoSkipPadding||0,r=a?a.widest.width+t:0,a=a?a.highest.height+t:0;return this.isHorizontal()?r*e<a*i?r/i:a/e:a*e<r*i?a/i:r/e}_isVisible(){var t=this.options.display;return"auto"!==t?!!t:0<this.getMatchingVisibleMetas().length}_computeGridLineItems(t){var e=this.axis;const i=this.chart;var a=this.options,{grid:r,position:s,border:n}=a,o=r.offset,l=this.isHorizontal(),h=this.ticks.length+(o?1:0),c=getTickMarkLength(r),d=[],u=n.setContext(this.getContext());const p=u.display?u.width:0;function g(t){return _alignPixel(i,t,p)}var f,m,u=p/2;let v,b,_,x,y,S,k,A,w,P,M,C;"top"===s?(v=g(this.bottom),S=this.bottom-c,A=v-u,P=g(t.top)+u,C=t.bottom):"bottom"===s?(v=g(this.top),P=t.top,C=g(t.bottom)-u,S=v+u,A=this.top+c):"left"===s?(v=g(this.right),y=this.right-c,k=v-u,w=g(t.left)+u,M=t.right):"right"===s?(v=g(this.left),w=t.left,M=g(t.right)-u,y=v+u,k=this.left+c):"x"===e?("center"===s?v=g((t.top+t.bottom)/2+.5):isObject(s)&&(m=s[f=Object.keys(s)[0]],v=g(this.chart.scales[f].getPixelForValue(m))),P=t.top,C=t.bottom,S=v+u,A=S+c):"y"===e&&("center"===s?v=g((t.left+t.right)/2):isObject(s)&&(m=s[f=Object.keys(s)[0]],v=g(this.chart.scales[f].getPixelForValue(m))),y=v-u,k=y-c,w=t.left,M=t.right);var e=valueOrDefault(a.ticks.maxTicksLimit,h),O=Math.max(1,Math.ceil(h/e));for(b=0;b<h;b+=O){var D=this.getContext(b),T=r.setContext(D),D=n.setContext(D),E=T.lineWidth,L=T.color,I=D.dash||[],D=D.dashOffset,R=T.tickWidth,F=T.tickColor,$=T.tickBorderDash||[],T=T.tickBorderDashOffset;void 0!==(_=getPixelForGridLine(this,b,o))&&(x=_alignPixel(i,_,E),l?y=k=w=M=x:S=A=P=C=x,d.push({tx1:y,ty1:S,tx2:k,ty2:A,x1:w,y1:P,x2:M,y2:C,width:E,color:L,borderDash:I,borderDashOffset:D,tickWidth:R,tickColor:F,tickBorderDash:$,tickBorderDashOffset:T}))}return this._ticksLength=h,this._borderValue=v,d}_computeLabelItems(t){var e,i=this.axis,a=this.options,{position:r,ticks:s}=a,n=this.isHorizontal(),o=this.ticks,{align:l,crossAlign:h,padding:c,mirror:d}=s,a=getTickMarkLength(a.grid),u=a+c,c=d?-c:u,p=-toRadians(this.labelRotation),g=[];let f,m,v,b,_,x,y,S,k,A,w,P="middle";"top"===r?(_=this.bottom-c,x=this._getXAxisLabelAlignment()):"bottom"===r?(_=this.top+c,x=this._getXAxisLabelAlignment()):"left"===r?(c=this._getYAxisLabelAlignment(a),x=c.textAlign,b=c.x):"right"===r?(c=this._getYAxisLabelAlignment(a),x=c.textAlign,b=c.x):"x"===i?("center"===r?_=(t.top+t.bottom)/2+u:isObject(r)&&(e=r[c=Object.keys(r)[0]],_=this.chart.scales[c].getPixelForValue(e)+u),x=this._getXAxisLabelAlignment()):"y"===i&&("center"===r?b=(t.left+t.right)/2-u:isObject(r)&&(e=r[c=Object.keys(r)[0]],b=this.chart.scales[c].getPixelForValue(e)),x=this._getYAxisLabelAlignment(a).textAlign),"y"===i&&("start"===l?P="top":"end"===l&&(P="bottom"));var M=this._getLabelSizes();for(f=0,m=o.length;f<m;++f){v=o[f].label;var C=s.setContext(this.getContext(f)),O=(y=this.getPixelForTick(f)+s.labelOffset,k=(S=this._resolveTickFontOptions(f)).lineHeight,(A=isArray(v)?v.length:1)/2),D=C.color,T=C.textStrokeColor,E=C.textStrokeWidth;let t=x;n?(b=y,"inner"===x&&(t=f===m-1?this.options.reverse?"left":"right":0===f?this.options.reverse?"right":"left":"center"),w="top"===r?"near"===h||0!=p?-A*k+k/2:"center"===h?-M.highest.height/2-O*k+k:-M.highest.height+k/2:"near"===h||0!=p?k/2:"center"===h?M.highest.height/2-O*k:M.highest.height-A*k,d&&(w*=-1),0==p||C.showLabelBackdrop||(b+=k/2*Math.sin(p))):(_=y,w=(1-A)*k/2);let i;if(C.showLabelBackdrop){var O=toPadding(C.backdropPadding),L=M.heights[f],I=M.widths[f];let t=w-O.top,e=0-O.left;switch(P){case"middle":t-=L/2;break;case"bottom":t-=L}switch(x){case"center":e-=I/2;break;case"right":e-=I;break;case"inner":f===m-1?e-=I:0<f&&(e-=I/2)}i={left:e,top:t,width:I+O.width,height:L+O.height,color:C.backdropColor}}g.push({label:v,font:S,textOffset:w,options:{rotation:p,color:D,strokeColor:T,strokeWidth:E,textAlign:t,textBaseline:P,translation:[b,_],backdrop:i}})}return g}_getXAxisLabelAlignment(){var{position:t,ticks:e}=this.options;if(-toRadians(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){var{position:e,ticks:{crossAlign:i,mirror:a,padding:r}}=this.options,t=t+r,s=this._getLabelSizes().widest.width;let n,o;return"left"===e?a?(o=this.right+r,"near"===i?n="left":"center"===i?(n="center",o+=s/2):(n="right",o+=s)):(o=this.right-t,"near"===i?n="right":"center"===i?(n="center",o-=s/2):(n="left",o=this.left)):"right"===e?a?(o=this.left+r,"near"===i?n="right":"center"===i?(n="center",o-=s/2):(n="left",o-=s)):(o=this.left+t,"near"===i?n="left":"center"===i?(n="center",o+=s/2):(n="right",o=this.right)):n="right",{textAlign:n,x:o}}_computeLabelArea(){var t,e;if(!this.options.ticks.mirror)return t=this.chart,"left"===(e=this.options.position)||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){var{ctx:t,options:{backgroundColor:e},left:i,top:a,width:r,height:s}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,a,r,s),t.restore())}getLineWidthForValue(e){var t,i=this.options.grid;return this._isVisible()&&i.display&&0<=(t=this.ticks.findIndex(t=>t.value===e))?i.setContext(this.getContext(t)).lineWidth:0}drawGrid(t){var e=this.options.grid;const a=this.ctx;var i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,s;var n=(t,e,i)=>{i.width&&i.color&&(a.save(),a.lineWidth=i.width,a.strokeStyle=i.color,a.setLineDash(i.borderDash||[]),a.lineDashOffset=i.borderDashOffset,a.beginPath(),a.moveTo(t.x,t.y),a.lineTo(e.x,e.y),a.stroke(),a.restore())};if(e.display)for(r=0,s=i.length;r<s;++r){var o=i[r];e.drawOnChartArea&&n({x:o.x1,y:o.y1},{x:o.x2,y:o.y2},o),e.drawTicks&&n({x:o.tx1,y:o.ty1},{x:o.tx2,y:o.ty2},{color:o.tickColor,width:o.tickWidth,borderDash:o.tickBorderDash,borderDashOffset:o.tickBorderDashOffset})}}drawBorder(){var{chart:r,ctx:s,options:{border:n,grid:o}}=this,l=n.setContext(this.getContext()),n=n.display?l.width:0;if(n){var o=o.setContext(this.getContext(0)).lineWidth,h=this._borderValue;let t,e,i,a;this.isHorizontal()?(t=_alignPixel(r,this.left,n)-n/2,e=_alignPixel(r,this.right,o)+o/2,i=a=h):(i=_alignPixel(r,this.top,n)-n/2,a=_alignPixel(r,this.bottom,o)+o/2,t=e=h),s.save(),s.lineWidth=l.width,s.strokeStyle=l.color,s.beginPath(),s.moveTo(t,i),s.lineTo(e,a),s.stroke(),s.restore()}}drawLabels(t){if(this.options.ticks.display){var e=this.ctx,i=this._computeLabelArea(),t=(i&&clipArea(e,i),this.getLabelItems(t));for(const s of t){var a=s.options,r=s.font;renderText(e,s.label,0,s.textOffset,r,a)}i&&unclipArea(e)}}drawTitle(){var{ctx:e,options:{position:i,title:a,reverse:r}}=this;if(a.display){var s=toFont(a.font),n=toPadding(a.padding),o=a.align;let t=s.lineHeight/2;"bottom"===i||"center"===i||isObject(i)?(t+=n.bottom,isArray(a.text)&&(t+=s.lineHeight*(a.text.length-1))):t+=n.top;var{titleX:n,titleY:l,maxWidth:h,rotation:c}=titleArgs(this,t,i,o);renderText(e,a.text,0,0,s,{color:a.color,maxWidth:h,rotation:c,textAlign:titleAlign(o,i,r),textBaseline:"middle",translation:[n,l]})}}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){var t=this.options,e=t.ticks&&t.ticks.z||0,i=valueOrDefault(t.grid&&t.grid.z,-1),t=valueOrDefault(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Scale.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:t,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){var e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",a=[];let r,s;for(r=0,s=e.length;r<s;++r){var n=e[r];n[i]!==this.id||t&&n.type!==t||a.push(n)}return a}_resolveTickFontOptions(t){return toFont(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){var t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class TypedRegistry{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){var e=Object.getPrototypeOf(t);let i;isIChartComponent(e)&&(i=this.register(e));var e=this.items,a=t.id,r=this.scope+"."+a;if(a)return a in e||(registerDefaults(e[a]=t,r,i),this.override&&defaults.override(t.id,t.overrides)),r;throw new Error("class does not have id: "+t)}get(t){return this.items[t]}unregister(t){var e=this.items,t=t.id,i=this.scope;t in e&&delete e[t],i&&t in defaults[i]&&(delete defaults[i][t],this.override)&&delete overrides[t]}}function registerDefaults(t,e,i){i=merge(Object.create(null),[i?defaults.get(i):{},defaults.get(e),t.defaults]);defaults.set(e,i),t.defaultRoutes&&routeDefaults(e,t.defaultRoutes),t.descriptors&&defaults.describe(e,t.descriptors)}function routeDefaults(r,s){Object.keys(s).forEach(t=>{var e=t.split("."),i=e.pop(),e=[r].concat(e).join("."),t=s[t].split("."),a=t.pop(),t=t.join(".");defaults.route(e,i,t,a)})}function isIChartComponent(t){return"id"in t&&"defaults"in t}class Registry{constructor(){this.controllers=new TypedRegistry(DatasetController,"datasets",!0),this.elements=new TypedRegistry(Element,"elements"),this.plugins=new TypedRegistry(Object,"plugins"),this.scales=new TypedRegistry(Scale,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(i,t,a){[...t].forEach(t=>{var e=a||this._getRegistryForType(t);a||e.isForType(t)||e===this.plugins&&t.id?this._exec(i,e,t):each(t,t=>{var e=a||this._getRegistryForType(t);this._exec(i,e,t)})})}_exec(t,e,i){var a=_capitalize(t);callback(i["before"+a],[],i),e[t](i),callback(i["after"+a],[],i)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){var i=this._typedRegistries[t];if(i.isForType(e))return i}return this.plugins}_get(t,e,i){e=e.get(t);if(void 0===e)throw new Error('"'+t+'" is not a registered '+i+".");return e}}var registry=new Registry;class PluginService{constructor(){this._init=[]}notify(t,e,i,a){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));a=a?this._descriptors(t).filter(a):this._descriptors(t),i=this._notify(a,t,e,i);return"afterDestroy"===e&&(this._notify(a,t,"stop"),this._notify(this._init,t,"uninstall")),i}_notify(t,e,i,a){a=a||{};for(const s of t){var r=s.plugin;if(!1===callback(r[i],[e,a,s.options],r)&&a.cancelable)return!1}return!0}invalidate(){isNullOrUndef(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){var e;return this._cache||(e=this._cache=this._createDescriptors(t),this._notifyStateChanges(t),e)}_createDescriptors(t,e){var i=t&&t.config,a=valueOrDefault(i.options&&i.options.plugins,{}),i=allPlugins(i);return!1!==a||e?createDescriptors(t,i,a,e):[]}_notifyStateChanges(t){var e=this._oldCache||[],i=this._cache,a=(t,i)=>t.filter(e=>!i.some(t=>e.plugin.id===t.plugin.id));this._notify(a(e,i),t,"stop"),this._notify(a(i,e),t,"start")}}function allPlugins(t){var e={},i=[],a=Object.keys(registry.plugins.items);for(let t=0;t<a.length;t++)i.push(registry.getPlugin(a[t]));var r=t.plugins||[];for(let t=0;t<r.length;t++){var s=r[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}function getOpts(t,e){return e||!1!==t?!0===t?{}:t:null}function createDescriptors(t,{plugins:e,localIds:i},a,r){var s=[],n=t.getContext();for(const h of e){var o=h.id,l=getOpts(a[o],r);null!==l&&s.push({plugin:h,options:pluginOpts(t.config,{plugin:h,local:i[o]},l,n)})}return s}function pluginOpts(t,{plugin:e,local:i},a,r){var s=t.pluginScopeKeys(e),a=t.getOptionScopes(a,s);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function getIndexAxis(t,e){var i=defaults.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function getAxisFromDefaultScaleID(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}function getDefaultScaleIDFromAxis(t,e){return t===e?"_index_":"_value_"}function idMatchesAxis(t){if("x"===t||"y"===t||"r"===t)return t}function axisFromPosition(t){return"top"===t||"bottom"===t?"x":"left"===t||"right"===t?"y":void 0}function determineAxis(t,...e){if(idMatchesAxis(t))return t;for(const a of e){var i=a.axis||axisFromPosition(a.position)||1<t.length&&idMatchesAxis(t[0].toLowerCase());if(i)return i}throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function getAxisFromDataset(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function retrieveAxisFromDatasets(e,t){if(t.data&&t.data.datasets){t=t.data.datasets.filter(t=>t.xAxisID===e||t.yAxisID===e);if(t.length)return getAxisFromDataset(e,"x",t[0])||getAxisFromDataset(e,"y",t[0])}return{}}function mergeScaleConfig(n,e){const s=overrides[n.type]||{scales:{}},o=e.scales||{},l=getIndexAxis(n.type,e),h=Object.create(null);return Object.keys(o).forEach(t=>{var e,i,a,r=o[t];return isObject(r)?r._proxy?console.warn("Ignoring resolver passed as options for scale: "+t):(i=getDefaultScaleIDFromAxis(e=determineAxis(t,r,retrieveAxisFromDatasets(t,n),defaults.scales[r.type]),l),a=s.scales||{},void(h[t]=mergeIf(Object.create(null),[{axis:e},r,a[e],a[i]]))):console.error("Invalid scale configuration for scale: "+t)}),n.data.datasets.forEach(a=>{var t=a.type||n.type;const r=a.indexAxis||getIndexAxis(t,e),s=(overrides[t]||{}).scales||{};Object.keys(s).forEach(t=>{var e=getAxisFromDefaultScaleID(t,r),i=a[e+"AxisID"]||e;h[i]=h[i]||Object.create(null),mergeIf(h[i],[{axis:e},o[i],s[t]])})}),Object.keys(h).forEach(t=>{t=h[t];mergeIf(t,[defaults.scales[t.type],defaults.scale])}),h}function initOptions(t){var e=t.options||(t.options={});e.plugins=valueOrDefault(e.plugins,{}),e.scales=mergeScaleConfig(t,e)}function initData(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}function initConfig(t){return(t=t||{}).data=initData(t.data),initOptions(t),t}const keyCache=new Map,keysCached=new Set;function cachedKeys(t,e){let i=keyCache.get(t);return i||(i=e(),keyCache.set(t,i),keysCached.add(i)),i}const addIfFound=(t,e,i)=>{e=resolveObjectKey(e,i);void 0!==e&&t.add(e)};class Config{constructor(t){this._config=initConfig(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=initData(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){var t=this._config;this.clearCache(),initOptions(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return cachedKeys(t,()=>[["datasets."+t,""]])}datasetAnimationScopeKeys(t,e){return cachedKeys(t+".transition."+e,()=>[[`datasets.${t}.transitions.`+e,"transitions."+e],["datasets."+t,""]])}datasetElementScopeKeys(t,e){return cachedKeys(t+"-"+e,()=>[[`datasets.${t}.elements.`+e,"datasets."+t,"elements."+e,""]])}pluginScopeKeys(t){const e=t.id;return cachedKeys(this.type+"-plugin-"+e,()=>[["plugins."+e,...t.additionalOptionScopes||[]]])}_cachedScopes(t,e){var i=this._scopeCache;let a=i.get(t);return a&&!e||(a=new Map,i.set(t,a)),a}getOptionScopes(e,t,i){const{options:a,type:r}=this;var i=this._cachedScopes(e,i),s=i.get(t);if(s)return s;const n=new Set;t.forEach(t=>{e&&(n.add(e),t.forEach(t=>addIfFound(n,e,t))),t.forEach(t=>addIfFound(n,a,t)),t.forEach(t=>addIfFound(n,overrides[r]||{},t)),t.forEach(t=>addIfFound(n,defaults,t)),t.forEach(t=>addIfFound(n,descriptors,t))});s=Array.from(n);return 0===s.length&&s.push(Object.create(null)),keysCached.has(t)&&i.set(t,s),s}chartOptionScopes(){var{options:t,type:e}=this;return[t,overrides[e]||{},defaults.datasets[e]||{},{type:e},defaults,descriptors]}resolveNamedOptions(t,e,i,a=[""]){var r={$shared:!0},{resolver:a,subPrefixes:s}=getResolver(this._resolverCache,t,a);let n=a;needContext(a,e)&&(r.$shared=!1,i=isFunction(i)?i():i,t=this.createResolver(t,i,s),n=_attachContext(a,i,t));for(const o of e)r[o]=n[o];return r}createResolver(t,e,i=[""],a){t=getResolver(this._resolverCache,t,i).resolver;return isObject(e)?_attachContext(t,e,void 0,a):t}}function getResolver(t,e,i){let a=t.get(e);a||(a=new Map,t.set(e,a));t=i.join();let r=a.get(t);return r||(e=_createResolver(e,i),r={resolver:e,subPrefixes:i.filter(t=>!t.toLowerCase().includes("hover"))},a.set(t,r)),r}const hasFunction=e=>isObject(e)&&Object.getOwnPropertyNames(e).some(t=>isFunction(e[t]));function needContext(t,e){var{isScriptable:i,isIndexable:a}=_descriptors(t);for(const o of e){var r=i(o),s=a(o),n=(s||r)&&t[o];if(r&&(isFunction(n)||hasFunction(n))||s&&isArray(n))return!0}return!1}var version="4.4.1";const KNOWN_POSITIONS=["top","bottom","left","right","chartArea"];function positionIsHorizontal(t,e){return"top"===t||"bottom"===t||-1===KNOWN_POSITIONS.indexOf(t)&&"x"===e}function compare2Level(i,a){return function(t,e){return t[i]===e[i]?t[a]-e[a]:t[i]-e[i]}}function onAnimationsComplete(t){var e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),callback(i&&i.onComplete,[t],e)}function onAnimationProgress(t){var e=t.chart,i=e.options.animation;callback(i&&i.onProgress,[t],e)}function getCanvas(t){return _isDomSupported()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t=t&&t.canvas?t.canvas:t}const instances={},getChart=t=>{const e=getCanvas(t);return Object.values(instances).filter(t=>t.canvas===e).pop()};function moveNumericKeys(t,e,i){for(const s of Object.keys(t)){var a,r=+s;e<=r&&(a=t[s],delete t[s],0<i||e<r)&&(t[r+i]=a)}}function determineLastEvent(t,e,i,a){return i&&"mouseout"!==t.type?a?e:t:null}function getSizeForArea(t,e,i){return(t.options.clip?t:e)[i]}function getDatasetArea(t,e){var{xScale:t,yScale:i}=t;return t&&i?{left:getSizeForArea(t,e,"left"),right:getSizeForArea(t,e,"right"),top:getSizeForArea(i,e,"top"),bottom:getSizeForArea(i,e,"bottom")}:e}class Chart{static defaults=defaults;static instances=instances;static overrides=overrides;static registry=registry;static version=version;static getChart=getChart;static register(...t){registry.add(...t),invalidatePlugins()}static unregister(...t){registry.remove(...t),invalidatePlugins()}constructor(t,e){var e=this.config=new Config(e),t=getCanvas(t),i=getChart(t);if(i)throw new Error("Canvas is already in use. Chart with ID '"+i.id+"' must be destroyed before the canvas with ID '"+i.canvas.id+"' can be reused.");var i=e.createResolver(e.chartOptionScopes(),this.getContext()),e=(this.platform=new(e.platform||_detectPlatform(t)),this.platform.updateConfig(e),this.platform.acquireContext(t,i.aspectRatio)),t=e&&e.canvas,a=t&&t.height,r=t&&t.width;this.id=uid(),this.ctx=e,this.canvas=t,this.width=r,this.height=a,this._options=i,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new PluginService,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=debounce(t=>this.update(t),i.resizeDelay||0),this._dataChanges=[],instances[this.id]=this,e&&t?(animator.listen(this,"complete",onAnimationsComplete),animator.listen(this,"progress",onAnimationProgress),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){var{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:a,_aspectRatio:r}=this;return isNullOrUndef(t)?e&&r?r:a?i/a:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return registry}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():retinaScale(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return clearCanvas(this.canvas,this.ctx),this}stop(){return animator.stop(this),this}resize(t,e){animator.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){var i=this.options,a=this.canvas,r=i.maintainAspectRatio&&this.aspectRatio,a=this.platform.getMaximumSize(a,t,e,r),t=i.devicePixelRatio||this.platform.getDevicePixelRatio(),e=this.width?"resize":"attach";this.width=a.width,this.height=a.height,this._aspectRatio=this.aspectRatio,retinaScale(this,t,!0)&&(this.notifyPlugins("resize",{size:a}),callback(i.onResize,[this,a],this),this.attached)&&this._doResize(e)&&this.render()}ensureScalesHaveIDs(){each(this.options.scales||{},(t,e)=>{t.id=e})}buildOrUpdateScales(){const n=this.options,a=n.scales,o=this.scales,l=Object.keys(o).reduce((t,e)=>(t[e]=!1,t),{});let t=[];each(t=a?t.concat(Object.keys(a).map(t=>{var e=a[t],t=determineAxis(t,e),i="r"===t,t="x"===t;return{options:e,dposition:i?"chartArea":t?"bottom":"left",dtype:i?"radialLinear":t?"category":"linear"}})):t,t=>{var e=t.options,i=e.id,a=determineAxis(i,e),r=valueOrDefault(e.type,t.dtype);void 0!==e.position&&positionIsHorizontal(e.position,a)===positionIsHorizontal(t.dposition)||(e.position=t.dposition),l[i]=!0;let s=null;i in o&&o[i].type===r?s=o[i]:(a=registry.getScale(r),s=new a({id:i,type:r,ctx:this.ctx,chart:this}),o[s.id]=s),s.init(e,n)}),each(l,(t,e)=>{t||delete o[e]}),each(o,t=>{layouts.configure(this,t,t.options),layouts.addBox(this,t)})}_updateMetasets(){var t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort((t,e)=>t.index-e.index),e<i){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(compare2Level("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:i}}=this;t.length>i.length&&delete this._stacks,t.forEach((e,t)=>{0===i.filter(t=>t===e._dataset).length&&this._destroyDatasetMeta(t)})}buildOrUpdateControllers(){var e=[],i=this.data.datasets;let a,t;for(this._removeUnreferencedMetasets(),a=0,t=i.length;a<t;a++){var r=i[a];let t=this.getDatasetMeta(a);var s,n=r.type||this.config.type;t.type&&t.type!==n&&(this._destroyDatasetMeta(a),t=this.getDatasetMeta(a)),t.type=n,t.indexAxis=r.indexAxis||getIndexAxis(n,this.options),t.order=r.order||0,t.index=a,t.label=""+r.label,t.visible=this.isDatasetVisible(a),t.controller?(t.controller.updateIndex(a),t.controller.linkScales()):(r=registry.getController(n),{datasetElementType:n,dataElementType:s}=defaults.datasets[n],Object.assign(r,{dataElementType:registry.getElement(s),datasetElementType:n&&registry.getElement(n)}),t.controller=new r(this,a),e.push(t.controller))}return this._updateMetasets(),e}_resetElements(){each(this.data.datasets,(t,e)=>{this.getDatasetMeta(e).controller.reset()},this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){var e=this.config,e=(e.update(),this._options=e.createResolver(e.chartOptionScopes(),this.getContext())),a=this._animationsDisabled=!e.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1!==this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0})){var r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let i=0;for(let t=0,e=this.data.datasets.length;t<e;t++){var s=this.getDatasetMeta(t)["controller"],n=!a&&-1===r.indexOf(s);s.buildOrUpdateElements(n),i=Math.max(+s.getMaxOverflow(),i)}i=this._minPadding=e.layout.autoPadding?i:0,this._updateLayout(i),a||each(r,t=>{t.reset()}),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(compare2Level("z","_idx"));var{_active:e,_lastEvent:t}=this;t?this._eventHandler(t,!0):e.length&&this._updateHoverStyles(e,e,!0),this.render()}}_updateScales(){each(this.scales,t=>{layouts.removeBox(this,t)}),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){var t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);setsEqual(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){var t,e,i,a=this["_hiddenIndices"];for({method:t,start:e,count:i}of this._getUniformDataChanges()||[]){var r="_removeElements"===t?-i:i;moveNumericKeys(a,e,r)}}_getUniformDataChanges(){const t=this._dataChanges;if(t&&t.length){this._dataChanges=[];var e=this.data.datasets.length,i=e=>new Set(t.filter(t=>t[0]===e).map((t,e)=>e+","+t.splice(1).join(","))),a=i(0);for(let t=1;t<e;t++)if(!setsEqual(a,i(t)))return;return Array.from(a).map(t=>t.split(",")).map(t=>({method:t[1],start:+t[2],count:+t[3]}))}}_updateLayout(t){if(!1!==this.notifyPlugins("beforeLayout",{cancelable:!0})){layouts.update(this,this.width,this.height,t);t=this.chartArea;const e=t.width<=0||t.height<=0;this._layers=[],each(this.boxes,t=>{e&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))},this),this._layers.forEach((t,e)=>{t._idx=e}),this.notifyPlugins("afterLayout")}}_updateDatasets(i){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:i,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let t=0,e=this.data.datasets.length;t<e;++t)this._updateDataset(t,isFunction(i)?i({datasetIndex:t}):i);this.notifyPlugins("afterDatasetsUpdate",{mode:i})}}_updateDataset(t,e){var i=this.getDatasetMeta(t),t={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",t)&&(i.controller._update(e),t.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",t))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(animator.has(this)?this.attached&&!animator.running(this)&&animator.start(this):(this.draw(),onAnimationsComplete({chart:this})))}draw(){let t;var e,i;if(this._resizeBeforeDraw&&({width:e,height:i}=this._resizeBeforeDraw,this._resize(e,i),this._resizeBeforeDraw=null),this.clear(),!(this.width<=0||this.height<=0)&&!1!==this.notifyPlugins("beforeDraw",{cancelable:!0})){var a=this._layers;for(t=0;t<a.length&&a[t].z<=0;++t)a[t].draw(this.chartArea);for(this._drawDatasets();t<a.length;++t)a[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}}_getSortedDatasetMetas(t){var e=this._sortedMetasets,i=[];let a,r;for(a=0,r=e.length;a<r;++a){var s=e[a];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1!==this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0})){var e=this.getSortedVisibleDatasetMetas();for(let t=e.length-1;0<=t;--t)this._drawDataset(e[t]);this.notifyPlugins("afterDatasetsDraw")}}_drawDataset(t){var e=this.ctx,i=t._clip,a=!i.disabled,r=getDatasetArea(t,this.chartArea),s={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",s)&&(a&&clipArea(e,{left:!1===i.left?0:r.left-i.left,right:!1===i.right?this.width:r.right+i.right,top:!1===i.top?0:r.top-i.top,bottom:!1===i.bottom?this.height:r.bottom+i.bottom}),t.controller.draw(),a&&unclipArea(e),s.cancelable=!1,this.notifyPlugins("afterDatasetDraw",s))}isPointInArea(t){return _isPointInArea(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,a){e=Interaction.modes[e];return"function"==typeof e?e(this,t,i,a):[]}getDatasetMeta(t){const e=this.data.datasets[t];var i=this._metasets;let a=i.filter(t=>t&&t._dataset===e).pop();return a||(a={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(a)),a}getContext(){return this.$context||(this.$context=createContext(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){var e=this.data.datasets[t];return!!e&&("boolean"==typeof(t=this.getDatasetMeta(t)).hidden?!t.hidden:!e.hidden)}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(e,t,i){const a=i?"show":"hide";var r=this.getDatasetMeta(e),s=r.controller._resolveAnimations(void 0,a);defined(t)?(r.data[t].hidden=!i,this.update()):(this.setDatasetVisibility(e,i),s.update(r,{visible:i}),this.update(t=>t.datasetIndex===e?a:void 0))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){var e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),animator.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");var{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),clearCanvas(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete instances[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const i=this._listeners,a=this.platform,e=(t,e)=>{a.addEventListener(this,t,e),i[t]=e},r=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};each(this.options.events,t=>e(t,r))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const i=this._responsiveListeners,a=this.platform,t=(t,e)=>{a.addEventListener(this,t,e),i[t]=e},e=(t,e)=>{i[t]&&(a.removeEventListener(this,t,e),delete i[t])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let s;const n=()=>{e("attach",n),this.attached=!0,this.resize(),t("resize",r),t("detach",s)};s=()=>{this.attached=!1,e("resize",r),this._stop(),this._resize(0,0),t("attach",n)},(a.isAttached(this.canvas)?n:s)()}unbindEvents(){each(this._listeners,(t,e)=>{this.platform.removeEventListener(this,e,t)}),this._listeners={},each(this._responsiveListeners,(t,e)=>{this.platform.removeEventListener(this,e,t)}),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){var a=i?"set":"remove";let r,s,n;for("dataset"===e&&this.getDatasetMeta(t[0].datasetIndex).controller["_"+a+"DatasetHoverStyle"](),s=0,n=t.length;s<n;++s){var o=(r=t[s])&&this.getDatasetMeta(r.datasetIndex).controller;o&&o[a+"HoverStyle"](r.element,r.datasetIndex,r.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){var e=this._active||[],t=t.map(({datasetIndex:t,index:e})=>{var i=this.getDatasetMeta(t);if(i)return{datasetIndex:t,element:i.data[e],index:e};throw new Error("No dataset found at index "+t)});_elementsEqual(t,e)||(this._active=t,this._lastEvent=null,this._updateHoverStyles(t,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(e){return 1===this._plugins._cache.filter(t=>t.plugin.id===e).length}_updateHoverStyles(t,e,i){var a=this.options.hover,r=(t,i)=>t.filter(e=>!i.some(t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)),s=r(e,t),i=i?t:r(t,e);s.length&&this.updateHoverStyle(s,a.mode,!1),i.length&&a.mode&&this.updateHoverStyle(i,a.mode,!0)}_eventHandler(e,t){var i={event:e,replay:t,cancelable:!0,inChartArea:this.isPointInArea(e)},a=t=>(t.options.events||this.options.events).includes(e.native.type);if(!1!==this.notifyPlugins("beforeEvent",i,a))return t=this._handleEvent(e,t,i.inChartArea),i.cancelable=!1,this.notifyPlugins("afterEvent",i,a),(t||i.changed)&&this.render(),this}_handleEvent(t,e,i){var{_active:a=[],options:r}=this,s=this._getActiveElements(t,a,i,e),n=_isClickEvent(t),o=determineLastEvent(t,this._lastEvent,i,n),i=(i&&(this._lastEvent=null,callback(r.onHover,[t,s,this],this),n)&&callback(r.onClick,[t,s,this],this),!_elementsEqual(s,a));return(i||e)&&(this._active=s,this._updateHoverStyles(s,a,e)),this._lastEvent=o,i}_getActiveElements(t,e,i,a){return"mouseout"===t.type?[]:i?(i=this.options.hover,this.getElementsAtEventForMode(t,i.mode,i,a)):e}}function invalidatePlugins(){return each(Chart.instances,t=>t._plugins.invalidate())}function clipArc(t,e,i){var{startAngle:e,pixelMargin:a,x:r,y:s,outerRadius:n,innerRadius:o}=e,l=a/n;t.beginPath(),t.arc(r,s,n,e-l,i+l),a<o?t.arc(r,s,o,i+(l=a/o),e-l,!0):t.arc(r,s,a,i+HALF_PI,e-HALF_PI),t.closePath(),t.clip()}function toRadiusCorners(t){return _readValueToProps(t,["outerStart","outerEnd","innerStart","innerEnd"])}function parseBorderRadius$1(t,e,i,a){t=toRadiusCorners(t.options.borderRadius);const r=(i-e)/2;var e=Math.min(r,a*e/2),s=t=>{var e=(i-Math.min(r,t))*a/2;return _limitValue(t,0,Math.min(r,e))};return{outerStart:s(t.outerStart),outerEnd:s(t.outerEnd),innerStart:_limitValue(t.innerStart,0,e),innerEnd:_limitValue(t.innerEnd,0,e)}}function rThetaToXY(t,e,i,a){return{x:i+t*Math.cos(e),y:a+t*Math.sin(e)}}function pathArc(t,e,i,a,r,s){var{x:n,y:o,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+a+i-h,0),h=0<c?c+a+i+h:0;let u=0;var p=r-l,c=(a&&(c=((0<c?c-a:0)+(0<d?d-a:0))/2,u=(p-(0!=c?p*c/(c+a):p))/2),Math.max(.001,p*d-i/PI)/d),a=(p-c)/2,i=l+a+u,p=r-a-u,{outerStart:c,outerEnd:l,innerStart:r,innerEnd:a}=parseBorderRadius$1(e,h,d,p-i),e=d-c,g=d-l,f=i+c/e,m=p-l/g,v=h+r,b=h+a,_=i+r/v,x=p-a/b;t.beginPath(),s?(t.arc(n,o,d,f,s=(f+m)/2),t.arc(n,o,d,s,m),0<l&&(s=rThetaToXY(g,m,n,o),t.arc(s.x,s.y,l,m,p+HALF_PI)),g=rThetaToXY(b,p,n,o),t.lineTo(g.x,g.y),0<a&&(s=rThetaToXY(b,x,n,o),t.arc(s.x,s.y,a,p+HALF_PI,x+Math.PI)),t.arc(n,o,h,p-a/h,l=(p-a/h+(i+r/h))/2,!0),t.arc(n,o,h,l,i+r/h,!0),0<r&&(g=rThetaToXY(v,_,n,o),t.arc(g.x,g.y,r,_+Math.PI,i-HALF_PI)),b=rThetaToXY(e,i,n,o),t.lineTo(b.x,b.y),0<c&&(s=rThetaToXY(e,f,n,o),t.arc(s.x,s.y,c,i-HALF_PI,f))):(t.moveTo(n,o),x=Math.cos(f)*d+n,p=Math.sin(f)*d+o,t.lineTo(x,p),a=Math.cos(m)*d+n,l=Math.sin(m)*d+o,t.lineTo(a,l)),t.closePath()}function drawArc(e,t,i,a,r){var{fullCircles:s,startAngle:n,circumference:o}=t;let l=t.endAngle;if(s){pathArc(e,t,i,a,l,r);for(let t=0;t<s;++t)e.fill();isNaN(o)||(l=n+(o%TAU||TAU))}return pathArc(e,t,i,a,l,r),e.fill(),l}function drawBorder(e,i,a,r,s){var{fullCircles:n,startAngle:o,circumference:l,options:h}=i,{borderWidth:c,borderJoinStyle:d,borderDash:u,borderDashOffset:p}=h,h="inner"===h.borderAlign;if(c){e.setLineDash(u||[]),e.lineDashOffset=p,h?(e.lineWidth=2*c,e.lineJoin=d||"round"):(e.lineWidth=c,e.lineJoin=d||"bevel");let t=i.endAngle;if(n){pathArc(e,i,a,r,t,s);for(let t=0;t<n;++t)e.stroke();isNaN(l)||(t=o+(l%TAU||TAU))}h&&clipArc(e,i,t),n||(pathArc(e,i,a,r,t,s),e.stroke())}}class ArcElement extends Element{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){var{angle:t,distance:e}=getAngleFromPoint(this.getProps(["x","y"],i),{x:t,y:e}),{startAngle:i,endAngle:a,innerRadius:r,outerRadius:s,circumference:n}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),o=(this.options.spacing+this.options.borderWidth)/2,n=valueOrDefault(n,a-i)>=TAU||_angleBetween(t,i,a),t=_isBetween(e,r+o,s+o);return n&&t}getCenterPoint(t){var{x:t,y:e,startAngle:i,endAngle:a,innerRadius:r,outerRadius:s}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:n,spacing:o}=this.options,i=(i+a)/2,a=(r+s+o+n)/2;return{x:t+Math.cos(i)*a,y:e+Math.sin(i)*a}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){var e,{options:i,circumference:a}=this,r=(i.offset||0)/4,s=(i.spacing||0)/2,n=i.circular;this.pixelMargin="inner"===i.borderAlign?.33:0,this.fullCircles=a>TAU?Math.floor(a/TAU):0,0===a||this.innerRadius<0||this.outerRadius<0||(t.save(),e=(this.startAngle+this.endAngle)/2,t.translate(Math.cos(e)*r,Math.sin(e)*r),e=r*(1-Math.sin(Math.min(PI,a||0))),t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor,drawArc(t,this,e,s,n),drawBorder(t,this,e,s,n),t.restore())}}function setStyle(t,e,i=e){t.lineCap=valueOrDefault(i.borderCapStyle,e.borderCapStyle),t.setLineDash(valueOrDefault(i.borderDash,e.borderDash)),t.lineDashOffset=valueOrDefault(i.borderDashOffset,e.borderDashOffset),t.lineJoin=valueOrDefault(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=valueOrDefault(i.borderWidth,e.borderWidth),t.strokeStyle=valueOrDefault(i.borderColor,e.borderColor)}function lineTo(t,e,i){t.lineTo(i.x,i.y)}function getLineMethod(t){return t.stepped?_steppedLineTo:t.tension||"monotone"===t.cubicInterpolationMode?_bezierCurveTo:lineTo}function pathVars(t,e,i={}){var t=t.length,{start:i=0,end:a=t-1}=i,{start:r,end:s}=e,n=Math.max(i,r),o=Math.min(a,s);return{count:t,start:n,loop:e.loop,ilen:o<n&&!(i<r&&a<r||s<i&&s<a)?t+o-n:o-n}}function pathSegment(t,e,i,a){var{points:r,options:s}=e,{count:n,start:o,loop:e,ilen:l}=pathVars(r,i,a),h=getLineMethod(s);let{move:c=!0,reverse:d}=a||{},u,p,g;for(u=0;u<=l;++u)(p=r[(o+(d?l-u:u))%n]).skip||(c?(t.moveTo(p.x,p.y),c=!1):h(t,g,p,d,s.stepped),g=p);return e&&(p=r[(o+(d?l:0))%n],h(t,g,p,d,s.stepped)),!!e}function fastPathSegment(t,e,i,a){var r=e.points;const{count:s,start:n,ilen:o}=pathVars(r,i,a),{move:l=!0,reverse:h}=a||{};let c=0,d=0,u,p,g,f,m,v;var b,_,x,y=t=>(n+(h?o-t:t))%s,S=()=>{f!==m&&(t.lineTo(c,m),t.lineTo(c,f),t.lineTo(c,v))};for(l&&(p=r[y(0)],t.moveTo(p.x,p.y)),u=0;u<=o;++u)(p=r[y(u)]).skip||(b=p.x,_=p.y,(x=0|b)===g?(_<f?f=_:_>m&&(m=_),c=(d*c+b)/++d):(S(),t.lineTo(b,_),g=x,d=0,f=m=_),v=_);S()}function _getSegmentMethod(t){var e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?fastPathSegment:pathSegment}function _getInterpolationMethod(t){return t.stepped?_steppedInterpolation:t.tension||"monotone"===t.cubicInterpolationMode?_bezierInterpolation:_pointInLine}function strokePathWithCache(t,e,i,a){let r=e._path;r||(r=e._path=new Path2D,e.path(r,i,a)&&r.closePath()),setStyle(t,e.options),t.stroke(r)}function strokePathDirect(t,e,i,a){var{segments:r,options:s}=e,n=_getSegmentMethod(e);for(const o of r)setStyle(t,s,o.style),t.beginPath(),n(t,e,o,{start:i,end:i+a-1})&&t.closePath(),t.stroke()}const usePath2D="function"==typeof Path2D;function draw(t,e,i,a){(usePath2D&&!e.options.segment?strokePathWithCache:strokePathDirect)(t,e,i,a)}class LineElement extends Element{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){var i,a=this.options;!a.tension&&"monotone"!==a.cubicInterpolationMode||a.stepped||this._pointsUpdated||(i=a.spanGaps?this._loop:this._fullLoop,_updateBezierControlPoints(this._points,a,t,i,e),this._pointsUpdated=!0)}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=_computeSegments(this,this.options.segment))}first(){var t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){var t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(i,a){var r=this.options,s=i[a],n=this.points,o=_boundSegments(this,{property:a,start:s,end:s});if(o.length){var l=[],h=_getInterpolationMethod(r);let t,e;for(t=0,e=o.length;t<e;++t){var{start:c,end:d}=o[t],c=n[c],d=n[d];c===d?l.push(c):((d=h(c,d,Math.abs((s-c[a])/(d[a]-c[a])),r.stepped))[a]=i[a],l.push(d))}return 1===l.length?l[0]:l}}pathSegment(t,e,i){return _getSegmentMethod(this)(t,this,e,i)}path(t,e,i){var a=this.segments,r=_getSegmentMethod(this);let s=this._loop;e=e||0,i=i||this.points.length-e;for(const n of a)s&=r(t,this,n,{start:e,end:e+i-1});return!!s}draw(t,e,i,a){var r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),draw(t,this,i,a),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function inRange$1(t,e,i,a){var r=t.options,{[i]:t}=t.getProps([i],a);return Math.abs(e-t)<r.radius+r.hitRadius}class PointElement extends Element{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){var a=this.options,{x:i,y:r}=this.getProps(["x","y"],i);return Math.pow(t-i,2)+Math.pow(e-r,2)<Math.pow(a.hitRadius+a.radius,2)}inXRange(t,e){return inRange$1(this,t,"x",e)}inYRange(t,e){return inRange$1(this,t,"y",e)}getCenterPoint(t){var{x:t,y:e}=this.getProps(["x","y"],t);return{x:t,y:e}}size(t){var e=(t=t||this.options||{}).radius||0;return 2*((e=Math.max(e,e&&t.hoverRadius||0))+(e&&t.borderWidth||0))}draw(t,e){var i=this.options;this.skip||i.radius<.1||!_isPointInArea(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,drawPoint(t,i,this.x,this.y))}getRange(){var t=this.options||{};return t.radius+t.hitRadius}}function getBarBounds(t,e){var{x:e,y:i,base:a,width:r,height:s}=t.getProps(["x","y","base","width","height"],e);let n,o,l,h,c;return h=t.horizontal?(c=s/2,n=Math.min(e,a),o=Math.max(e,a),l=i-c,i+c):(c=r/2,n=e-c,o=e+c,l=Math.min(i,a),Math.max(i,a)),{left:n,top:l,right:o,bottom:h}}function skipOrLimit(t,e,i,a){return t?0:_limitValue(e,i,a)}function parseBorderWidth(t,e,i){var a=t.options.borderWidth,t=t.borderSkipped,a=toTRBL(a);return{t:skipOrLimit(t.top,a.top,0,i),r:skipOrLimit(t.right,a.right,0,e),b:skipOrLimit(t.bottom,a.bottom,0,i),l:skipOrLimit(t.left,a.left,0,e)}}function parseBorderRadius(t,e,i){var a=t.getProps(["enableBorderRadius"])["enableBorderRadius"],r=t.options.borderRadius,s=toTRBLCorners(r),e=Math.min(e,i),i=t.borderSkipped,t=a||isObject(r);return{topLeft:skipOrLimit(!t||i.top||i.left,s.topLeft,0,e),topRight:skipOrLimit(!t||i.top||i.right,s.topRight,0,e),bottomLeft:skipOrLimit(!t||i.bottom||i.left,s.bottomLeft,0,e),bottomRight:skipOrLimit(!t||i.bottom||i.right,s.bottomRight,0,e)}}function boundingRects(t){var e=getBarBounds(t),i=e.right-e.left,a=e.bottom-e.top,r=parseBorderWidth(t,i/2,a/2),t=parseBorderRadius(t,i/2,a/2);return{outer:{x:e.left,y:e.top,w:i,h:a,radius:t},inner:{x:e.left+r.l,y:e.top+r.t,w:i-r.l-r.r,h:a-r.t-r.b,radius:{topLeft:Math.max(0,t.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,t.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,t.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,t.bottomRight-Math.max(r.b,r.r))}}}}function inRange(t,e,i,a){var r=null===e,s=null===i,t=t&&!(r&&s)&&getBarBounds(t,a);return t&&(r||_isBetween(e,t.left,t.right))&&(s||_isBetween(i,t.top,t.bottom))}function hasRadius(t){return t.topLeft||t.topRight||t.bottomLeft||t.bottomRight}function addNormalRectPath(t,e){t.rect(e.x,e.y,e.w,e.h)}function inflateRect(t,e,i={}){var a=t.x!==i.x?-e:0,r=t.y!==i.y?-e:0,s=(t.x+t.w!==i.x+i.w?e:0)-a,i=(t.y+t.h!==i.y+i.h?e:0)-r;return{x:t.x+a,y:t.y+r,w:t.w+s,h:t.h+i,radius:t.radius}}class BarElement extends Element{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){var{inflateAmount:e,options:{borderColor:i,backgroundColor:a}}=this,{inner:r,outer:s}=boundingRects(this),n=hasRadius(s.radius)?addRoundedRectPath:addNormalRectPath;t.save(),s.w===r.w&&s.h===r.h||(t.beginPath(),n(t,inflateRect(s,e,r)),t.clip(),n(t,inflateRect(r,-e,s)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),n(t,inflateRect(r,e)),t.fillStyle=a,t.fill(),t.restore()}inRange(t,e,i){return inRange(this,t,e,i)}inXRange(t,e){return inRange(this,t,null,e)}inYRange(t,e){return inRange(this,null,t,e)}getCenterPoint(t){var{x:t,y:e,base:i,horizontal:a}=this.getProps(["x","y","base","horizontal"],t);return{x:a?(t+i)/2:t,y:a?e:(e+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}var elements=Object.freeze({__proto__:null,ArcElement:ArcElement,BarElement:BarElement,LineElement:LineElement,PointElement:PointElement});const BORDER_COLORS=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],BACKGROUND_COLORS=BORDER_COLORS.map(t=>t.replace("rgb(","rgba(").replace(")",", 0.5)"));function getBorderColor(t){return BORDER_COLORS[t%BORDER_COLORS.length]}function getBackgroundColor(t){return BACKGROUND_COLORS[t%BACKGROUND_COLORS.length]}function colorizeDefaultDataset(t,e){return t.borderColor=getBorderColor(e),t.backgroundColor=getBackgroundColor(e),++e}function colorizeDoughnutDataset(t,e){return t.backgroundColor=t.data.map(()=>getBorderColor(e++)),e}function colorizePolarAreaDataset(t,e){return t.backgroundColor=t.data.map(()=>getBackgroundColor(e++)),e}function getColorizer(i){let a=0;return(t,e)=>{e=i.getDatasetMeta(e).controller;e instanceof DoughnutController?a=colorizeDoughnutDataset(t,a):e instanceof PolarAreaController?a=colorizePolarAreaDataset(t,a):e&&(a=colorizeDefaultDataset(t,a))}}function containsColorsDefinitions(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}function containsColorsDefinition(t){return t&&(t.borderColor||t.backgroundColor)}var plugin_colors={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){var a,r,s;i.enabled&&({data:{datasets:a},options:r}=t.config,s=r["elements"],!i.forceOverride&&(containsColorsDefinitions(a)||containsColorsDefinition(r)||s&&containsColorsDefinitions(s))||(i=getColorizer(t),a.forEach(i)))}};function lttbDecimation(a,r,s,t,e){var i=e.samples||t;if(s<=i)return a.slice(r,r+s);var n=[],o=(s-2)/(i-2);let l=0;e=r+s-1;let h=r,c,d,u,p,g;for(n[l++]=a[h],c=0;c<i-2;c++){let t=0,e=0,i;var f=Math.floor((c+1)*o)+1+r,m=Math.min(Math.floor((c+2)*o)+1,s)+r,v=m-f;for(i=f;i<m;i++)t+=a[i].x,e+=a[i].y;t/=v,e/=v;var f=Math.floor(c*o)+1+r,b=Math.min(Math.floor((c+1)*o)+1,s)+r,{x:_,y:x}=a[h];for(u=-1,i=f;i<b;i++)(p=.5*Math.abs((_-t)*(a[i].y-x)-(_-a[i].x)*(e-x)))>u&&(u=p,d=a[i],g=i);n[l++]=d,h=g}return n[l++]=a[e],n}function minMaxDecimation(t,e,i,a){let r=0,s=0,n,o,l,h,c,d,u,p,g,f;var m=[],v=t[e].x,b=t[e+i-1].x-v;for(n=e;n<e+i;++n){l=((o=t[n]).x-v)/b*a,h=o.y;var _,x,y,S=0|l;S===c?(h<g?(g=h,d=n):h>f&&(f=h,u=n),r=(s*r+o.x)/++s):(_=n-1,isNullOrUndef(d)||isNullOrUndef(u)||(x=Math.min(d,u),y=Math.max(d,u),x!==p&&x!==_&&m.push({...t[x],x:r}),y!==p&&y!==_&&m.push({...t[y],x:r})),0<n&&_!==p&&m.push(t[_]),m.push(o),c=S,s=0,g=f=h,d=u=p=n)}return m}function cleanDecimatedDataset(t){var e;t._decimated&&(e=t._data,delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e}))}function cleanDecimatedData(t){t.data.datasets.forEach(t=>{cleanDecimatedDataset(t)})}function getStartAndCountOfVisiblePointsSimplified(t,e){var i=e.length;let a=0,r;var t=t["iScale"],{min:s,max:n,minDefined:o,maxDefined:l}=t.getUserBounds();return o&&(a=_limitValue(_lookupByKey(e,t.axis,s).lo,0,i-1)),r=l?_limitValue(_lookupByKey(e,t.axis,n).hi+1,a,i)-a:i-a,{start:a,count:r}}var plugin_decimation={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(o,t,l)=>{if(l.enabled){const h=o.width;o.data.datasets.forEach((e,t)=>{var{_data:i,indexAxis:a}=e,t=o.getDatasetMeta(t),r=i||e.data;if("y"!==resolve([a,o.options.indexAxis])&&t.controller.supportsDecimation){a=o.scales[t.xAxisID];if(("linear"===a.type||"time"===a.type)&&!o.options.parsing){var{start:s,count:n}=getStartAndCountOfVisiblePointsSimplified(t,r);if(n<=(l.threshold||4*h))cleanDecimatedDataset(e);else{isNullOrUndef(i)&&(e._data=r,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}}));let t;switch(l.algorithm){case"lttb":t=lttbDecimation(r,s,n,h,l);break;case"min-max":t=minMaxDecimation(r,s,n,h);break;default:throw new Error(`Unsupported decimation algorithm '${l.algorithm}'`)}e._decimated=t}}}})}else cleanDecimatedData(o)},destroy(t){cleanDecimatedData(t)}};function _segments(t,e,i){var a=t.segments,r=t.points,s=e.points,n=[];for(const d of a){var{start:o,end:l}=d,l=_findSegmentEnd(o,l,r),h=_getBounds(i,r[o],r[l],d.loop);if(e.segments)for(const u of _boundSegments(e,h)){var c=_getBounds(i,s[u.start],s[u.end],u.loop);for(const p of _boundSegment(d,r,c))n.push({source:p,target:u,start:{[i]:_getEdge(h,c,"start",Math.max)},end:{[i]:_getEdge(h,c,"end",Math.min)}})}else n.push({source:d,target:h,start:r[o],end:r[l]})}return n}function _getBounds(i,a,r,t){if(!t){let t=a[i],e=r[i];return"angle"===i&&(t=_normalizeAngle(t),e=_normalizeAngle(e)),{property:i,start:t,end:e}}}function _pointsFromSegments(t,e){const{x:i=null,y:a=null}=t||{},r=e.points,s=[];return e.segments.forEach(({start:t,end:e})=>{e=_findSegmentEnd(t,e,r);t=r[t],e=r[e];null!==a?(s.push({x:t.x,y:a}),s.push({x:e.x,y:a})):null!==i&&(s.push({x:i,y:t.y}),s.push({x:i,y:e.y}))}),s}function _findSegmentEnd(t,e,i){for(;t<e;e--){var a=i[e];if(!isNaN(a.x)&&!isNaN(a.y))break}return e}function _getEdge(t,e,i,a){return t&&e?a(t[i],e[i]):t?t[i]:e?e[i]:0}function _createBoundaryLine(t,e){let i=[],a=!1;return(i=isArray(t)?(a=!0,t):_pointsFromSegments(t,e)).length?new LineElement({points:i,options:{tension:0},_loop:a,_fullLoop:a}):null}function _shouldApplyFill(t){return t&&!1!==t.fill}function _resolveTarget(t,e,i){let a=t[e].fill;var r,s=[e];if(!i)return a;for(;!1!==a&&-1===s.indexOf(a);){if(!isNumberFinite(a))return a;if(!(r=t[a]))return!1;if(r.visible)return a;s.push(a),a=r.fill}return!1}function _decodeFill(t,e,i){var a,t=parseFillOption(t);return isObject(t)?!isNaN(t.value)&&t:isNumberFinite(a=parseFloat(t))&&Math.floor(a)===a?decodeTargetIndex(t[0],e,a,i):0<=["origin","start","end","stack","shape"].indexOf(t)&&t}function decodeTargetIndex(t,e,i,a){return!((i="-"!==t&&"+"!==t?i:e+i)===e||i<0||a<=i)&&i}function _getTargetPixel(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:isObject(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}function _getTargetValue(t,e,i){let a;return a="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:isObject(t)?t.value:e.getBaseValue()}function parseFillOption(t){var t=t.options,e=t.fill;let i=valueOrDefault(e&&e.target,e);return!1!==(i=void 0===i?!!t.backgroundColor:i)&&null!==i&&(!0===i?"origin":i)}function _buildStackLine(t){var{scale:t,index:e,line:i}=t,a=[],r=i.segments,s=i.points,n=getLinesBelow(t,e);n.push(_createBoundaryLine({x:null,y:t.bottom},i));for(let t=0;t<r.length;t++){var o=r[t];for(let t=o.start;t<=o.end;t++)addPointsBelow(a,s[t],n)}return new LineElement({points:a,options:{}})}function getLinesBelow(t,e){var i=[],a=t.getMatchingVisibleMetas("line");for(let t=0;t<a.length;t++){var r=a[t];if(r.index===e)break;r.hidden||i.unshift(r.dataset)}return i}function addPointsBelow(e,i,a){var r=[];for(let t=0;t<a.length;t++){var{first:s,last:n,point:o}=findPoint(a[t],i,"x");if(!(!o||s&&n))if(s)r.unshift(o);else if(e.push(o),!n)break}e.push(...r)}function findPoint(t,e,i){e=t.interpolate(e,i);if(!e)return{};var a=e[i],r=t.segments,s=t.points;let n=!1,o=!1;for(let t=0;t<r.length;t++){var l=r[t],h=s[l.start][i],l=s[l.end][i];if(_isBetween(a,h,l)){n=a===h,o=a===l;break}}return{first:n,last:o,point:e}}class simpleArc{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){var{x:a,y:r,radius:s}=this;return e=e||{start:0,end:TAU},t.arc(a,r,s,e.end,e.start,!0),!i.bounds}interpolate(t){var{x:e,y:i,radius:a}=this,t=t.angle;return{x:e+Math.cos(t)*a,y:i+Math.sin(t)*a,angle:t}}}function _getTarget(t){var{chart:e,fill:i,line:a}=t;return isNumberFinite(i)?getLineByIndex(e,i):"stack"===i?_buildStackLine(t):"shape"===i||((e=computeBoundary(t))instanceof simpleArc?e:_createBoundaryLine(e,a))}function getLineByIndex(t,e){var i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}function computeBoundary(t){return((t.scale||{}).getPointPositionForValue?computeCircularBoundary:computeLinearBoundary)(t)}function computeLinearBoundary(t){var{scale:t={},fill:e}=t,e=_getTargetPixel(e,t);return isNumberFinite(e)?{x:(t=t.isHorizontal())?e:null,y:t?null:e}:null}function computeCircularBoundary(t){var{scale:e,fill:t}=t,i=e.options,a=e.getLabels().length,r=i.reverse?e.max:e.min,s=_getTargetValue(t,e,r),n=[];if(i.grid.circular)return t=e.getPointPositionForValue(0,r),new simpleArc({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(s)});for(let t=0;t<a;++t)n.push(e.getPointPositionForValue(t,s));return n}function _drawfill(t,e,i){var a=_getTarget(e),{line:e,scale:r,axis:s}=e,n=e.options,o=n.fill,n=n.backgroundColor,{above:o=n,below:n=n}=o||{};a&&e.points.length&&(clipArea(t,i),doFill(t,{line:e,target:a,above:o,below:n,area:i,scale:r,axis:s}),unclipArea(t))}function doFill(t,e){var{line:i,target:a,above:r,below:s,area:n,scale:o}=e,e=i._loop?"angle":e.axis;t.save(),"x"===e&&s!==r&&(clipVertical(t,a,n.top),fill(t,{line:i,target:a,color:r,scale:o,property:e}),t.restore(),t.save(),clipVertical(t,a,n.bottom)),fill(t,{line:i,target:a,color:s,scale:o,property:e}),t.restore()}function clipVertical(t,e,i){var{segments:a,points:r}=e;let s=!0,n=!1;t.beginPath();for(const c of a){var{start:o,end:l}=c,h=r[o],o=r[_findSegmentEnd(o,l,r)];s?(t.moveTo(h.x,h.y),s=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),(n=!!e.pathSegment(t,c,{move:n}))?t.closePath():t.lineTo(o.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function fill(e,t){var i,a,r,s,{line:n,target:o,property:l,color:h,scale:c}=t;for({source:i,target:a,start:r,end:s}of _segments(n,o,l)){var{style:{backgroundColor:d=h}={}}=i,u=!0!==o,d=(e.save(),e.fillStyle=d,clipBounds(e,c,u&&_getBounds(l,r,s)),e.beginPath(),!!n.pathSegment(e,i));let t;!u||(d?e.closePath():interpolatedLineTo(e,o,s,l),u=!!o.pathSegment(e,a,{move:d,reverse:!0}),t=d&&u)||interpolatedLineTo(e,o,r,l),e.closePath(),e.fill(t?"evenodd":"nonzero"),e.restore()}}function clipBounds(t,e,i){var{top:e,bottom:a}=e.chart.chartArea,{property:i,start:r,end:s}=i||{};"x"===i&&(t.beginPath(),t.rect(r,e,s-r,a-e),t.clip())}function interpolatedLineTo(t,e,i,a){e=e.interpolate(i,a);e&&t.lineTo(e.x,e.y)}var index={id:"filler",afterDatasetsUpdate(t,e,i){var a=(t.data.datasets||[]).length,r=[];let s,n,o,l;for(n=0;n<a;++n)o=(s=t.getDatasetMeta(n)).dataset,l=null,o&&o.options&&o instanceof LineElement&&(l={visible:t.isDatasetVisible(n),index:n,fill:_decodeFill(o,n,a),chart:t,axis:s.controller.options.indexAxis,scale:s.vScale,line:o}),s.$filler=l,r.push(l);for(n=0;n<a;++n)(l=r[n])&&!1!==l.fill&&(l.fill=_resolveTarget(r,n,i.propagate))},beforeDraw(e,t,i){var a="beforeDraw"===i.drawTime,r=e.getSortedVisibleDatasetMetas(),s=e.chartArea;for(let t=r.length-1;0<=t;--t){var n=r[t].$filler;n&&(n.line.updateControlPoints(s,n.axis),a)&&n.fill&&_drawfill(e.ctx,n,s)}},beforeDatasetsDraw(e,t,i){if("beforeDatasetsDraw"===i.drawTime){var a=e.getSortedVisibleDatasetMetas();for(let t=a.length-1;0<=t;--t){var r=a[t].$filler;_shouldApplyFill(r)&&_drawfill(e.ctx,r,e.chartArea)}}},beforeDatasetDraw(t,e,i){e=e.meta.$filler;_shouldApplyFill(e)&&"beforeDatasetDraw"===i.drawTime&&_drawfill(t.ctx,e,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const getBoxSize=(t,e)=>{let{boxHeight:i=e,boxWidth:a=e}=t;return t.usePointStyle&&(i=Math.min(i,e),a=t.pointStyleWidth||Math.min(a,e)),{boxWidth:a,boxHeight:i,itemHeight:Math.max(e,i)}},itemsEqual=(t,e)=>null!==t&&null!==e&&t.datasetIndex===e.datasetIndex&&t.index===e.index;class Legend extends Element{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const i=this.options.labels||{};let t=callback(i.generateLabels,[this.chart],this)||[];i.filter&&(t=t.filter(t=>i.filter(t,this.chart.data))),i.sort&&(t=t.sort((t,e)=>i.sort(t,e,this.chart.data))),this.options.reverse&&t.reverse(),this.legendItems=t}fit(){var{options:i,ctx:a}=this;if(i.display){var r=i.labels,s=toFont(r.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:r,itemHeight:l}=getBoxSize(r,n);let t,e;a.font=s.string,this.isHorizontal()?(t=this.maxWidth,e=this._fitRows(o,n,r,l)+10):(e=this.maxHeight,t=this._fitCols(o,s,r,l)+10),this.width=Math.min(t,i.maxWidth||this.maxWidth),this.height=Math.min(e,i.maxHeight||this.maxHeight)}else this.width=this.height=0}_fitRows(t,i,a,r){const{ctx:s,maxWidth:n,options:{labels:{padding:o}}}=this,l=this.legendHitBoxes=[],h=this.lineWidths=[0],c=r+o;let d=t,u=(s.textAlign="left",s.textBaseline="middle",-1),p=-c;return this.legendItems.forEach((t,e)=>{t=a+i/2+s.measureText(t.text).width;(0===e||h[h.length-1]+t+2*o>n)&&(d+=c,h[h.length-(0<e?0:1)]=0,p+=c,u++),l[e]={left:0,top:p,row:u,width:t,height:r},h[h.length-1]+=t+o}),d}_fitCols(t,a,r,s){const{ctx:n,maxHeight:e,options:{labels:{padding:o}}}=this,l=this.legendHitBoxes=[],h=this.columnSizes=[],c=e-t;let d=o,u=0,p=0,g=0,f=0;return this.legendItems.forEach((t,e)=>{var{itemWidth:t,itemHeight:i}=calculateItemSize(r,a,n,t,s);0<e&&p+i+2*o>c&&(d+=u+o,h.push({width:u,height:p}),g+=u+o,f++,u=p=0),l[e]={left:g,top:p,col:f,width:t,height:i},u=Math.max(u,t),p+=i+o}),d+=u,h.push({width:u,height:p}),d}adjustHitBoxes(){if(this.options.display){var i=this._computeTitleHeight(),{legendHitBoxes:a,options:{align:r,labels:{padding:s},rtl:t}}=this,n=getRtlAdapter(t,this.left,this.width);if(this.isHorizontal()){let t=0,e=_alignStartEnd(r,this.left+s,this.right-this.lineWidths[t]);for(const o of a)t!==o.row&&(t=o.row,e=_alignStartEnd(r,this.left+s,this.right-this.lineWidths[t])),o.top+=this.top+i+s,o.left=n.leftForLtr(n.x(e),o.width),e+=o.width+s}else{let t=0,e=_alignStartEnd(r,this.top+i+s,this.bottom-this.columnSizes[t].height);for(const l of a)l.col!==t&&(t=l.col,e=_alignStartEnd(r,this.top+i+s,this.bottom-this.columnSizes[t].height)),l.top=e,l.left+=this.left+s,l.left=n.leftForLtr(n.x(l.left),l.width),e+=l.height+s}}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){var t;this.options.display&&(clipArea(t=this.ctx,this),this._draw(),unclipArea(t))}_draw(){const{options:u,columnSizes:p,lineWidths:g,ctx:f}=this,{align:m,labels:v}=u,b=defaults.color,_=getRtlAdapter(u.rtl,this.left,this.width),x=toFont(v.font),y=v["padding"],S=x.size,k=S/2;let A;this.drawTitle(),f.textAlign=_.textAlign("left"),f.textBaseline="middle",f.lineWidth=.5,f.font=x.string;const{boxWidth:w,boxHeight:P,itemHeight:M}=getBoxSize(v,S),C=this.isHorizontal(),O=this._computeTitleHeight(),D=(A=C?{x:_alignStartEnd(m,this.left+y,this.right-g[0]),y:this.top+y+O,line:0}:{x:this.left+y,y:_alignStartEnd(m,this.top+O+y,this.bottom-p[0].height),line:0},overrideTextDirection(this.ctx,u.textDirection),M+y);this.legendItems.forEach((t,e)=>{f.strokeStyle=t.fontColor,f.fillStyle=t.fontColor;var i=f.measureText(t.text).width,a=_.textAlign(t.textAlign||(t.textAlign=v.textAlign)),i=w+k+i;let r=A.x,s=A.y;_.setWidth(this.width),C?0<e&&r+i+y>this.right&&(s=A.y+=D,A.line++,r=A.x=_alignStartEnd(m,this.left+y,this.right-g[A.line])):0<e&&s+D>this.bottom&&(r=A.x=r+p[A.line].width+y,A.line++,s=A.y=_alignStartEnd(m,this.top+O+y,this.bottom-p[A.line].height));var n,o,l,h,c,d,e=_.x(r);e=e,h=s,c=t,isNaN(w)||w<=0||isNaN(P)||P<0||(f.save(),n=valueOrDefault(c.lineWidth,1),f.fillStyle=valueOrDefault(c.fillStyle,b),f.lineCap=valueOrDefault(c.lineCap,"butt"),f.lineDashOffset=valueOrDefault(c.lineDashOffset,0),f.lineJoin=valueOrDefault(c.lineJoin,"miter"),f.lineWidth=n,f.strokeStyle=valueOrDefault(c.strokeStyle,b),f.setLineDash(valueOrDefault(c.lineDash,[])),v.usePointStyle?(o={radius:P*Math.SQRT2/2,pointStyle:c.pointStyle,rotation:c.rotation,borderWidth:n},l=_.xPlus(e,w/2),d=h+k,drawPointLegend(f,o,l,d,v.pointStyleWidth&&w)):(o=h+Math.max((S-P)/2,0),l=_.leftForLtr(e,w),d=toTRBLCorners(c.borderRadius),f.beginPath(),Object.values(d).some(t=>0!==t)?addRoundedRectPath(f,{x:l,y:o,w:w,h:P,radius:d}):f.rect(l,o,w,P),f.fill(),0!==n&&f.stroke()),f.restore()),r=_textX(a,r+w+k,C?r+i:this.right,u.rtl),h=_.x(r),e=s,c=t,renderText(f,c.text,h,e+M/2,x,{strikethrough:c.hidden,textAlign:_.textAlign(c.textAlign)}),C?A.x+=i+y:"string"!=typeof t.text?(d=x.lineHeight,A.y+=calculateLegendItemHeight(t,d)+y):A.y+=D}),restoreTextDirection(this.ctx,u.textDirection)}drawTitle(){var a=this.options,r=a.title,s=toFont(r.font),n=toPadding(r.padding);if(r.display){var o=getRtlAdapter(a.rtl,this.left,this.width),l=this.ctx,h=r.position,c=s.size/2,n=n.top+c;let t,e=this.left,i=this.width;this.isHorizontal()?(i=Math.max(...this.lineWidths),t=this.top+n,e=_alignStartEnd(a.align,e,this.right-i)):(c=this.columnSizes.reduce((t,e)=>Math.max(t,e.height),0),t=n+_alignStartEnd(a.align,this.top,this.bottom-c-a.labels.padding-this._computeTitleHeight()));n=_alignStartEnd(h,e,e+i);l.textAlign=o.textAlign(_toLeftRightCenter(h)),l.textBaseline="middle",l.strokeStyle=r.color,l.fillStyle=r.color,l.font=s.string,renderText(l,r.text,n,t,s)}}_computeTitleHeight(){var t=this.options.title,e=toFont(t.font),i=toPadding(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,a,r;if(_isBetween(t,this.left,this.right)&&_isBetween(e,this.top,this.bottom))for(r=this.legendHitBoxes,i=0;i<r.length;++i)if(_isBetween(t,(a=r[i]).left,a.left+a.width)&&_isBetween(e,a.top,a.top+a.height))return this.legendItems[i];return null}handleEvent(t){var e,i,a,r=this.options;isListened(t.type,r)&&(e=this._getLegendItemAt(t.x,t.y),"mousemove"===t.type||"mouseout"===t.type?(i=this._hoveredItem,a=itemsEqual(i,e),i&&!a&&callback(r.onLeave,[t,i,this],this),(this._hoveredItem=e)&&!a&&callback(r.onHover,[t,e,this],this)):e&&callback(r.onClick,[t,e,this],this))}}function calculateItemSize(t,e,i,a,r){return{itemWidth:calculateItemWidth(a,t,e,i),itemHeight:calculateItemHeight(r,a,e.lineHeight)}}function calculateItemWidth(t,e,i,a){let r=t.text;return r&&"string"!=typeof r&&(r=r.reduce((t,e)=>t.length>e.length?t:e)),e+i.size/2+a.measureText(r).width}function calculateItemHeight(t,e,i){let a=t;return a="string"!=typeof e.text?calculateLegendItemHeight(e,i):a}function calculateLegendItemHeight(t,e){return e*(t.text?t.text.length:0)}function isListened(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}var plugin_legend={id:"legend",_element:Legend,start(t,e,i){var a=t.legend=new Legend({ctx:t.ctx,options:i,chart:t});layouts.configure(t,a,i),layouts.addBox(t,a)},stop(t){layouts.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){var a=t.legend;layouts.configure(t,a,i),a.options=i},afterUpdate(t){t=t.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){var a=e.datasetIndex,i=i.chart;i.isDatasetVisible(a)?(i.hide(a),e.hidden=!0):(i.show(a),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const a=t.data.datasets,{usePointStyle:r,pointStyle:s,textAlign:n,color:o,useBorderRadius:l,borderRadius:h}=t.legend.options["labels"];return t._getSortedDatasetMetas().map(t=>{var e=t.controller.getStyle(r?0:void 0),i=toPadding(e.borderWidth);return{text:a[t.index].label,fillStyle:e.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:(i.width+i.height)/4,strokeStyle:e.borderColor,pointStyle:s||e.pointStyle,rotation:e.rotation,textAlign:n||e.textAlign,borderRadius:l&&(h||e.borderRadius),datasetIndex:t.index}},this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Title extends Element{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){var i=this.options;this.left=0,this.top=0,i.display?(this.width=this.right=t,this.height=this.bottom=e,t=isArray(i.text)?i.text.length:1,this._padding=toPadding(i.padding),e=t*toFont(i.font).lineHeight+this._padding.height,this.isHorizontal()?this.height=e:this.width=e):this.width=this.height=this.right=this.bottom=0}isHorizontal(){var t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){var{top:e,left:i,bottom:a,right:r,options:s}=this,n=s.align;let o=0,l,h,c;return l=this.isHorizontal()?(h=_alignStartEnd(n,i,r),c=e+t,r-i):(o="left"===s.position?(h=i+t,c=_alignStartEnd(n,a,e),-.5*PI):(h=r-t,c=_alignStartEnd(n,e,a),.5*PI),a-e),{titleX:h,titleY:c,maxWidth:l,rotation:o}}draw(){var t,e,i,a,r,s=this.ctx,n=this.options;n.display&&(e=(t=toFont(n.font)).lineHeight/2+this._padding.top,{titleX:e,titleY:i,maxWidth:a,rotation:r}=this._drawArgs(e),renderText(s,n.text,0,0,t,{color:n.color,maxWidth:a,rotation:r,textAlign:_toLeftRightCenter(n.align),textBaseline:"middle",translation:[e,i]}))}}function createTitle(t,e){var i=new Title({ctx:t.ctx,options:e,chart:t});layouts.configure(t,i,e),layouts.addBox(t,i),t.titleBlock=i}var plugin_title={id:"title",_element:Title,start(t,e,i){createTitle(t,i)},stop(t){var e=t.titleBlock;layouts.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){var a=t.titleBlock;layouts.configure(t,a,i),a.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const map=new WeakMap;var plugin_subtitle={id:"subtitle",start(t,e,i){var a=new Title({ctx:t.ctx,options:i,chart:t});layouts.configure(t,a,i),layouts.addBox(t,a),map.set(t,a)},stop(t){layouts.removeBox(t,map.get(t)),map.delete(t)},beforeUpdate(t,e,i){var a=map.get(t);layouts.configure(t,a,i),a.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const positioners={average(t){if(!t.length)return!1;let e,i,a=0,r=0,s=0;for(e=0,i=t.length;e<i;++e){var n=t[e].element;n&&n.hasValue()&&(n=n.tooltipPosition(),a+=n.x,r+=n.y,++s)}return{x:a/s,y:r/s}},nearest(t,e){if(!t.length)return!1;let i=e.x,a=e.y,r=Number.POSITIVE_INFINITY,s,n,o;for(s=0,n=t.length;s<n;++s){var l,h=t[s].element;h&&h.hasValue()&&(l=distanceBetweenPoints(e,h.getCenterPoint()))<r&&(r=l,o=h)}var c;return o&&(c=o.tooltipPosition(),i=c.x,a=c.y),{x:i,y:a}}};function pushOrConcat(t,e){return e&&(isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function splitNewlines(t){return("string"==typeof t||t instanceof String)&&-1<t.indexOf("\n")?t.split("\n"):t}function createTooltipItem(t,e){var{element:e,datasetIndex:i,index:a}=e,r=t.getDatasetMeta(i).controller,{label:s,value:n}=r.getLabelAndValue(a);return{chart:t,label:s,parsed:r.getParsed(a),raw:t.data.datasets[i].data[a],formattedValue:n,dataset:r.getDataset(),dataIndex:a,datasetIndex:i,element:e}}function getTooltipSize(t,e){const i=t.chart.ctx;var{body:a,footer:r,title:s}=t,{boxWidth:n,boxHeight:o}=e,l=toFont(e.bodyFont),h=toFont(e.titleFont),c=toFont(e.footerFont),s=s.length,r=r.length,d=a.length,u=toPadding(e.padding);let p=u.height,g=0;var f=a.reduce((t,e)=>t+e.before.length+e.lines.length+e.after.length,0);f+=t.beforeBody.length+t.afterBody.length,s&&(p+=s*h.lineHeight+(s-1)*e.titleSpacing+e.titleMarginBottom),f&&(s=e.displayColors?Math.max(o,l.lineHeight):l.lineHeight,p+=d*s+(f-d)*l.lineHeight+(f-1)*e.bodySpacing),r&&(p+=e.footerMarginTop+r*c.lineHeight+(r-1)*e.footerSpacing);let m=0;function v(t){g=Math.max(g,i.measureText(t).width+m)}return i.save(),i.font=h.string,each(t.title,v),i.font=l.string,each(t.beforeBody.concat(t.afterBody),v),m=e.displayColors?n+2+e.boxPadding:0,each(a,t=>{each(t.before,v),each(t.lines,v),each(t.after,v)}),m=0,i.font=c.string,each(t.footer,v),i.restore(),{width:g+=u.width,height:p}}function determineYAlign(t,e){var{y:e,height:i}=e;return e<i/2?"top":e>t.height-i/2?"bottom":"center"}function doesNotFitWithAlign(t,e,i,a){var{x:a,width:r}=a,i=i.caretSize+i.caretPadding;return"left"===t&&a+r+i>e.width||"right"===t&&a-r-i<0||void 0}function determineXAlign(t,e,i,a){var{x:r,width:s}=i,{width:n,chartArea:{left:o,right:l}}=t;let h="center";return"center"===a?h=r<=(o+l)/2?"left":"right":r<=s/2?h="left":n-s/2<=r&&(h="right"),h=doesNotFitWithAlign(h,t,e,i)?"center":h}function determineAlignment(t,e,i){var a=i.yAlign||e.yAlign||determineYAlign(t,i);return{xAlign:i.xAlign||e.xAlign||determineXAlign(t,e,i,a),yAlign:a}}function alignX(t,e){let{x:i,width:a}=t;return"right"===e?i-=a:"center"===e&&(i-=a/2),i}function alignY(t,e,i){let{y:a,height:r}=t;return"top"===e?a+=i:a-="bottom"===e?r+i:r/2,a}function getBackgroundPoint(t,e,i,a){var{caretSize:t,caretPadding:r,cornerRadius:s}=t,{xAlign:i,yAlign:n}=i,r=t+r,{topLeft:s,topRight:o,bottomLeft:l,bottomRight:h}=toTRBLCorners(s);let c=alignX(e,i);var d=alignY(e,n,r);return"center"===n?"left"===i?c+=r:"right"===i&&(c-=r):"left"===i?c-=Math.max(s,l)+t:"right"===i&&(c+=Math.max(o,h)+t),{x:_limitValue(c,0,a.width-e.width),y:_limitValue(d,0,a.height-e.height)}}function getAlignedX(t,e,i){i=toPadding(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function getBeforeAfterBodyLines(t){return pushOrConcat([],splitNewlines(t))}function createTooltipContext(t,e,i){return createContext(t,{tooltip:e,tooltipItems:i,type:"tooltip"})}function overrideCallbacks(t,e){e=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return e?t.override(e):t}const defaultCallbacks={beforeTitle:noop,title(t){if(0<t.length){var t=t[0],e=t.chart.data.labels,i=e?e.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(0<i&&t.dataIndex<i)return e[t.dataIndex]}return""},afterTitle:noop,beforeBody:noop,beforeLabel:noop,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");t=t.formattedValue;return isNullOrUndef(t)||(e+=t),e},labelColor(t){t=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){t=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:noop,afterBody:noop,beforeFooter:noop,footer:noop,afterFooter:noop};function invokeCallbackWithFallback(t,e,i,a){t=t[e].call(i,a);return void 0===t?defaultCallbacks[e].call(i,a):t}class Tooltip extends Element{static positioners=positioners;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){var t,e=this._cachedAnimations;return e||(e=this.chart,e=(t=this.options.setContext(this.getContext())).enabled&&e.options.animation&&t.animations,t=new Animations(this.chart,e),e._cacheable&&(this._cachedAnimations=Object.freeze(t)),t)}getContext(){return this.$context||(this.$context=createTooltipContext(this.chart.getContext(),this,this._tooltipItems))}getTitle(t,e){var e=e["callbacks"],i=invokeCallbackWithFallback(e,"beforeTitle",this,t),a=invokeCallbackWithFallback(e,"title",this,t),e=invokeCallbackWithFallback(e,"afterTitle",this,t),t=pushOrConcat([],splitNewlines(i));return t=pushOrConcat(t,splitNewlines(a)),pushOrConcat(t,splitNewlines(e))}getBeforeBody(t,e){return getBeforeAfterBodyLines(invokeCallbackWithFallback(e.callbacks,"beforeBody",this,t))}getBody(t,e){const a=e["callbacks"],r=[];return each(t,t=>{var e={before:[],lines:[],after:[]},i=overrideCallbacks(a,t);pushOrConcat(e.before,splitNewlines(invokeCallbackWithFallback(i,"beforeLabel",this,t))),pushOrConcat(e.lines,invokeCallbackWithFallback(i,"label",this,t)),pushOrConcat(e.after,splitNewlines(invokeCallbackWithFallback(i,"afterLabel",this,t))),r.push(e)}),r}getAfterBody(t,e){return getBeforeAfterBodyLines(invokeCallbackWithFallback(e.callbacks,"afterBody",this,t))}getFooter(t,e){var e=e["callbacks"],i=invokeCallbackWithFallback(e,"beforeFooter",this,t),a=invokeCallbackWithFallback(e,"footer",this,t),e=invokeCallbackWithFallback(e,"afterFooter",this,t),t=pushOrConcat([],splitNewlines(i));return t=pushOrConcat(t,splitNewlines(a)),pushOrConcat(t,splitNewlines(e))}_createItems(a){var t=this._active;const r=this.chart.data,i=[],s=[],n=[];let e=[],o,l;for(o=0,l=t.length;o<l;++o)e.push(createTooltipItem(this.chart,t[o]));return a.filter&&(e=e.filter((t,e,i)=>a.filter(t,e,i,r))),each(e=a.itemSort?e.sort((t,e)=>a.itemSort(t,e,r)):e,t=>{var e=overrideCallbacks(a.callbacks,t);i.push(invokeCallbackWithFallback(e,"labelColor",this,t)),s.push(invokeCallbackWithFallback(e,"labelPointStyle",this,t)),n.push(invokeCallbackWithFallback(e,"labelTextColor",this,t))}),this.labelColors=i,this.labelPointStyles=s,this.labelTextColors=n,this.dataPoints=e}update(t,e){var i,a,r,s=this.options.setContext(this.getContext()),n=this._active;let o,l=[];n.length?(n=positioners[s.position].call(this,n,this._eventPosition),l=this._createItems(s),this.title=this.getTitle(l,s),this.beforeBody=this.getBeforeBody(l,s),this.body=this.getBody(l,s),this.afterBody=this.getAfterBody(l,s),this.footer=this.getFooter(l,s),i=this._size=getTooltipSize(this,s),r=getBackgroundPoint(s,a=Object.assign({},n,i),a=determineAlignment(this.chart,s,a),this.chart),this.xAlign=a.xAlign,this.yAlign=a.yAlign,o={opacity:1,x:r.x,y:r.y,width:i.width,height:i.height,caretX:n.x,caretY:n.y}):0!==this.opacity&&(o={opacity:0}),this._tooltipItems=l,this.$context=void 0,o&&this._resolveAnimations().update(this,o),t&&s.external&&s.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,a){t=this.getCaretPosition(t,i,a);e.lineTo(t.x1,t.y1),e.lineTo(t.x2,t.y2),e.lineTo(t.x3,t.y3)}getCaretPosition(t,e,i){var{xAlign:a,yAlign:r}=this,{caretSize:i,cornerRadius:s}=i,{topLeft:s,topRight:n,bottomLeft:o,bottomRight:l}=toTRBLCorners(s),{x:t,y:h}=t,{width:e,height:c}=e;let d,u,p,g,f,m;return"center"===r?(f=h+c/2,m="left"===a?(d=t,u=d-i,g=f+i,f-i):(d=t+e,u=d+i,g=f-i,f+i),p=d):(u="left"===a?t+Math.max(s,o)+i:"right"===a?t+e-Math.max(n,l)-i:this.caretX,p="top"===r?(g=h,f=g-i,d=u-i,u+i):(g=h+c,f=g+i,d=u+i,u-i),m=g),{x1:d,x2:u,x3:p,y1:g,y2:f,y3:m}}drawTitle(t,e,i){var a=this.title,r=a.length;let s,n,o;if(r){var l=getRtlAdapter(i.rtl,this.x,this.width);for(t.x=getAlignedX(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",s=toFont(i.titleFont),n=i.titleSpacing,e.fillStyle=i.titleColor,e.font=s.string,o=0;o<r;++o)e.fillText(a[o],l.x(t.x),t.y+s.lineHeight/2),t.y+=s.lineHeight+n,o+1===r&&(t.y+=i.titleMarginBottom-n)}}_drawColorBox(t,e,i,a,r){var s,n=this.labelColors[i],o=this.labelPointStyles[i],{boxHeight:l,boxWidth:h}=r,c=toFont(r.bodyFont),d=getAlignedX(this,"left",r),d=a.x(d),c=l<c.lineHeight?(c.lineHeight-l)/2:0,e=e.y+c;r.usePointStyle?(c={radius:Math.min(h,l)/2,pointStyle:o.pointStyle,rotation:o.rotation,borderWidth:1},o=a.leftForLtr(d,h)+h/2,s=e+l/2,t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,drawPoint(t,c,o,s),t.strokeStyle=n.borderColor,t.fillStyle=n.backgroundColor,drawPoint(t,c,o,s)):(t.lineWidth=isObject(n.borderWidth)?Math.max(...Object.values(n.borderWidth)):n.borderWidth||1,t.strokeStyle=n.borderColor,t.setLineDash(n.borderDash||[]),t.lineDashOffset=n.borderDashOffset||0,c=a.leftForLtr(d,h),o=a.leftForLtr(a.xPlus(d,1),h-2),s=toTRBLCorners(n.borderRadius),Object.values(s).some(t=>0!==t)?(t.beginPath(),t.fillStyle=r.multiKeyBackground,addRoundedRectPath(t,{x:c,y:e,w:h,h:l,radius:s}),t.fill(),t.stroke(),t.fillStyle=n.backgroundColor,t.beginPath(),addRoundedRectPath(t,{x:o,y:e+1,w:h-2,h:l-2,radius:s}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(c,e,h,l),t.strokeRect(c,e,h,l),t.fillStyle=n.backgroundColor,t.fillRect(o,e+1,h-2,l-2))),t.fillStyle=this.labelTextColors[i]}drawBody(e,i,t){var a=this["body"];const{bodySpacing:r,bodyAlign:s,displayColors:n,boxHeight:o,boxWidth:l,boxPadding:h}=t;var c=toFont(t.bodyFont);let d=c.lineHeight,u=0;const p=getRtlAdapter(t.rtl,this.x,this.width);function g(t){i.fillText(t,p.x(e.x+u),e.y+d/2),e.y+=d+r}var f=p.textAlign(s);let m,v,b,_,x,y,S;for(i.textAlign=s,i.textBaseline="middle",i.font=c.string,e.x=getAlignedX(this,f,t),i.fillStyle=t.bodyColor,each(this.beforeBody,g),u=n&&"right"!==f?"center"===s?l/2+h:l+2+h:0,_=0,y=a.length;_<y;++_){for(m=a[_],v=this.labelTextColors[_],i.fillStyle=v,each(m.before,g),b=m.lines,n&&b.length&&(this._drawColorBox(i,e,_,p,t),d=Math.max(c.lineHeight,o)),x=0,S=b.length;x<S;++x)g(b[x]),d=c.lineHeight;each(m.after,g)}u=0,d=c.lineHeight,each(this.afterBody,g),e.y-=r}drawFooter(t,e,i){var a=this.footer,r=a.length;let s,n;if(r){var o=getRtlAdapter(i.rtl,this.x,this.width);for(t.x=getAlignedX(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=o.textAlign(i.footerAlign),e.textBaseline="middle",s=toFont(i.footerFont),e.fillStyle=i.footerColor,e.font=s.string,n=0;n<r;++n)e.fillText(a[n],o.x(t.x),t.y+s.lineHeight/2),t.y+=s.lineHeight+i.footerSpacing}}drawBackground(t,e,i,a){var{xAlign:r,yAlign:s}=this,{x:n,y:o}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:p}=toTRBLCorners(a.cornerRadius);e.fillStyle=a.backgroundColor,e.strokeStyle=a.borderColor,e.lineWidth=a.borderWidth,e.beginPath(),e.moveTo(n+c,o),"top"===s&&this.drawCaret(t,e,i,a),e.lineTo(n+l-d,o),e.quadraticCurveTo(n+l,o,n+l,o+d),"center"===s&&"right"===r&&this.drawCaret(t,e,i,a),e.lineTo(n+l,o+h-p),e.quadraticCurveTo(n+l,o+h,n+l-p,o+h),"bottom"===s&&this.drawCaret(t,e,i,a),e.lineTo(n+u,o+h),e.quadraticCurveTo(n,o+h,n,o+h-u),"center"===s&&"left"===r&&this.drawCaret(t,e,i,a),e.lineTo(n,o+c),e.quadraticCurveTo(n,o,n+c,o),e.closePath(),e.fill(),0<a.borderWidth&&e.stroke()}_updateAnimationTarget(t){var e,i,a,r=this.chart,s=this.$animations,n=s&&s.x,s=s&&s.y;(n||s)&&(e=positioners[t.position].call(this,this._active,this._eventPosition))&&(i=this._size=getTooltipSize(this,t),a=getBackgroundPoint(t,a=Object.assign({},e,this._size),t=determineAlignment(r,t,a),r),n._to===a.x&&s._to===a.y||(this.xAlign=t.xAlign,this.yAlign=t.yAlign,this.width=i.width,this.height=i.height,this.caretX=e.x,this.caretY=e.y,this._resolveAnimations().update(this,a)))}_willRender(){return!!this.opacity}draw(t){var e,i,a,r,s=this.options.setContext(this.getContext()),n=this.opacity;n&&(this._updateAnimationTarget(s),e={width:this.width,height:this.height},i={x:this.x,y:this.y},n=Math.abs(n)<.001?0:n,a=toPadding(s.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length,s.enabled)&&r&&(t.save(),t.globalAlpha=n,this.drawBackground(i,t,e,s),overrideTextDirection(t,s.textDirection),i.y+=a.top,this.drawTitle(i,t,s),this.drawBody(i,t,s),this.drawFooter(i,t,s),restoreTextDirection(t,s.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){var i=this._active,t=t.map(({datasetIndex:t,index:e})=>{var i=this.chart.getDatasetMeta(t);if(i)return{datasetIndex:t,element:i.data[e],index:e};throw new Error("Cannot find a dataset at index "+t)}),i=!_elementsEqual(i,t),a=this._positionChanged(t,e);(i||a)&&(this._active=t,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;var a=this.options,r=this._active||[],i=this._getActiveElements(t,r,e,i),s=this._positionChanged(i,t),r=e||!_elementsEqual(i,r)||s;return r&&(this._active=i,a.enabled||a.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e)),r}_getActiveElements(t,e,i,a){var r=this.options;return"mouseout"===t.type?[]:a?(a=this.chart.getElementsAtEventForMode(t,r.mode,r,i),r.reverse&&a.reverse(),a):e.filter(t=>this.chart.data.datasets[t.datasetIndex]&&void 0!==this.chart.getDatasetMeta(t.datasetIndex).controller.getParsed(t.index))}_positionChanged(t,e){var{caretX:i,caretY:a,options:r}=this,r=positioners[r.position].call(this,t,e);return!1!==r&&(i!==r.x||a!==r.y)}}var plugin_tooltip={id:"tooltip",_element:Tooltip,positioners:positioners,afterInit(t,e,i){i&&(t.tooltip=new Tooltip({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){var e,i=t.tooltip;i&&i._willRender()&&!(e={tooltip:i})!==t.notifyPlugins("beforeTooltipDraw",{...e,cancelable:!0})&&(i.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",e))},afterEvent(t,e){var i;t.tooltip&&(i=e.replay,t.tooltip.handleEvent(e.event,i,e.inChartArea))&&(e.changed=!0)},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:defaultCallbacks},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},plugins=Object.freeze({__proto__:null,Colors:plugin_colors,Decimation:plugin_decimation,Filler:index,Legend:plugin_legend,SubTitle:plugin_subtitle,Title:plugin_title,Tooltip:plugin_tooltip});const addIfString=(t,e,i,a)=>("string"==typeof e?(i=t.push(e)-1,a.unshift({index:i,label:e})):isNaN(e)&&(i=null),i);function findOrAddLabel(t,e,i,a){var r=t.indexOf(e);return-1===r?addIfString(t,e,i,a):r!==t.lastIndexOf(e)?i:r}const validIndex=(t,e)=>null===t?null:_limitValue(Math.round(t),0,e);function _getLabelForValue(t){var e=this.getLabels();return 0<=t&&t<e.length?e[t]:t}class CategoryScale extends Scale{static id="category";static defaults={ticks:{callback:_getLabelForValue}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){var e=this._addedLabels;if(e.length){var i,a,r=this.getLabels();for({index:i,label:a}of e)r[i]===a&&r.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){var i;return isNullOrUndef(t)?null:(i=this.getLabels(),e=isFinite(e)&&i[e]===t?e:findOrAddLabel(i,t,valueOrDefault(e,t),this._addedLabels),validIndex(e,i.length-1))}determineDataLimits(){var{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:a}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(a=this.getLabels().length-1)),this.min=i,this.max=a}buildTicks(){var e=this.min,i=this.max,t=this.options.offset,a=[];let r=this.getLabels();r=0===e&&i===r.length-1?r:r.slice(e,i+1),this._valueRange=Math.max(r.length-(t?0:1),1),this._startValue=this.min-(t?.5:0);for(let t=e;t<=i;t++)a.push({value:t});return a}getLabelForValue(t){return _getLabelForValue.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return null===(t="number"!=typeof t?this.parse(t):t)?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function generateTicks$1(t,e){var i=[],{bounds:a,step:r,min:s,max:n,precision:o,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=r||1,p=h-1,{min:e,max:g}=e,f=!isNullOrUndef(s),m=!isNullOrUndef(n),v=!isNullOrUndef(l),c=(g-e)/(c+1);let b=niceNum((g-e)/p/u)*u,_,x,y,S;if(b<1e-14&&!f&&!m)return[{value:e},{value:g}];(S=Math.ceil(g/b)-Math.floor(e/b))>p&&(b=niceNum(S*b/p/u)*u),isNullOrUndef(o)||(_=Math.pow(10,o),b=Math.ceil(b*_)/_),y="ticks"===a?(x=Math.floor(e/b)*b,Math.ceil(g/b)*b):(x=e,g),f&&m&&r&&almostWhole((n-s)/r,b/1e3)?(S=Math.round(Math.min((n-s)/b,h)),b=(n-s)/S,x=s,y=n):v?(x=f?s:x,y=m?n:y,S=l-1,b=(y-x)/S):S=almostEquals(S=(y-x)/b,Math.round(S),b/1e3)?Math.round(S):Math.ceil(S);p=Math.max(_decimalPlaces(b),_decimalPlaces(x));_=Math.pow(10,isNullOrUndef(o)?p:o),x=Math.round(x*_)/_,y=Math.round(y*_)/_;let k=0;for(f&&(d&&x!==s?(i.push({value:s}),x<s&&k++,almostEquals(Math.round((x+k*b)*_)/_,s,relativeLabelSize(s,c,t))&&k++):x<s&&k++);k<S;++k){var A=Math.round((x+k*b)*_)/_;if(m&&n<A)break;i.push({value:A})}return m&&d&&y!==n?i.length&&almostEquals(i[i.length-1].value,n,relativeLabelSize(n,c,t))?i[i.length-1].value=n:i.push({value:n}):m&&y!==n||i.push({value:y}),i}function relativeLabelSize(t,e,{horizontal:i,minRotation:a}){a=toRadians(a),i=(i?Math.sin(a):Math.cos(a))||.001;return Math.min(e/i,.75*e*(""+t).length)}class LinearScaleBase extends Scale{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return isNullOrUndef(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){var t=this.options["beginAtZero"];const{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:a,max:r}=this;var s,n,o=t=>a=e?a:t,l=t=>r=i?r:t;t&&(n=sign(a),s=sign(r),n<0&&s<0?l(0):0<n&&0<s&&o(0)),a===r&&(n=0===r?1:Math.abs(.05*r),l(r+n),t||o(a-n)),this.min=a,this.max=r}getTickLimit(){let{maxTicksLimit:t,stepSize:e}=this.options.ticks,i;return e?1e3<(i=Math.ceil(this.max/e)-Math.floor(this.min/e)+1)&&(console.warn(`scales.${this.id}.ticks.stepSize: ${e} would result generating up to ${i} ticks. Limiting to 1000.`),i=1e3):(i=this.computeTickLimit(),t=t||11),i=t?Math.min(t,i):i}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){var t=this.options,e=t.ticks,i=this.getTickLimit(),i=generateTicks$1({maxTicks:Math.max(2,i),bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&_setMinAndMaxByKey(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){var t=this.ticks;let e=this.min,i=this.max;super.configure(),this.options.offset&&t.length&&(t=(i-e)/Math.max(t.length-1,1)/2,e-=t,i+=t),this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return formatNumber(t,this.chart.options.locale,this.options.ticks.format)}}class LinearScale extends LinearScaleBase{static id="linear";static defaults={ticks:{callback:Ticks.formatters.numeric}};determineDataLimits(){var{min:t,max:e}=this.getMinMax(!0);this.min=isNumberFinite(t)?t:0,this.max=isNumberFinite(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){var t=this.isHorizontal(),e=t?this.width:this.height,i=toRadians(this.options.ticks.minRotation),t=(t?Math.sin(i):Math.cos(i))||.001,i=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,i.lineHeight/t))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const log10Floor=t=>Math.floor(log10(t)),changeExponent=(t,e)=>Math.pow(10,log10Floor(t)+e);function isMajor(t){return 1==t/Math.pow(10,log10Floor(t))}function steps(t,e,i){i=Math.pow(10,i),t=Math.floor(t/i);return Math.ceil(e/i)-t}function startExp(t,e){var i=e-t;let a=log10Floor(i);for(;10<steps(t,e,a);)a++;for(;steps(t,e,a)<10;)a--;return Math.min(a,log10Floor(t))}function generateTicks(t,{min:e,max:i}){e=finiteOrDefault(t.min,e);var a=[],r=log10Floor(e);let s=startExp(e,i),n=s<0?Math.pow(10,Math.abs(s)):1;var o=Math.pow(10,s),l=r>s?Math.pow(10,r):0,r=Math.round((e-l)*n)/n,h=Math.floor((e-l)/o/10)*o*10;let c=Math.floor((r-h)/Math.pow(10,s)),d=finiteOrDefault(t.min,Math.round((l+h+c*Math.pow(10,s))*n)/n);for(;d<i;)a.push({value:d,major:isMajor(d),significand:c}),10<=c?c=c<15?15:20:c++,20<=c&&(s++,c=2,n=0<=s?1:n),d=Math.round((l+h+c*Math.pow(10,s))*n)/n;e=finiteOrDefault(t.max,d);return a.push({value:e,major:isMajor(e),significand:c}),a}class LogarithmicScale extends Scale{static id="logarithmic";static defaults={ticks:{callback:Ticks.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){t=LinearScaleBase.prototype.parse.apply(this,[t,e]);if(0!==t)return isNumberFinite(t)&&0<t?t:null;this._zero=!0}determineDataLimits(){var{min:t,max:e}=this.getMinMax(!0);this.min=isNumberFinite(t)?Math.max(0,t):null,this.max=isNumberFinite(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!isNumberFinite(this._userMin)&&(this.min=t===changeExponent(this.min,0)?changeExponent(this.min,-1):changeExponent(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:e,maxDefined:i}=this.getUserBounds();let a=this.min,r=this.max;var t=t=>a=e?a:t,s=t=>r=i?r:t;a===r&&(a<=0?(t(1),s(10)):(t(changeExponent(a,-1)),s(changeExponent(r,1)))),a<=0&&t(changeExponent(r,-1)),r<=0&&s(changeExponent(a,1)),this.min=a,this.max=r}buildTicks(){var t=this.options,e=generateTicks({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&_setMinAndMaxByKey(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":formatNumber(t,this.chart.options.locale,this.options.ticks.format)}configure(){var t=this.min;super.configure(),this._startValue=log10(t),this._valueRange=log10(this.max)-log10(t)}getPixelForValue(t){return null===(t=void 0!==t&&0!==t?t:this.min)||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(log10(t)-this._startValue)/this._valueRange)}getValueForPixel(t){t=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+t*this._valueRange)}}function getTickBackdropHeight(t){var e=t.ticks;return e.display&&t.display?(t=toPadding(e.backdropPadding),valueOrDefault(e.font&&e.font.size,defaults.font.size)+t.height):0}function measureLabelSize(t,e,i){return i=isArray(i)?i:[i],{w:_longestText(t,e.string,i),h:i.length*e.lineHeight}}function determineLimits(t,e,i,a,r){return t===a||t===r?{start:e-i/2,end:e+i/2}:t<a||r<t?{start:e-i,end:e}:{start:e,end:e+i}}function fitWithPointLabels(e){var i={l:e.left+e._padding.left,r:e.right-e._padding.right,t:e.top+e._padding.top,b:e.bottom-e._padding.bottom},a=Object.assign({},i),r=[],s=[],n=e._pointLabels.length,o=e.options.pointLabels,l=o.centerPointLabels?PI/n:0;for(let t=0;t<n;t++){var h=o.setContext(e.getPointLabelContext(t)),c=(s[t]=h.padding,e.getPointPosition(t,e.drawingArea+s[t],l)),h=toFont(h.font),h=measureLabelSize(e.ctx,h,e._pointLabels[t]),d=(r[t]=h,_normalizeAngle(e.getIndexAngle(t)+l)),u=Math.round(toDegrees(d));updateLimits(a,i,d,determineLimits(u,c.x,h.w,0,180),determineLimits(u,c.y,h.h,90,270))}e.setCenterPoint(i.l-a.l,a.r-i.r,i.t-a.t,a.b-i.b),e._pointLabelItems=buildPointLabelItems(e,r,s)}function updateLimits(t,e,i,a,r){var s=Math.abs(Math.sin(i)),i=Math.abs(Math.cos(i));let n=0,o=0;a.start<e.l?(n=(e.l-a.start)/s,t.l=Math.min(t.l,e.l-n)):a.end>e.r&&(n=(a.end-e.r)/s,t.r=Math.max(t.r,e.r+n)),r.start<e.t?(o=(e.t-r.start)/i,t.t=Math.min(t.t,e.t-o)):r.end>e.b&&(o=(r.end-e.b)/i,t.b=Math.max(t.b,e.b+o))}function createPointLabelItem(t,e,i){var a=t.drawingArea,{extra:i,additionalAngle:r,padding:s,size:n}=i,t=t.getPointPosition(e,a+i+s,r),e=Math.round(toDegrees(_normalizeAngle(t.angle+HALF_PI))),a=yForAngle(t.y,n.h,e),i=getTextAlignForAngle(e),s=leftForTextAlign(t.x,n.w,i);return{visible:!0,x:t.x,y:a,textAlign:i,left:s,top:a,right:s+n.w,bottom:a+n.h}}function isNotOverlapped(t,e){var i,a,r;return!(e&&({left:t,top:i,right:a,bottom:r}=t,_isPointInArea({x:t,y:i},e)||_isPointInArea({x:t,y:r},e)||_isPointInArea({x:a,y:i},e)||_isPointInArea({x:a,y:r},e)))}function buildPointLabelItems(e,i,a){var r=[],s=e._pointLabels.length,t=e.options,{centerPointLabels:n,display:o}=t.pointLabels,l={extra:getTickBackdropHeight(t)/2,additionalAngle:n?PI/s:0};let h;for(let t=0;t<s;t++){l.padding=a[t],l.size=i[t];var c=createPointLabelItem(e,t,l);r.push(c),"auto"===o&&(c.visible=isNotOverlapped(c,h),c.visible)&&(h=c)}return r}function getTextAlignForAngle(t){return 0===t||180===t?"center":t<180?"left":"right"}function leftForTextAlign(t,e,i){return"right"===i?t-=e:"center"===i&&(t-=e/2),t}function yForAngle(t,e,i){return 90===i||270===i?t-=e/2:(270<i||i<90)&&(t-=e),t}function drawPointLabelBox(t,e,i){var a,r,{left:i,top:s,right:n,bottom:o}=i,l=e["backdropColor"];isNullOrUndef(l)||(a=toTRBLCorners(e.borderRadius),e=toPadding(e.backdropPadding),t.fillStyle=l,l=i-e.left,r=s-e.top,n=n-i+e.width,i=o-s+e.height,Object.values(a).some(t=>0!==t)?(t.beginPath(),addRoundedRectPath(t,{x:l,y:r,w:n,h:i,radius:a}),t.fill()):t.fillRect(l,r,n,i))}function drawPointLabels(e,i){var{ctx:a,options:{pointLabels:r}}=e;for(let t=i-1;0<=t;t--){var s,n,o,l,h=e._pointLabelItems[t];h.visible&&(drawPointLabelBox(a,s=r.setContext(e.getPointLabelContext(t)),h),n=toFont(s.font),{x:h,y:o,textAlign:l}=h,renderText(a,e._pointLabels[t],h,o+n.lineHeight/2,n,{color:s.color,textAlign:l,textBaseline:"middle"}))}}function pathRadiusLine(e,i,t,a){var r=e["ctx"];if(t)r.arc(e.xCenter,e.yCenter,i,0,TAU);else{var s=e.getPointPosition(0,i);r.moveTo(s.x,s.y);for(let t=1;t<a;t++)s=e.getPointPosition(t,i),r.lineTo(s.x,s.y)}}function drawRadiusLine(t,e,i,a,r){var s=t.ctx,n=e.circular,{color:e,lineWidth:o}=e;!n&&!a||!e||!o||i<0||(s.save(),s.strokeStyle=e,s.lineWidth=o,s.setLineDash(r.dash),s.lineDashOffset=r.dashOffset,s.beginPath(),pathRadiusLine(t,i,n,a),s.closePath(),s.stroke(),s.restore())}function createPointLabelContext(t,e,i){return createContext(t,{label:i,index:e,type:"pointLabel"})}class RadialLinearScale extends LinearScaleBase{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Ticks.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback(t){return t},padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){var t=this._padding=toPadding(getTickBackdropHeight(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){var{min:t,max:e}=this.getMinMax(!1);this.min=isNumberFinite(t)&&!isNaN(t)?t:0,this.max=isNumberFinite(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/getTickBackdropHeight(this.options))}generateTickLabels(t){LinearScaleBase.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map((t,e)=>{t=callback(this.options.pointLabels.callback,[t,e],this);return t||0===t?t:""}).filter((t,e)=>this.chart.getDataVisibility(e))}fit(){var t=this.options;t.display&&t.pointLabels.display?fitWithPointLabels(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,a){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-a)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,a))}getIndexAngle(t){return _normalizeAngle(t*(TAU/(this._pointLabels.length||1))+toRadians(this.options.startAngle||0))}getDistanceFromCenterForValue(t){var e;return isNullOrUndef(t)?NaN:(e=this.drawingArea/(this.max-this.min),this.options.reverse?(this.max-t)*e:(t-this.min)*e)}getValueForDistanceFromCenter(t){return isNullOrUndef(t)?NaN:(t=t/(this.drawingArea/(this.max-this.min)),this.options.reverse?this.max-t:this.min+t)}getPointLabelContext(t){var e=this._pointLabels||[];if(0<=t&&t<e.length)return e=e[t],createPointLabelContext(this.getContext(),t,e)}getPointPosition(t,e,i=0){t=this.getIndexAngle(t)-HALF_PI+i;return{x:Math.cos(t)*e+this.xCenter,y:Math.sin(t)*e+this.yCenter,angle:t}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){var{left:t,top:e,right:i,bottom:a}=this._pointLabelItems[t];return{left:t,top:e,right:i,bottom:a}}drawBackground(){var t,{backgroundColor:e,grid:{circular:i}}=this.options;e&&((t=this.ctx).save(),t.beginPath(),pathRadiusLine(this,this.getDistanceFromCenterForValue(this._endValue),i,this._pointLabels.length),t.closePath(),t.fillStyle=e,t.fill(),t.restore())}drawGrid(){var t=this.ctx,e=this.options;const{angleLines:i,grid:a,border:r}=e,s=this._pointLabels.length;let n,o,l;if(e.pointLabels.display&&drawPointLabels(this,s),a.display&&this.ticks.forEach((t,e)=>{0!==e&&(o=this.getDistanceFromCenterForValue(t.value),t=this.getContext(e),e=a.setContext(t),t=r.setContext(t),drawRadiusLine(this,e,o,s,t))}),i.display){for(t.save(),n=s-1;0<=n;n--){var h=i.setContext(this.getPointLabelContext(n)),{color:c,lineWidth:d}=h;d&&c&&(t.lineWidth=d,t.strokeStyle=c,t.setLineDash(h.borderDash),t.lineDashOffset=h.borderDashOffset,o=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(n,o),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const n=this.ctx,o=this.options,l=o.ticks;if(l.display){var t=this.getIndexAngle(0);let r,s;n.save(),n.translate(this.xCenter,this.yCenter),n.rotate(t),n.textAlign="center",n.textBaseline="middle",this.ticks.forEach((t,e)=>{var i,a;0===e&&!o.reverse||(a=toFont((i=l.setContext(this.getContext(e))).font),r=this.getDistanceFromCenterForValue(this.ticks[e].value),i.showLabelBackdrop&&(n.font=a.string,s=n.measureText(t.label).width,n.fillStyle=i.backdropColor,e=toPadding(i.backdropPadding),n.fillRect(-s/2-e.left,-r-a.size/2-e.top,s+e.width,a.size+e.height)),renderText(n,t.label,0,-r,a,{color:i.color,strokeColor:i.textStrokeColor,strokeWidth:i.textStrokeWidth}))}),n.restore()}}drawTitle(){}}const INTERVALS={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},UNITS=Object.keys(INTERVALS);function sorter(t,e){return t-e}function parse(t,e){if(isNullOrUndef(e))return null;var i=t._adapter,{parser:t,round:a,isoWeekday:r}=t._parseOpts;let s=e;return null===(s=isNumberFinite(s="function"==typeof t?t(s):s)?s:"string"==typeof t?i.parse(s,t):i.parse(s))?null:+(s=a?"week"!==a||!isNumber(r)&&!0!==r?i.startOf(s,a):i.startOf(s,"isoWeek",r):s)}function determineUnitForAutoTicks(e,i,a,r){var s=UNITS.length;for(let t=UNITS.indexOf(e);t<s-1;++t){var n=INTERVALS[UNITS[t]],o=n.steps||Number.MAX_SAFE_INTEGER;if(n.common&&Math.ceil((a-i)/(o*n.size))<=r)return UNITS[t]}return UNITS[s-1]}function determineUnitForFormatting(e,i,a,r,s){for(let t=UNITS.length-1;t>=UNITS.indexOf(a);t--){var n=UNITS[t];if(INTERVALS[n].common&&e._adapter.diff(s,r,n)>=i-1)return n}return UNITS[a?UNITS.indexOf(a):0]}function determineMajorUnit(i){for(let t=UNITS.indexOf(i)+1,e=UNITS.length;t<e;++t)if(INTERVALS[UNITS[t]].common)return UNITS[t]}function addTick(t,e,i){var a,r;i?i.length&&({lo:a,hi:r}=_lookup(i,e),t[i[a]>=e?i[a]:i[r]]=!0):t[e]=!0}function setMajorTicks(t,e,i,a){var r=t._adapter,t=+r.startOf(e[0].value,a),s=e[e.length-1].value;let n,o;for(n=t;n<=s;n=+r.add(n,1,a))0<=(o=i[n])&&(e[o].major=!0);return e}function ticksFromTimestamps(t,e,i){var a=[],r={},s=e.length;let n,o;for(n=0;n<s;++n)r[o=e[n]]=n,a.push({value:o,major:!1});return 0!==s&&i?setMajorTicks(t,a,r,i):a}class TimeScale extends Scale{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){var i=t.time||(t.time={}),a=this._adapter=new adapters._date(t.adapters.date);a.init(e),mergeIf(i.displayFormats,a.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:parse(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){var t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:a,max:r,minDefined:s,maxDefined:n}=this.getUserBounds();function o(t){s||isNaN(t.min)||(a=Math.min(a,t.min)),n||isNaN(t.max)||(r=Math.max(r,t.max))}s&&n||(o(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source)||o(this.getMinMax(!1)),a=isNumberFinite(a)&&!isNaN(a)?a:+e.startOf(Date.now(),i),r=isNumberFinite(r)&&!isNaN(r)?r:+e.endOf(Date.now(),i)+1,this.min=Math.min(a,r-1),this.max=Math.max(a+1,r)}_getLabelBounds(){var t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){var t=this.options,e=t.time,i=t.ticks,a="labels"===i.source?this.getLabelTimestamps():this._generate(),r=("ticks"===t.bounds&&a.length&&(this.min=this._userMin||a[0],this.max=this._userMax||a[a.length-1]),this.min),s=_filterBetween(a,r,this.max);return this._unit=e.unit||(i.autoSkip?determineUnitForAutoTicks(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):determineUnitForFormatting(this,s.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?determineMajorUnit(this._unit):void 0,this.initOffsets(a),t.reverse&&s.reverse(),ticksFromTimestamps(this,s,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map(t=>+t.value))}initOffsets(t=[]){let e=0,i=0;this.options.offset&&t.length&&(a=this.getDecimalForValue(t[0]),e=1===t.length?1-a:(this.getDecimalForValue(t[1])-a)/2,a=this.getDecimalForValue(t[t.length-1]),i=1===t.length?a:(a-this.getDecimalForValue(t[t.length-2]))/2);var a=t.length<3?.5:.25;e=_limitValue(e,0,a),i=_limitValue(i,0,a),this._offsets={start:e,end:i,factor:1/(e+1+i)}}_generate(){var t=this._adapter,e=this.min,i=this.max,a=this.options,r=a.time,s=r.unit||determineUnitForAutoTicks(r.minUnit,e,i,this._getLabelCapacity(e)),n=valueOrDefault(a.ticks.stepSize,1),r="week"===s&&r.isoWeekday,o=isNumber(r)||!0===r,l={};let h=e,c,d;if(o&&(h=+t.startOf(h,"isoWeek",r)),h=+t.startOf(h,o?"day":s),t.diff(i,e,s)>1e5*n)throw new Error(e+" and "+i+" are too far apart with stepSize of "+n+" "+s);var u="data"===a.ticks.source&&this.getDataTimestamps();for(c=h,d=0;c<i;c=+t.add(c,n,s),d++)addTick(l,c,u);return c!==i&&"ticks"!==a.bounds&&1!==d||addTick(l,c,u),Object.keys(l).sort(sorter).map(t=>+t)}getLabelForValue(t){var e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){var i=this.options.time.displayFormats,a=this._unit,e=e||i[a];return this._adapter.format(t,e)}_tickFormatFunction(t,e,i,a){var r,s=this.options,n=s.ticks.callback;return n?callback(n,[t,e,i],this):(n=s.time.displayFormats,s=this._unit,r=this._majorUnit,s=s&&n[s],n=r&&n[r],i=i[e],e=r&&n&&i&&i.major,this._adapter.format(t,a||(e?n:s)))}generateTickLabels(t){let e,i,a;for(e=0,i=t.length;e<i;++e)(a=t[e]).label=this._tickFormatFunction(a.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){var e=this._offsets,t=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+t)*e.factor)}getValueForPixel(t){var e=this._offsets,t=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+t*(this.max-this.min)}_getLabelSize(t){var e=this.options.ticks,t=this.ctx.measureText(t).width,e=toRadians(this.isHorizontal()?e.maxRotation:e.minRotation),i=Math.cos(e),e=Math.sin(e),a=this._resolveTickFontOptions(0).size;return{w:t*i+a*e,h:t*e+a*i}}_getLabelCapacity(t){var e=this.options.time,i=e.displayFormats,e=i[e.unit]||i.millisecond,i=this._tickFormatFunction(t,0,ticksFromTimestamps(this,[t],this._majorUnit),e),t=this._getLabelSize(i),e=Math.floor(this.isHorizontal()?this.width/t.w:this.height/t.h)-1;return 0<e?e:1}getDataTimestamps(){let t=this._cache.data||[],e,i;if(t.length)return t;var a=this.getMatchingVisibleMetas();if(this._normalized&&a.length)return this._cache.data=a[0].controller.getAllParsedValues(this);for(e=0,i=a.length;e<i;++e)t=t.concat(a[e].controller.getAllParsedValues(this));return this._cache.data=this.normalize(t)}getLabelTimestamps(){var t=this._cache.labels||[];let e,i;if(t.length)return t;var a=this.getLabels();for(e=0,i=a.length;e<i;++e)t.push(parse(this,a[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return _arrayUnique(t.sort(sorter))}}function interpolate(t,e,i){let a=0,r=t.length-1,s,n,o,l;i?(e>=t[a].pos&&e<=t[r].pos&&({lo:a,hi:r}=_lookupByKey(t,"pos",e)),{pos:s,time:o}=t[a],{pos:n,time:l}=t[r]):(e>=t[a].time&&e<=t[r].time&&({lo:a,hi:r}=_lookupByKey(t,"time",e)),{time:s,pos:o}=t[a],{time:n,pos:l}=t[r]);i=n-s;return i?o+(l-o)*(e-s)/i:o}class TimeSeriesScale extends TimeScale{static id="timeseries";static defaults=TimeScale.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){var t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=interpolate(e,this.min),this._tableRange=interpolate(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){var{min:e,max:i}=this,a=[],r=[];let s,n,o,l,h;for(s=0,n=t.length;s<n;++s)(l=t[s])>=e&&l<=i&&a.push(l);if(a.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(s=0,n=a.length;s<n;++s)h=a[s+1],o=a[s-1],l=a[s],Math.round((h+o)/2)!==l&&r.push({time:l,pos:s/(n-1)});return r}_generate(){var t=this.min,e=this.max,i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort((t,e)=>t-e)}_getTimestampsForTable(){let t=this._cache.all||[];var e,i;return t.length||(e=this.getDataTimestamps(),i=this.getLabelTimestamps(),t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t),t}getDecimalForValue(t){return(interpolate(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){var e=this._offsets,t=this.getDecimalForPixel(t)/e.factor-e.end;return interpolate(this._table,t*this._tableRange+this._minPos,!0)}}var scales=Object.freeze({__proto__:null,CategoryScale:CategoryScale,LinearScale:LinearScale,LogarithmicScale:LogarithmicScale,RadialLinearScale:RadialLinearScale,TimeScale:TimeScale,TimeSeriesScale:TimeSeriesScale});const registerables=[controllers,elements,plugins,scales];export{Chart as C,_decorate as _,_get as a,_getPrototypeOf as b,_toConsumableArray as c,_taggedTemplateLiteral as d,e,e$1 as f,_inherits as g,_createSuper as h,_createClass as i,_classCallCheck as j,_assertThisInitialized as k,i$2 as l,registerables as r,s,x};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
