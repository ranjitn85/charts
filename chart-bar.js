import{_ as _decorate,s,e,a as _get,b as _getPrototypeOf,C as Chart,c as _toConsumableArray,x,d as _taggedTemplateLiteral,f as e$1,g as _inherits,h as _createSuper,i as _createClass,j as _classCallCheck,k as _assertThisInitialized,r as registerables}from"./chart-48d074a4.js";var _templateObject,config={controlName:"chart-bar",groupName:"Charts",fallbackDisableSubmit:!1,description:"Creates a Bar chart",version:"1.0",properties:{chartData:{type:"string",title:"Data Array"},backgroundColor:{type:"string",title:"Background Color in comma separated format"}},events:["ntx-value-change"],standardProperties:{fieldLabel:!0,description:!0,defaultValue:!0,readOnly:!0,visibility:!0}},styles=[],BarChart=_decorate([e$1("chart-bar")],function(s,t){var a=function(){_inherits(o,t);var n=_createSuper(o);function o(){var t;_classCallCheck(this,o);for(var e=arguments.length,a=new Array(e),r=0;r<e;r++)a[r]=arguments[r];return t=n.call.apply(n,[this].concat(a)),s(_assertThisInitialized(t)),t}return _createClass(o)}();return{F:a,d:[{kind:"field",static:!0,key:"getMetaConfig",value:function(){return function(){return config}}},{kind:"field",static:!0,key:"styles",value:function(){return styles}},{kind:"field",decorators:[e({type:String})],key:"chartData",value:void 0},{kind:"field",decorators:[e({type:String})],key:"backgroundColor",value:void 0},{kind:"field",decorators:[e({type:String})],key:"datasetLabel",value:void 0},{kind:"field",key:"chartContainer",value:void 0},{kind:"field",key:"chartInstance",value:void 0},{kind:"method",key:"updated",value:function(t){_get(_getPrototypeOf(a.prototype),"updated",this).call(this,t),(t.has("chartData")||t.has("backgroundColor"))&&this.updateChart()}},{kind:"method",key:"updateChart",value:function(){var t,e=this.parseChartData();e&&0!==e.length&&(this.chartInstance&&this.chartInstance.destroy(),this.chartContainer=document.createElement("canvas"),null!=(t=this.shadowRoot)&&t.appendChild(this.chartContainer),this.chartInstance?(this.chartInstance.data.labels=e.map(function(t){return t.label}),this.chartInstance.data.datasets=[{label:this.datasetLabel,data:e.map(function(t){return t.value}),backgroundColor:this.backgroundColor?this.getCustomColors(e.length):this.getDefaultColors(e.length),borderColor:this.backgroundColor?this.getCustomColors(e.length):this.getDefaultColors(e.length),borderWidth:1}],this.chartInstance.update()):(Chart.register.apply(Chart,_toConsumableArray(registerables)),this.chartInstance=new Chart(this.chartContainer.getContext("2d"),{type:"bar",data:{labels:e.map(function(t){return t.label}),datasets:[{label:"Dataset Label",data:e.map(function(t){return t.value}),backgroundColor:this.backgroundColor?this.getCustomColors(e.length):this.getDefaultColors(e.length),borderColor:this.backgroundColor?this.getCustomColors(e.length):this.getDefaultColors(e.length),borderWidth:1}]},options:{plugins:{legend:{display:!1}}}})))}},{kind:"method",key:"getDefaultColors",value:function(t){var a=["#FF0000","#00FF00","#FFFF00","#0000FF"];return Array.from({length:t},function(t,e){return a[e%a.length]})}},{kind:"method",key:"getCustomColors",value:function(t){var a=this.backgroundColor.split(",").map(function(t){return t.trim()});return Array.from({length:t},function(t,e){return a[e%a.length]})}},{kind:"method",key:"parseChartData",value:function(){var t;try{t=JSON.parse(this.chartData)}catch(t){return console.error("Error parsing JSON:",t),null}return Array.isArray(t)&&0!==t.length?t:null}},{kind:"method",key:"render",value:function(){return x(_templateObject=_templateObject||_taggedTemplateLiteral([""]))}}]}},s);export{BarChart};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
